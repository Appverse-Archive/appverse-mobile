<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Lumia.Imaging</name>
  </assembly>
  <members>
    <member name="T:Lumia.Imaging.AnimationFrame">
      <summary>
"Decorating" <see cref="T:Lumia.Imaging.IImageProvider" /> with animation-specific properties. These properties are used by <see cref="T:Lumia.Imaging.GifRenderer" />. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new AnimationFrame.
</summary>
      <param name="imageSource">The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be decorated with animation-related properties.</param>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.#ctor(Lumia.Imaging.IImageProvider,System.Int32)">
      <summary>
Creates and initializes a new AnimationFrame with the specified playback duration.
</summary>
      <param name="imageSource">The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be decorated with animation-related properties.</param>
      <param name="duration">The playback duration of this frame in milliseconds.</param>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.#ctor(Lumia.Imaging.IImageProvider,System.Int32,Windows.Foundation.Point)">
      <summary>
Creates and initializes a new AnimationFrame with the specified playback duration.
</summary>
      <param name="imageSource">The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be decorated with animation-related properties.</param>
      <param name="duration">The playback duration of this frame in milliseconds.</param>
      <param name="position">The spatial position of the top left corner of this frame, in pixels relative to the first frame.</param>
    </member>
    <member name="P:Lumia.Imaging.AnimationFrame.Dithering">
      <summary>
Controls whether or not this image will be dithered.
</summary>
    </member>
    <member name="P:Lumia.Imaging.AnimationFrame.Duration">
      <summary>
Controls how long time the frame is visible, in milliseconds.
</summary>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.AnimationFrame.Position">
      <summary>
Sets the position of the frame, expressed in the output dimensions of the GIF image.
Has to be greater or equal to zero.
If the Size has been set on the GifRenderer all the images will be resized to the specified size and position will be applied after the resizing.
<para>The default is (0, 0).</para></summary>
    </member>
    <member name="M:Lumia.Imaging.AnimationFrame.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.AnimationFrame.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be decorated with animation-related properties.
</summary>
    </member>
    <member name="T:Lumia.Imaging.AnimationFrameDithering">
      <summary>
Animation frame palette source designator
</summary>
    </member>
    <member name="F:Lumia.Imaging.AnimationFrameDithering.UseRendererSetting">
      <summary>
Use the value from GifRenderer.ApplyDithering to determine if the frame should be dithered.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AnimationFrameDithering.On">
      <summary>
Dither the frame.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AnimationFrameDithering.Off">
      <summary>
Do not dither the frame.
</summary>
    </member>
    <member name="T:Lumia.Imaging.AutoResizeConfiguration">
      <summary>
Configuration settings for the JpegTools resize.
</summary>
    </member>
    <member name="M:Lumia.Imaging.AutoResizeConfiguration.#ctor">
      <summary>
Creates a new resize configuration object for the JpegTools.
</summary>
    </member>
    <member name="M:Lumia.Imaging.AutoResizeConfiguration.#ctor(System.UInt32,Windows.Foundation.Size,Windows.Foundation.Size,Lumia.Imaging.AutoResizeMode,System.Double,Lumia.Imaging.ColorSpace)">
      <summary>
Creates a new resize configuration object for the JpegTools.
</summary>
      <param name="maxBufferSize">
Maximum output buffer size in bytes.
</param>
      <param name="maxImageSize">
        <para>
Maximum image size to achieve. The rendered image will fit within this outer bounding box when
allowing for rotation. The size must be larger than minImageSize.
A maxImageSize of {640, 480} will, for the following different source
image sizes, give this maximum size:
</para>
        <para>{1024, 1024} will be at most {480, 480}</para>
        <para>{1280, 640}  will be at most {640, 320}</para>
        <para>{640, 1280}  will be at most {320, 640}</para>
      </param>
      <param name="minImageSize">
        <para>
Minimum image size to achieve. The rendered image will be at least as large as this size in at least
one dimension. The size must be smaller than maxImageSize.
A minImageSize of {160, 120} will, for the following different source
image sizes, give this minimum size:
</para>
        <para>{1024, 1024} will be at least {120, 120}</para>
        <para>{1280, 640}  will be at least {160, 80}</para>
        <para>{640, 1280}  will be at least {80, 160}</para>
      </param>
      <param name="resizeMode">
One of the AutoResizeModes.
</param>
      <param name="minEncodingQuality">
The lowest desired encoding quality. Must be in the range [0.0, 1.0]
</param>
      <param name="colorSpacing">
Color spacing will affect how the color channels are sub-sampled when encoding the
JPEG file. Sub-sampling of the color channels will reduce the resulting file size.
YUV 4:2:0 color spacing is recommended for achieving the lowest file size.
</param>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.ColorSpacing">
      <summary>
One of the supported color spaces.
</summary>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.MaxBufferSize">
      <summary>
Maximum output buffer size in bytes.
</summary>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.MaxImageSize">
      <summary>
Maximum image size to achieve. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.MinEncodingQuality">
      <summary>
        <para>The lowest desired encoding quality.</para>
        <para>Range [0.0, 1.0]</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.MinImageSize">
      <summary>
Minimum image size to achieve. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.AutoResizeConfiguration.ResizeMode">
      <summary>
One of the AutoResizeModes.
</summary>
    </member>
    <member name="M:Lumia.Imaging.AutoResizeConfiguration.ToString">
      <summary>
Returns a string that represents the current object.
</summary>
      <returns>
A string that represents the current object.
</returns>
    </member>
    <member name="T:Lumia.Imaging.AutoResizeMode">
      <summary>
Resize modes used with JpegTools::AutoResizeAsync.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AutoResizeMode.Automatic">
      <summary>Auto resize will simultaneously lower the encoding quality and shrink
the width and height of the image.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AutoResizeMode.PreserveSourceEncodingQuality">
      <summary>Auto resize will try to preserve the source encoding quality while
shrinking the width and height of the image.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AutoResizeMode.PrioritizeLargeImageSize">
      <summary>Auto resize will try to preserve the maxImageSize while lowering
the encoding quality.
</summary>
    </member>
    <member name="F:Lumia.Imaging.AutoResizeMode.PrioritizeHighEncodingQuality">
      <summary>Auto resize will try to preserve the highest possible encoding quality
while shrinking the width and height of the image. This might be
useful if you substantially reduce the size of the image.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Bitmap">
      <summary>
Contains pixel data for an image. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.#ctor(Lumia.Imaging.Bitmap,Windows.Foundation.Rect)">
      <summary>
Creates a Bitmap that points to the same image data as another Bitmap, cropped to a smaller rectangle.
</summary>
      <param name="sourceBitmap"> a Bitmap </param>
      <param name="cropArea"> Crop area rectangle. Must fit within dimensions of sourceBitmap. </param>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Lumia.Imaging.ColorMode)">
      <summary>
Creates an empty Bitmap where data can be rendered to.
</summary>
      <param name="size">The size in pixels of the bitmap to be created.</param>
      <param name="colorMode">The color mode of the bitmap to be created.</param>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Lumia.Imaging.ColorMode,System.UInt32,Windows.Storage.Streams.IBuffer)">
      <summary>
Creates a Bitmap referencing the data in the provided IBuffer. Use only with interleaved, non-planar color modes.
Single plane color modes are Ayuv4444, Rgb565, Rgb565D, Argb8888, Bgra8888, Pbgra8888, Gray8, Yuv422_Y1UY2V.
</summary>
      <param name="size">The size in pixels of the bitmap to be created.</param>
      <param name="colorMode">The color mode of the bitmap to be created.</param>
      <param name="scanlineByteSize">The size in bytes of the scanline of the bitmap to be created.</param>
      <param name="pixels">The pixel data that the bitmap will reference, provided in an IBuffer.</param>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Lumia.Imaging.ColorMode,System.UInt32[],Windows.Storage.Streams.IBuffer[])">
      <summary>
Creates a bitmap referencing the data in the provided IBuffers. Suitable for planar and semi-planar color modes.
</summary>
      <param name="size">The size in pixels of the bitmap to be created.</param>
      <param name="colorMode">The color mode of the bitmap to be created.</param>
      <param name="scanlineByteSizes">The size in bytes of the scanline of each of the color planes of the bitmap to be created.</param>
      <param name="colorPlanes">The color planes that the bitmap will reference, provided in IBuffers.</param>
    </member>
    <member name="P:Lumia.Imaging.Bitmap.Buffers">
      <summary>
The buffers underlying this Bitmap.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Bitmap.ColorMode">
      <summary>
The color mode of the bitmap.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.ConvertFrom(Lumia.Imaging.Bitmap)">
      <summary>
Color conversion of the image data from the passed bitmap.
</summary>
      <param name="sourceBitmap">The input bitmap.</param>
    </member>
    <member name="M:Lumia.Imaging.Bitmap.CopyDataFrom(Lumia.Imaging.IReadableBitmap)">
      <summary>
Copies the image data from the passed bitmap.
</summary>
      <param name="sourceBitmap">The bitmap to copy the data from.</param>
    </member>
    <member name="P:Lumia.Imaging.Bitmap.Dimensions">
      <summary>
The dimensions of the bitmap.
</summary>
    </member>
    <member name="T:Lumia.Imaging.BitmapImageSource">
      <summary>
An image source created from a bitmap.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.#ctor(Lumia.Imaging.IReadableBitmap)">
      <summary>
Creates and initializes a new image source with a bitmap. The bitmap is not copied.
</summary>
      <param name="bitmap">An input bitmap to use as source.</param>
    </member>
    <member name="P:Lumia.Imaging.BitmapImageSource.Bitmap">
      <summary>
The bitmap to use as source.
</summary>
    </member>
    <member name="P:Lumia.Imaging.BitmapImageSource.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.BitmapImageSource.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.BitmapProviderImageSource">
      <summary>
An image source created from a provider of a bitmap.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.#ctor(Lumia.Imaging.IReadableBitmapProvider)">
      <summary>
Creates and initializes a new image source from an asynchronous bitmap provider.
</summary>
      <param name="readableBitmapProvider">
An <see cref="T:Lumia.Imaging.IReadableBitmapProvider" /> that will provide a bitmap containing the image.
</param>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.BitmapProviderImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="T:Lumia.Imaging.BitmapRenderer">
      <summary>
Renders an image source to a bitmap.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.#ctor">
      <summary>
Creates and initializes a new bitmap renderer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new bitmap renderer with an image source.
</summary>
      <param name="imageSource">The image source that will be rendered.</param>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Bitmap)">
      <summary>
Creates and initializes a new bitmap renderer with an image source and a target bitmap.
</summary>
      <param name="imageSource">The image source that will be rendered.</param>
      <param name="bitmap">The bitmap that will be rendered to.</param>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>
Creates and initializes a new bitmap renderer with an image source and a target bitmap.
</summary>
      <param name="imageSource">The image source that will be rendered.</param>
      <param name="bitmap">The bitmap that will be rendered to.</param>
      <param name="outputOption">Controls how the image is rendered.</param>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.ColorMode)">
      <summary>
Creates and initializes a new bitmap renderer with an image source and a <see cref="P:Lumia.Imaging.BitmapRenderer.ColorMode" />.
</summary>
      <param name="imageSource">The image source that will be rendered.</param>
      <param name="colorMode">The ColorMode that will be used when rendering</param>
    </member>
    <member name="P:Lumia.Imaging.BitmapRenderer.Bitmap">
      <summary>
The bitmap that will be rendered to.
</summary>
    </member>
    <member name="P:Lumia.Imaging.BitmapRenderer.ColorMode">
      <summary>
The output ColorMode used when rendering.
</summary>
    </member>
    <member name="P:Lumia.Imaging.BitmapRenderer.OutputOption">
      <summary>
Controls how the image is rendered.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BitmapRenderer.RenderAsync">
      <summary>
Renders the image source to the bitmap.
</summary>
      <returns>An asynchronous operation representing the rendering operation.</returns>
    </member>
    <member name="P:Lumia.Imaging.BitmapRenderer.Size">
      <summary>
The output size to use if no bitmap has been specified.
</summary>
    </member>
    <member name="P:Lumia.Imaging.BitmapRenderer.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.BufferImageSource">
      <summary>
An image source created from a compressed image buffer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.#ctor(Windows.Storage.Streams.IBuffer)">
      <summary>
Creates and initializes a new image source with a compressed image buffer. The buffer is not copied.
</summary>
      <param name="buffer">Buffer containing the compressed image data.</param>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.#ctor(Windows.Storage.Streams.IBuffer,Lumia.Imaging.ImageFormat)">
      <summary>
Creates and initializes a new image source with a compressed image buffer with a known image format. 
The buffer is not copied.
</summary>
      <param name="buffer">Buffer containing the compressed image data.</param>
      <param name="imageFormat">The image format of the image in the provided buffer.</param>
    </member>
    <member name="P:Lumia.Imaging.BufferImageSource.Buffer">
      <summary>
The buffer containing the compressed image data.
</summary>
    </member>
    <member name="P:Lumia.Imaging.BufferImageSource.FrameIndex">
      <summary>The index of the currently active frame.</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.BufferImageSource.ImageFormat">
      <summary>
The format of the compressed image data.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.BufferImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="T:Lumia.Imaging.BufferProviderImageSource">
      <summary>
An image source created from a provider of a compressed image buffer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.#ctor(Lumia.Imaging.IBufferProvider)">
      <summary>
Creates and initializes a new image source from an asynchronous buffer provider.
</summary>
      <param name="bufferProvider">
An <see cref="T:Lumia.Imaging.IBufferProvider" /> that will provide a buffer containing the compressed image data.
</param>
    </member>
    <member name="P:Lumia.Imaging.BufferProviderImageSource.FrameIndex">
      <summary>The index of the currently active frame.</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.BufferProviderImageSource.ImageFormat">
      <summary>
The format of the compressed image data.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.BufferProviderImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="T:Lumia.Imaging.CachingEffect">
      <summary>
An effect that renders a cached bitmap of the source image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.#ctor">
      <summary>
Creates and initializes a new CachingEffect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new CachingEffect that uses the provided image source.
</summary>
      <param name="imageSource">The source image that will be turned into a bitmap.</param>
    </member>
    <member name="P:Lumia.Imaging.CachingEffect.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="P:Lumia.Imaging.CachingEffect.ColorMode">
      <summary>
The ColorMode used for the cached bitmap.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.Invalidate">
      <summary>
Invalidates the cached image, allowing it to be updated the next time a render occurs.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.CachingEffect.OutputOption">
      <summary>
Controls how the cached image is rendered.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CachingEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.CachingEffect.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="P:Lumia.Imaging.CachingEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.CameraPreviewImageSource">
      <summary>
An image source taking the preview buffer from an ICameraCaptureDevice.
Implementations of ICameraCaptureDevice include PhotoCaptureDevice and AudioVideoCaptureDevice.
</summary>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.#ctor(Windows.Phone.Media.Capture.ICameraCaptureDevice)">
      <summary>
Creates and initializes a new image source with a camera capture device.
</summary>
      <param name="cameraCaptureDevice">The camera device that will provide the image data.</param>
    </member>
    <member name="P:Lumia.Imaging.CameraPreviewImageSource.CameraCaptureDevice">
      <summary>
The camera device that will provide the image data.
</summary>
    </member>
    <member name="P:Lumia.Imaging.CameraPreviewImageSource.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.InvalidateLoad">
      <summary>Invalidates any camera preview image loaded in a previous call to <see cref="M:Lumia.Imaging.CameraPreviewImageSource.PreloadAsync" />.</summary>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="M:Lumia.Imaging.CameraPreviewImageSource.PreloadFrameAsync(Windows.Phone.Media.Capture.ICameraCaptureFrame)">
      <summary>Loads a specific frame from a CameraCaptureSequence.</summary>
      <param name="cameraCaptureFrame">The photo, in a capture sequence, that will provide the image data.</param>
      <returns>An async action, which completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.CameraPreviewImageSource.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.ColorImageSource">
      <summary>An image source that provides an image based on a constant color.</summary>
    </member>
    <member name="M:Lumia.Imaging.ColorImageSource.#ctor(Windows.Foundation.Size,Windows.UI.Color)">
      <summary>
Creates and initializes a new image source with a specific size and color.
</summary>
      <param name="size">The size of the image.</param>
      <param name="color">The color to give the image.</param>
    </member>
    <member name="P:Lumia.Imaging.ColorImageSource.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorImageSource.Color">
      <summary>
The color to give the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.ColorImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.ColorImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.ColorImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.ColorImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.ColorImageSource.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.ColorMode">
      <summary>
Color formats
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Ayuv4444">
      <summary>
Standard interleaved AYUV.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Rgb565">
      <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Rgb565D">
      <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved, with dithering to minimize gradient errors.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Argb8888">
      <summary>
4 bytes per pixel, interleaved.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Bgra8888">
      <summary>
4 bytes per pixel, interleaved.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Pbgra8888">
      <summary>
4 bytes per pixel, interleaved, with premultiplied alpha.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Gray8">
      <summary>
8 bit grayscale, 8 bit per pixel.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Gray16">
      <summary>
16 bit grayscale, 16 bit per pixel.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Gray32">
      <summary>
32 bit grayscale, 32 bit per pixel.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv422P">
      <summary>
Planar YUV422. YYY..., UUU..., VVV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv420Sp">
      <summary>
Semi-planar YUV420. YYY..., UVUVUV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yvu420Sp">
      <summary>
Semi-planar YVU420. YYY..., VUVUVU...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv422Sp">
      <summary>
Semi-planar YUV422. YYY..., UVUVUV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yvu422Sp">
      <summary>
Semi-planar YVU422. YYY..., VUVUVU...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv420P">
      <summary>
Planar YUV420. YYY..., UUU..., VVV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv444P">
      <summary>
Planar YUV444. YYY..., UUU..., VVV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Yuv422_Y1UY2V">
      <summary>
Y, U, Y, V, interleaved.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Y">
      <summary>
Represents the Y channel (luma) in a planar format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.U">
      <summary>
Represents the U channel (chroma) in a planar format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.V">
      <summary>
Represents the V channel (chroma) in a planar format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Uv">
      <summary>
Represent a single UV channel, UVUVUV...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Vu">
      <summary>
Represent a single VU channel, VUVUVU...
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Float16">
      <summary>
16 bit float16 per pixel.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorMode.Float32">
      <summary>
32 bit float32 per pixel.
</summary>
    </member>
    <member name="T:Lumia.Imaging.ColorModeDescriptor">
      <summary>
Provides information about a color mode.
</summary>
    </member>
    <member name="M:Lumia.Imaging.ColorModeDescriptor.#ctor(Lumia.Imaging.ColorMode)">
      <summary>
Creates a new descriptor for a colormode.
</summary>
      <param name="colorMode">
The color mode to create a descriptor for.
</param>
    </member>
    <member name="P:Lumia.Imaging.ColorModeDescriptor.BitsPerPixel">
      <summary>
The number of bits needed for storing a pixel.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorModeDescriptor.BytesPerPixel">
      <summary>
The number of bytes needed for storing a pixel.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorModeDescriptor.PlaneDescriptors">
      <summary>
Descriptors for the planes used.
</summary>
    </member>
    <member name="T:Lumia.Imaging.ColorPlaneDescriptor">
      <summary>
Provides details about a color mode plane.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorPlaneDescriptor.BitsPerSample">
      <summary>
The number of bits needed for storing a plane element.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorPlaneDescriptor.BytesPerSample">
      <summary>
The number of bytes needed for storing a plane element.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ColorPlaneDescriptor.ColorMode">
      <summary>
The color mode of the plane.
</summary>
    </member>
    <member name="M:Lumia.Imaging.ColorPlaneDescriptor.GetSize(Windows.Foundation.Size)">
      <summary>
Returns the size of this plane given an image size, taking subsampling into account.
</summary>
      <param name="imageSize">The size of the image, in pixels.</param>
      <returns>The size of the plane, in elements.</returns>
    </member>
    <member name="T:Lumia.Imaging.ColorSpace">
      <summary>
Color spacing modes for YUV component data.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Undefined">
      <summary>Unknown or undefined colorspacing.</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Yuv420">
      <summary>YUV420</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Yuv422">
      <summary>YUV422</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Yuv422ROT">
      <summary>YUV422 Rotated</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Yuv444">
      <summary>YUV444</summary>
    </member>
    <member name="F:Lumia.Imaging.ColorSpace.Yuv400">
      <summary>YUV400 (Grayscale)</summary>
    </member>
    <member name="T:Lumia.Imaging.DiagnosticsReport">
      <summary>A report containing diagnostic properties from Lumia.Imaging.</summary>
    </member>
    <member name="M:Lumia.Imaging.DiagnosticsReport.BeginProbe(Lumia.Imaging.IImageProvider)">
      <summary>Start a probing session for an object.</summary>
      <param name="imageProvider">The image provider.</param>
    </member>
    <member name="M:Lumia.Imaging.DiagnosticsReport.CreateAsync">
      <summary>Create a diagnostics report.</summary>
      <returns>An asynchronous result with the report.</returns>
    </member>
    <member name="M:Lumia.Imaging.DiagnosticsReport.EndProbeAsync(Lumia.Imaging.IImageProvider)">
      <summary>End the probing session for an object, and create a report.</summary>
      <param name="imageProvider">The image provider.</param>
      <returns>An asynchronous result with the report.</returns>
    </member>
    <member name="P:Lumia.Imaging.DiagnosticsReport.Properties">
      <summary>The diagnostic properties.</summary>
    </member>
    <member name="P:Lumia.Imaging.DiagnosticsReport.Text">
      <summary>A textual representation of the diagnostic properties.</summary>
    </member>
    <member name="T:Lumia.Imaging.EllipseRadius">
      <summary>
Defines the radius of the ellipse by defining its radius in x and y dimension.
</summary>
    </member>
    <member name="M:Lumia.Imaging.EllipseRadius.#ctor(System.Double,System.Double)">
      <summary>
Creates and initializes a new ellipse radius.
</summary>
      <param name="x">
The ellipse's radius along the x-axis.
</param>
      <param name="y">
The ellipse's radius along the y-axis.
</param>
    </member>
    <member name="P:Lumia.Imaging.EllipseRadius.X">
      <summary>
The ellipse's radius along the x-axis.
</summary>
    </member>
    <member name="P:Lumia.Imaging.EllipseRadius.Y">
      <summary>
The ellipse's radius along the y-axis.
</summary>
    </member>
    <member name="T:Lumia.Imaging.FilterEffect">
      <summary>
Applies filters of type IFilter to the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.#ctor">
      <summary>
Creates and initializes a new filter effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new filter effect with an image source.
</summary>
      <param name="imageSource">
The image provider that will be used as source.
</param>
    </member>
    <member name="P:Lumia.Imaging.FilterEffect.Filters">
      <summary>
Sets the filters that will be applied to the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.FilterEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.FilterEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.GifRenderer">
      <summary>
Renders an image source as a GIF image, or a list of image sources as an animated GIF image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.GifRenderer.#ctor">
      <summary>
Creates and initializes a new gif renderer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.GifRenderer.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new gif renderer with the specified image sources.
</summary>
      <param name="imageSource">The image source that will be rendered as a GIF.</param>
    </member>
    <member name="M:Lumia.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView{Lumia.Imaging.IImageProvider})">
      <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
      <param name="imageSources">The image sources that will be rendered as an animation.
<para>If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para><para>See <see cref="P:Lumia.Imaging.GifRenderer.Sources" /> for information on fine control over individual frames and how to create longer animations.</para></param>
    </member>
    <member name="M:Lumia.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView{Lumia.Imaging.IImageProvider},System.Int32,System.Int32)">
      <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
      <param name="imageSources">The image sources that will be rendered as an animation.
<para>If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para><para>See <see cref="P:Lumia.Imaging.GifRenderer.Sources" /> for information on fine control over individual frames and how to create longer animations.</para></param>
      <param name="duration">The that each frame will be displayed, in milliseconds.</param>
      <param name="numberOfAnimationLoops">The number of loops the animation should run. Setting this to zero causes the animation to loop infinitely.</param>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.ApplyDithering">
      <summary>
Controls whether or not the frames in this image will be dithered.
</summary>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.Duration">
      <summary>
The duration each frame is displayed, in milliseconds.
</summary>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.NumberOfAnimationLoops">
      <summary>
The number of times the animation should loop.
</summary>
    </member>
    <member name="M:Lumia.Imaging.GifRenderer.RenderAsync">
      <summary>
Renders the source(s) to a GIF image using the current settings.
</summary>
      <returns>An asynchronous operation which yields an IBuffer with the GIF image.</returns>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.Size">
      <summary>
The output size to use. Width and height must be even. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source when rendering a single frame GIF image.
<para>If render size is not set, width and height of the image must be even, or the render operation will throw an exception.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.Sources">
      <summary>
A sequence of <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as the frames for an animated GIF image.
<para>If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.GifRenderer.UseGlobalPalette">
      <summary>
Controls whether a global palette will be used or a new palette will be created for each frame.
</summary>
    </member>
    <member name="T:Lumia.Imaging.GradientImageSource">
      <summary>
An image source that generates pixels based on a gradient.
</summary>
    </member>
    <member name="M:Lumia.Imaging.GradientImageSource.#ctor(Windows.Foundation.Size,Lumia.Imaging.IGradient)">
      <summary>
Creates an image source from a gradient.
</summary>
      <param name="size">The inherent size of the image.</param>
      <param name="gradient">The gradient to use when generating the image.</param>
    </member>
    <member name="P:Lumia.Imaging.GradientImageSource.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="M:Lumia.Imaging.GradientImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.GradientImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.GradientImageSource.Gradient">
      <summary>
The gradient to use when generating the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.GradientImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.GradientImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.GradientImageSource.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.GradientStop">
      <summary>Represents a stop in a gradient.</summary>
    </member>
    <member name="F:Lumia.Imaging.GradientStop.Color">
      <summary>The color for this stop.</summary>
    </member>
    <member name="F:Lumia.Imaging.GradientStop.Offset">
      <summary>The offset for this stop.</summary>
    </member>
    <member name="T:Lumia.Imaging.IActiveFrame">
      <summary>An interface for getting or setting the active frame of an image provider.</summary>
    </member>
    <member name="P:Lumia.Imaging.IActiveFrame.FrameIndex">
      <summary>The index of the currently active frame.</summary>
    </member>
    <member name="T:Lumia.Imaging.IBufferProvider">
      <summary>
Represents an object that can provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> asynchronously.
</summary>
    </member>
    <member name="M:Lumia.Imaging.IBufferProvider.GetAsync">
      <summary>Get the <see cref="T:Windows.Storage.Streams.IBuffer" />.</summary>
      <returns>An async operation resulting in the <see cref="T:Windows.Storage.Streams.IBuffer" />.</returns>
    </member>
    <member name="T:Lumia.Imaging.IFilter">
      <summary>
An image filter for use with an IFilterEffect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.IFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.IFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.IFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.IFilterEffect">
      <summary>
Applies filters of type IFilter to an image.
</summary>
    </member>
    <member name="P:Lumia.Imaging.IFilterEffect.Filters">
      <summary>
Sets the filters that will be applied to the image.
</summary>
    </member>
    <member name="T:Lumia.Imaging.IGradient">
      <summary>A gradient.</summary>
    </member>
    <member name="P:Lumia.Imaging.IGradient.Stops">
      <summary>List of <see cref="T:Lumia.Imaging.GradientStop" /> defining the color changes within the gradient.</summary>
    </member>
    <member name="T:Lumia.Imaging.IImageConsumer">
      <summary>
A consumer of images.
</summary>
    </member>
    <member name="P:Lumia.Imaging.IImageConsumer.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.IImageProvider">
      <summary>
A provider of images.
</summary>
    </member>
    <member name="M:Lumia.Imaging.IImageProvider.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.IImageProvider.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.IImageProvider.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.IImageProvider.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="T:Lumia.Imaging.IImageSize">
      <summary>An interface for querying image size directly, with optional support for also changing it.</summary>
    </member>
    <member name="P:Lumia.Imaging.IImageSize.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="P:Lumia.Imaging.IImageSize.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.ImageFormat">
      <summary>
Supported image formats.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Undefined">
      <summary>
The image format is undefined (or should be auto-detected).
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Jpeg">
      <summary>
The image is in JPEG format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Png">
      <summary>
The image is in PNG format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Gif">
      <summary>
The image is in GIF format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Bmp">
      <summary>
The image is in BMP format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Wbmp">
      <summary>
The image is in WBMP format.
</summary>
    </member>
    <member name="F:Lumia.Imaging.ImageFormat.Tiff">
      <summary>
The image is in TIFF format.
</summary>
    </member>
    <member name="T:Lumia.Imaging.ImageProviderInfo">
      <summary>
Information about an IImageProvider.
</summary>
    </member>
    <member name="M:Lumia.Imaging.ImageProviderInfo.#ctor">
      <summary>
Creates and initializes a new ImageProviderInfo object with default values.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ImageProviderInfo.FrameCount">
      <summary>
Number of frames in the image provided.
</summary>
    </member>
    <member name="P:Lumia.Imaging.ImageProviderInfo.ImageSize">
      <summary>
Size of the image provided, in pixels.
</summary>
    </member>
    <member name="T:Lumia.Imaging.IReadableBitmap">
      <summary>
A readable bitmap.
</summary>
    </member>
    <member name="P:Lumia.Imaging.IReadableBitmap.ColorMode">
      <summary>
The color mode of the bitmap.
</summary>
    </member>
    <member name="P:Lumia.Imaging.IReadableBitmap.Dimensions">
      <summary>
The dimensions of the bitmap.
</summary>
    </member>
    <member name="T:Lumia.Imaging.IReadableBitmapProvider">
      <summary>
Represents an object that can provide an <see cref="T:Lumia.Imaging.IReadableBitmap" /> asynchronously.
</summary>
    </member>
    <member name="M:Lumia.Imaging.IReadableBitmapProvider.GetAsync">
      <summary>Get the <see cref="T:Lumia.Imaging.IReadableBitmap" />.</summary>
      <returns>An async operation resulting in the <see cref="T:Lumia.Imaging.IReadableBitmap" />.</returns>
    </member>
    <member name="T:Lumia.Imaging.JpegOperation">
      <summary>
The types of operation supported by JpegTools::FlipAndRotateAsync.
</summary>
    </member>
    <member name="F:Lumia.Imaging.JpegOperation.Lossless">
      <summary>
Only lossless operations allowed.
</summary>
    </member>
    <member name="F:Lumia.Imaging.JpegOperation.AllowLossy">
      <summary>
Allow falling back on lossy operations when lossless is not available.
</summary>
    </member>
    <member name="T:Lumia.Imaging.JpegOutputColorMode">
      <summary>
Color mode for JPEG output image.
</summary>
    </member>
    <member name="F:Lumia.Imaging.JpegOutputColorMode.Yuv420">
      <summary>YUV420</summary>
    </member>
    <member name="F:Lumia.Imaging.JpegOutputColorMode.Yuv422">
      <summary>YUV422</summary>
    </member>
    <member name="F:Lumia.Imaging.JpegOutputColorMode.Grayscale">
      <summary>Grayscale (YUV400)</summary>
    </member>
    <member name="T:Lumia.Imaging.JpegRenderer">
      <summary>
Renders an image source to JPEG buffer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.JpegRenderer.#ctor">
      <summary>
Creates and initializes a new JPEG renderer.
</summary>
    </member>
    <member name="M:Lumia.Imaging.JpegRenderer.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new JPEG renderer, with the source already specified.
</summary>
      <param name="source">The <see cref="T:Lumia.Imaging.IImageProvider" /> that will provide the image to be rendered.</param>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.OutputColorMode">
      <summary>
Color mode to use in the JPEG image.
</summary>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.OutputOption">
      <summary>
Specifies how to handle an aspect ratio difference between the source and the JPEG image.
</summary>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.Quality">
      <summary>
        <para>Quality of the JPEG image. </para>
        <para>Range (0.0, 1.0].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.RemoveExif">
      <summary>
If true, the JPEG image will have any EXIF metadata removed.
</summary>
    </member>
    <member name="M:Lumia.Imaging.JpegRenderer.RenderAsync">
      <summary>
Renders the source to a JPEG image, according to the current settings.
</summary>
      <returns>An asynchronous operation which yields an IBuffer with the JPEG file.</returns>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.Size">
      <summary>
Size of the JPEG image, in pixels.
</summary>
    </member>
    <member name="P:Lumia.Imaging.JpegRenderer.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.JpegTools">
      <summary>
Operations on JPEG images. The operations are done on the JPEG compressed data directly, which is efficient and can avoid quality reduction.
</summary>
    </member>
    <member name="M:Lumia.Imaging.JpegTools.AutoResizeAsync(Windows.Storage.Streams.IBuffer,Lumia.Imaging.AutoResizeConfiguration)">
      <summary>
JPEG squeeze of an image into a new smaller JPEG 
using configured auto resize parameters.
</summary>
      <param name="jpegSource">
Source JPEG buffer to be squeezed.
</param>
      <param name="autoConfiguration">
Resize configuration parameters.
</param>
      <returns> Asynchronously returns buffer with squeezed JPEG</returns>
    </member>
    <member name="M:Lumia.Imaging.JpegTools.BlendAsync(Windows.Storage.Streams.IBuffer,Lumia.Imaging.IReadableBitmap,Windows.Foundation.Point)">
      <summary>
Blends a JPEG image with another bitmap image into a new JPEG.
The source JPEG image dimensions cannot be smaller than 
the dimensions of the bitmap image to blend. 
</summary>
      <param name="jpegSource">
Source JPEG to be blended.
</param>
      <param name="bitmapSource">
Bitmap image to be blended with JPEG image. Image must be in ARGB8888 or AYUV4444 color mode.
</param>
      <param name="blendPosition">
Blend start position in the JPEG image (upper left corner).
</param>
      <returns> Asynchroniously returns buffer with blended JPEG</returns>
    </member>
    <member name="M:Lumia.Imaging.JpegTools.FlipAndRotateAsync(Windows.Storage.Streams.IBuffer,Lumia.Imaging.Transforms.FlipMode,Lumia.Imaging.Rotation,Lumia.Imaging.JpegOperation)">
      <summary>
Performs a lossless flip followed by a rotation of a JPEG image into a new JPEG. Optionally falls back on a lossy operation if lossless cannot be performed.
</summary>
      <param name="jpegSource">
Source JPEG to be rotated.
</param>
      <param name="flipMode">
Specifies if and how the image should be flipped.
</param>
      <param name="rotation">
Specifies if and how the image should be rotated.
</param>
      <param name="jpegOperation">
Specifies if only lossless operations are permitted, or if a fallback on lossy operations should be used when needed.
</param>
      <returns>Asynchroniously returns buffer with rotated JPEG</returns>
    </member>
    <member name="M:Lumia.Imaging.JpegTools.SqueezeAsync(Windows.Storage.Streams.IBuffer,System.UInt32)">
      <summary>
JPEG squeeze of an image into a new smaller JPEG  
with a desired maximum buffer size in bytes.
</summary>
      <param name="jpegSource">
Source JPEG buffer to be squeezed.
</param>
      <param name="toSize">
Desired maximum output JPEG size.
</param>
      <returns> Asynchronously returns buffer with squeezed JPEG</returns>
    </member>
    <member name="T:Lumia.Imaging.LinearGradient">
      <summary>A linear gradient.</summary>
    </member>
    <member name="M:Lumia.Imaging.LinearGradient.#ctor">
      <summary>Creates and initializes a new linear gradient with default values.</summary>
    </member>
    <member name="M:Lumia.Imaging.LinearGradient.#ctor(Windows.Foundation.Point,Windows.Foundation.Point)">
      <summary>Creates and initializes a new linear gradient, using the specified start point and end point.</summary>
      <param name="startPoint">The start point of the gradient.</param>
      <param name="endPoint">The end point of the gradient.</param>
    </member>
    <member name="M:Lumia.Imaging.LinearGradient.#ctor(Windows.Foundation.Point,Windows.Foundation.Point,Lumia.Imaging.GradientStop[])">
      <summary>Creates and initializes a new linear gradient, using the specified start point, end point, and stops.</summary>
      <param name="startPoint">The start point of the gradient.</param>
      <param name="endPoint">The end point of the gradient.</param>
      <param name="stops">The stops that define the gradient.</param>
    </member>
    <member name="P:Lumia.Imaging.LinearGradient.EndPoint">
      <summary>The end point of the gradient, where a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 1 would be.</summary>
    </member>
    <member name="P:Lumia.Imaging.LinearGradient.StartPoint">
      <summary>The start point of the gradient, where a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 0 would be.</summary>
    </member>
    <member name="P:Lumia.Imaging.LinearGradient.Stops">
      <summary>List of <see cref="T:Lumia.Imaging.GradientStop" /> defining the color changes within the gradient.</summary>
    </member>
    <member name="T:Lumia.Imaging.Margins">
      <summary>The margins on each side of a rectangular object.</summary>
    </member>
    <member name="F:Lumia.Imaging.Margins.Bottom">
      <summary>The thickness of the bottom margin.</summary>
    </member>
    <member name="F:Lumia.Imaging.Margins.Left">
      <summary>The thickness of the left margin.</summary>
    </member>
    <member name="F:Lumia.Imaging.Margins.Right">
      <summary>The thickness of the right margin.</summary>
    </member>
    <member name="F:Lumia.Imaging.Margins.Top">
      <summary>The thickness of the top margin.</summary>
    </member>
    <member name="T:Lumia.Imaging.MaskAnnotationType">
      <summary>
Determines how the InteractiveSegmentationMaskRectifier uses the annotations.
</summary>
    </member>
    <member name="F:Lumia.Imaging.MaskAnnotationType.Foreground">
      <summary>
The annotations represent a part of the foreground.
</summary>
    </member>
    <member name="F:Lumia.Imaging.MaskAnnotationType.Background">
      <summary>
The annotations represent a part of the background.
</summary>
    </member>
    <member name="T:Lumia.Imaging.OutputOption">
      <summary>
Behavior when rendering to a target with different aspect ratio than the source.
</summary>
    </member>
    <member name="F:Lumia.Imaging.OutputOption.PreserveAspectRatio">
      <summary>
Preserve the aspect ration of the input image. Excess areas will be black.
</summary>
    </member>
    <member name="F:Lumia.Imaging.OutputOption.Stretch">
      <summary>
Stretch the input image to fit the output size.
</summary>
    </member>
    <member name="F:Lumia.Imaging.OutputOption.PreserveSize">
      <summary>
Preserve the size of the input image by adjusting the output size.
This option is not supported by renderers.
</summary>
    </member>
    <member name="T:Lumia.Imaging.PixelBufferInfo">
      <summary>Describes a buffer containing two-dimensional pixel data.</summary>
    </member>
    <member name="P:Lumia.Imaging.PixelBufferInfo.Buffer">
      <summary>A buffer containing the pixel data.</summary>
    </member>
    <member name="P:Lumia.Imaging.PixelBufferInfo.ColorMode">
      <summary>The color mode of the pixel data.</summary>
    </member>
    <member name="P:Lumia.Imaging.PixelBufferInfo.Pitch">
      <summary>Distance, in bytes, between consecutive rows in the buffer.</summary>
    </member>
    <member name="T:Lumia.Imaging.RadialGradient">
      <summary>A radial gradient, changing color from a center point outwards.</summary>
    </member>
    <member name="M:Lumia.Imaging.RadialGradient.#ctor">
      <summary>Creates and initializes a new radial gradient with default values.</summary>
    </member>
    <member name="M:Lumia.Imaging.RadialGradient.#ctor(Windows.Foundation.Point,Lumia.Imaging.EllipseRadius)">
      <summary>Creates and initializes a new radial gradient, with the specified center point and radius.</summary>
      <param name="centerPoint">The center point of the gradient, to which a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></param>
      <param name="radius">The radius of the gradient. This is the distance from <see cref="P:Lumia.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle specify value for only one dimension and set the other one to 0.</para></param>
    </member>
    <member name="M:Lumia.Imaging.RadialGradient.#ctor(Windows.Foundation.Point,Lumia.Imaging.EllipseRadius,Lumia.Imaging.GradientStop[])">
      <summary>Creates and initializes a new radial gradient, with the specified center point, radius, and stops.</summary>
      <param name="centerPoint">The center point of the gradient, to which a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></param>
      <param name="radius">The radius of the gradient. This is the distance from <see cref="P:Lumia.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle, specify a value for only one dimension and set the other to 0.</para></param>
      <param name="stops">The stops that define the gradient.</param>
    </member>
    <member name="P:Lumia.Imaging.RadialGradient.CenterPoint">
      <summary>
The center point of the gradient, to which a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></summary>
    </member>
    <member name="P:Lumia.Imaging.RadialGradient.EllipseRadius">
      <summary>
The radius of the gradient. This is the distance from <see cref="P:Lumia.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Lumia.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle, specify a value for only one dimension and set the other to 0.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.RadialGradient.Stops">
      <summary>List of <see cref="T:Lumia.Imaging.GradientStop" /> defining the color changes within the gradient.</summary>
    </member>
    <member name="T:Lumia.Imaging.RampedRange">
      <summary>
Specifies a ramped range that allows configuring soft fade-in and fade-outs.
</summary>
    </member>
    <member name="F:Lumia.Imaging.RampedRange.BeginRamp">
      <summary>
Specifies where ramping towards the sustained value begins.
</summary>
    </member>
    <member name="F:Lumia.Imaging.RampedRange.BeginSustain">
      <summary>
Specifies where ramping towards the sustained value ends.
</summary>
    </member>
    <member name="F:Lumia.Imaging.RampedRange.EndRamp">
      <summary>
Specifies where ramping from the sustained value ends.
</summary>
    </member>
    <member name="F:Lumia.Imaging.RampedRange.EndSustain">
      <summary>
Specifies where ramping from the sustained value begins.
</summary>
    </member>
    <member name="T:Lumia.Imaging.RandomAccessStreamImageSource">
      <summary>
An image source created from a windows storage random access stream.
</summary>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.#ctor(Windows.Storage.Streams.IRandomAccessStream)">
      <summary>
Creates and initializes a new image source with a <see cref="T:Windows.Storage.Streams.IRandomAccessStream" />.
</summary>
      <param name="stream">The random access stream to create the image source with.</param>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.#ctor(Windows.Storage.Streams.IRandomAccessStream,Lumia.Imaging.ImageFormat)">
      <summary>
Creates and initializes a new image source with a windows storage random access stream with a known image format.
</summary>
      <param name="stream">The random access stream to create the image source with.</param>
      <param name="imageFormat">The image format of the image in the provided stream.</param>
    </member>
    <member name="P:Lumia.Imaging.RandomAccessStreamImageSource.FrameIndex">
      <summary>The index of the currently active frame.</summary>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.RandomAccessStreamImageSource.ImageFormat">
      <summary>
The format of the compressed image data.
</summary>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.RandomAccessStreamImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.RandomAccessStreamImageSource.Stream">
      <summary>
The random access stream containing compressed image data.
</summary>
    </member>
    <member name="T:Lumia.Imaging.RenderRequest">
      <summary>
Represents a user-initiated rendering request. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.RenderRequest.#ctor">
      <summary>Creates and initializes a new RenderRequest.</summary>
    </member>
    <member name="T:Lumia.Imaging.Rotation">
      <summary>
Stepwise rotation. Can be done 0, 90, 180, and 270 degrees clockwise.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Rotation.Rotate0">
      <summary>Rotates the image zero degrees clockwise.</summary>
    </member>
    <member name="F:Lumia.Imaging.Rotation.Rotate90">
      <summary>Rotates the image 90 degrees clockwise.</summary>
    </member>
    <member name="F:Lumia.Imaging.Rotation.Rotate180">
      <summary>Rotates the image 180 degrees clockwise.</summary>
    </member>
    <member name="F:Lumia.Imaging.Rotation.Rotate270">
      <summary>Rotates the image 270 degrees clockwise.</summary>
    </member>
    <member name="T:Lumia.Imaging.SdkInfo">
      <summary>
Provides general information about the Imaging SDK.
</summary>
    </member>
    <member name="P:Lumia.Imaging.SdkInfo.Version">
      <summary>
The current version of the Imaging SDK.
</summary>
    </member>
    <member name="T:Lumia.Imaging.StorageFileImageSource">
      <summary>
An image source created with a windows storage file.
</summary>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.#ctor(Windows.Storage.IStorageFile)">
      <summary>
Creates and initializes a new image source with a storage file.
</summary>
      <param name="storageFile">The storage file that will provide the image data.</param>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.#ctor(Windows.Storage.IStorageFile,Lumia.Imaging.ImageFormat)">
      <summary>
Creates and initializes a new image source with a storage file with a known image format.
</summary>
      <param name="storageFile">The storage file that will provide the image data.</param>
      <param name="imageFormat">The image format of the image in the provided storage file.</param>
    </member>
    <member name="P:Lumia.Imaging.StorageFileImageSource.FrameIndex">
      <summary>The index of the currently active frame.</summary>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.StorageFileImageSource.ImageFormat">
      <summary>
The format of the compressed image data.
</summary>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.StorageFileImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.StorageFileImageSource.StorageFile">
      <summary>
The storage file containing compressed image data.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Version">
      <summary>
Represents a version number.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Version.#ctor">
      <summary>
Creates a new Version object.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
Creates a new Version object.
</summary>
      <param name="major">
The value of the major component of the version number.
</param>
      <param name="minor">
The value of the minor component of the version number.
</param>
      <param name="build">
The value of the build component of the version number.
</param>
      <param name="revision">
The value of the revision component of the version number.
</param>
    </member>
    <member name="M:Lumia.Imaging.Version.#ctor(System.String)">
      <summary>
Creates a new Version object.
</summary>
      <param name="version">
A version string in the form of "Major.Minor.Build.Revision".
</param>
    </member>
    <member name="P:Lumia.Imaging.Version.Build">
      <summary>
Gets the value of the build component of the version number for the current Version object.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Version.Major">
      <summary>
Gets the value of the major component of the version number for the current Version object.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Version.Minor">
      <summary>
Gets the value of the minor component of the version number for the current Version object.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Version.Revision">
      <summary>
Gets the value of the revision component of the version number for the current Version object.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Version.ToLongVersionString">
      <summary>
Gets the value of the major component of the version number for the current Version object.
</summary>
      <returns>A long string representation of the version number.</returns>
    </member>
    <member name="M:Lumia.Imaging.Version.ToShortVersionString">
      <summary>
Converts the value of the current Version object to its equivalent short version string representation.
</summary>
      <returns>A short string representation of the version number.</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ArgbColorCurves">
      <summary>
A collection of four Curve objects, one per ARGB channel.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ArgbColorCurves.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lumia.Imaging.Adjustments.ArgbColorCurves</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ArgbColorCurves.Alpha">
      <summary>
The Alpha component of the ARGB collection.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ArgbColorCurves.Blue">
      <summary>
The Blue component of the ARGB collection.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ArgbColorCurves.Green">
      <summary>
The Green component of the ARGB collection.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ArgbColorCurves.Red">
      <summary>
The Red component of the ARGB collection.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.AutoEnhanceFilter">
      <summary>
Automatically enhances white balance, brightness and contrast, and/or applies local boost to the image.<br /><img src="..\Images\AutoEnhanceFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.#ctor">
      <summary>
Creates a new AutoEnhanceFilter with disabled white balance and with automatic local boost, contrast, and brightness enabled.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean)">
      <summary>
Creates a new AutoEnhanceFilter with disabled white balance and settings for local boost. 
</summary>
      <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
      <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
      <param name="isWhiteBalanceEnhancementEnabled">
Enables or disables white balance enhancement.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean,Windows.UI.Color)">
      <summary>
Creates a new AutoEnhanceFilter with automatic white balance and settings for contrast and brightness, local boost, and target white point.
</summary>
      <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
      <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
      <param name="isWhiteBalanceEnhancementEnabled">
Enables or disables white balance enhancement.
</param>
      <param name="targetWhitePoint">
The target white point.
<para>The alpha component of the color is not used.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean,Windows.UI.Color,Windows.UI.Color)">
      <summary>
Creates a new AutoEnhanceFilter with manual white balance and settings for contrast and brightness, local boost, and source and target white points.
</summary>
      <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
      <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
      <param name="targetWhitePoint">
The target white point.
<para>The alpha component of the color is not used.</para></param>
      <param name="sourceWhitePoint">
The source white point.
<para>The alpha component of the color is not used.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoEnhanceFilter.IsContrastAndBrightnessEnhancementEnabled">
      <summary>
Enables or disables automatic enhancement of contrast and brightness.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoEnhanceFilter.IsLocalBoostEnhancementEnabled">
      <summary>
Enables or disables automatic local boost.
<remarks>
When enabled, the filter automatically adjusts 
gamma correction and contrast locally to enhance an image with uneven illumination.
</remarks></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoEnhanceFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoEnhanceFilter.SourceWhitePoint">
      <summary>
The desired source white point. The luminance of the provided 
color is ignored, only the chrominance information is used.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoEnhanceFilter.TargetWhitePoint">
      <summary>
The desired target white point. The luminance of the provided 
color is ignored, only the chrominance information is used.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoEnhanceFilter.WhiteBalanceMode">
      <summary>
Sets the white balance mode to use.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.AutoFixAnalyzer">
      <summary>
Analyzes an image and produces parameters for the  <see cref="T:Lumia.Imaging.Adjustments.SaturationLightnessFilter" /> and the <see cref="T:Lumia.Imaging.Adjustments.TemperatureAndTintFilter" /> which, when applied, will improve the visual quality of the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoFixAnalyzer.#ctor">
      <summary>
Creates and initializes a new AutoFixAnalyzer with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoFixAnalyzer.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new AutoFixAnalyzer with the specified source and default quality.
</summary>
      <param name="source">
The image provider that will be analyzed.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoFixAnalyzer.#ctor(Lumia.Imaging.IImageProvider,System.Double)">
      <summary>
Creates and initializes a new AutoFixAnalyzer with the specified source and quality.
</summary>
      <param name="source">
The image provider that will be analyzed.
</param>
      <param name="quality">
        <para>The quality of the result.</para>
        <para>Changing quality affects the time taken to do the analysis by adjusting the working size of the algorithm.</para>
      </param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoFixAnalyzer.AnalyzeAsync">
      <summary>
Gets the recommended parameters for improving the image.
</summary>
      <returns>
An instance of <see ref="Adjustments::AutoFixAnalyzerResult" /> that contains the recommended parameters.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzer.Quality">
      <summary>
        <para>The quality of the result.</para>
        <para>Changing quality affects the time taken to do the analysis by adjusting the working size of the algorithm.</para>
        <para>Range [0.0, 1.0]. Default value is 0.5.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzer.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.AutoFixAnalyzerResult">
      <summary>
A collection of parameters resulting from AutoFixAnalysis.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzerResult.LightnessCurve">
      <summary>
An instance of a <see cref="T:Lumia.Imaging.Adjustments.Curve" /> that can be used to improve the image using the <see cref="T:Lumia.Imaging.Adjustments.SaturationLightnessFilter" />.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzerResult.SaturationCurve">
      <summary>
An instance of a <see cref="T:Lumia.Imaging.Adjustments.Curve" /> that can be used to improve the image using the <see cref="T:Lumia.Imaging.Adjustments.SaturationLightnessFilter" />.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzerResult.TemperatureParameter">
      <summary>
A value that can be used to improve the image using the <see cref="T:Lumia.Imaging.Adjustments.TemperatureAndTintFilter" />.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.AutoFixAnalyzerResult.TintParameter">
      <summary>
A value that can be used to improve the image using the <see cref="T:Lumia.Imaging.Adjustments.TemperatureAndTintFilter" />.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.AutoLevelsFilter">
      <summary>
Balances the intensity level of the image, for
example making dark images lighter and vice versa. <br /><img src="..\Images\AutoLevelsFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoLevelsFilter.#ctor">
      <summary>
Creates and initializes a new AutoLevelsFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoLevelsFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoLevelsFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.AutoLevelsFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.BlurFilter">
      <summary>
Applies a blur effect to the image.<br /><img src="..\Images\BlurFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.#ctor">
      <summary>
Creates and initializes a new BlurFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.#ctor(System.Int32)">
      <summary>
Creates and initializes a new BlurFilter with a specific level and default region.
</summary>
      <param name="kernelSize">
The kernel size in pixels.
<para>Range [1, 256]. Larger kernel size results in more blur.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.#ctor(System.Int32,Windows.Foundation.Rect,Lumia.Imaging.Adjustments.BlurRegionShape)">
      <summary>
Creates and initializes a new BlurFilter with a specific level and region.
</summary>
      <param name="kernelSize">
The kernel size in pixels.
<para>Range [1, 256]. Larger kernel size results in more blur.</para></param>
      <param name="region">
The region to blur within the image. 
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></param>
      <param name="regionShape">
The region shape of the blur effect.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.BlurFilter.BlurRegionShape">
      <summary>
The region shape of the blur effect.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.BlurFilter.KernelSize">
      <summary>
        <para>The kernel size in pixels. Larger kernel size results in more blur.</para>
        <para>Range [1, 256]. Default is 1.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BlurFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.BlurFilter.Region">
      <summary>
The region to blur within the image.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.BlurRegionShape">
      <summary>
Describes how the blur region is interpreted by the blur filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.BlurRegionShape.Rectangular">
      <summary>The region is a rectangle.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.BlurRegionShape.Elliptical">
      <summary>The region is an ellipse fitted into a rectangle.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.BrightnessFilter">
      <summary>
Adjusts the brightness in the image.<br /><img src="..\Images\BrightnessFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BrightnessFilter.#ctor">
      <summary>
Creates and initializes a new BrightnessFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BrightnessFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new BrightnessFilter with a brightness level.
</summary>
      <param name="level">
        <para>The brightness level.</para>
        <para>Range [-1.0, 1.0], where 0.0 results in no adjustment.</para>
      </param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BrightnessFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.BrightnessFilter.Level">
      <summary>
        <para>Image brightness level.</para>
        <para>Range [-1.0, 1.0], where 0.0 results in no adjustment.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BrightnessFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.BrightnessFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ColorAdjustFilter">
      <summary>
Adjusts the RGB color composition of the image.<br /><img src="..\Images\ColorAdjustFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorAdjustFilter.#ctor">
      <summary>
Creates and initializes a new ColorAdjustFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorAdjustFilter.#ctor(System.Double,System.Double,System.Double)">
      <summary>
Creates and initializes a new ColorAdjustFilter with specified channel adjustment values.
</summary>
      <param name="red">
Red channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
      <param name="green">
Green channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
      <param name="blue">
Blue channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorAdjustFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorAdjustFilter.Blue">
      <summary>
        <para>Blue channel adjustment.</para>
        <para>Range [-1.0, 1.0].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorAdjustFilter.Green">
      <summary>
        <para>Green channel adjustment.</para>
        <para>Range [-1.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorAdjustFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorAdjustFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorAdjustFilter.Red">
      <summary>
        <para>Red channel adjustment.</para>
        <para>Range [-1.0, 1.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ColorBoostFilter">
      <summary>
Amplifies the colors of the image.<br /><img src="..\Images\ColorBoostFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorBoostFilter.#ctor">
      <summary>
Creates and initializes a new ColorBoostFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorBoostFilter.#ctor(System.Double)">
      <summary>
Creates a new ColorBoostFilter with the specified gain level.
</summary>
      <param name="gain">
The color boost gain level.
<para>Range [-1.0, 20.0]. Negative values reduce the colors.</para><para>Recommended values are in the range [-1.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorBoostFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorBoostFilter.Gain">
      <summary>
        <para>The color boost gain level.</para>
        <para>Range [-1.0, 20.0]. Negative values reduce the colors.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorBoostFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorBoostFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ColorizationFilter">
      <summary>
Adjusts color tone and luminance/chrominance levels, 
adds a single color to an image.<br /><img src="..\Images\ColorizationFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorizationFilter.#ctor">
      <summary>
Creates and initializes a new ColorizationFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorizationFilter.#ctor(Windows.UI.Color,System.Double,System.Double)">
      <summary>
Creates and initializes a new ColorizationFilter with the specified values.
</summary>
      <param name="color">
The reference color.
<para>The alpha-component is ignored.</para></param>
      <param name="luminance">
The luminance adjustment.
<para>Range: [-1.0, 2.0]. </para></param>
      <param name="chrominance">
The chrominance adjustment.
<para>Range: [-1.0, 2.0]. </para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorizationFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorizationFilter.Chrominance">
      <summary>
        <para>Strength of chrominance adjustment. </para>
        <para>Range: [-1.0, 2.0].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorizationFilter.Color">
      <summary>
The reference color. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorizationFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ColorizationFilter.Luminance">
      <summary>
        <para>Strength of luminance adjustment.</para>
        <para>Range: [-1.0, 2.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ColorizationFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ContrastFilter">
      <summary>
Adjusts the contrast in the image.<br /><img src="..\Images\ContrastFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ContrastFilter.#ctor">
      <summary>
Creates and initializes a new ContrastFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ContrastFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new ContrastFilter with a contrast level.
</summary>
      <param name="contrastLevel">
The contrast level.
<para>Range [-1.0, 1.0], where values below zero decrease contrast and above zero increase it.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ContrastFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ContrastFilter.Level">
      <summary>
        <para>Contrast level. </para>
        <para>Range [-1.0, 1.0], where values below zero decrease the contrast and above zero increase it.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ContrastFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ContrastFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.Curve">
      <summary>
A curve, either specified as a list of values or by interpolation between control points.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.#ctor">
      <summary>
Creates and initializes a new curve with linear interpolation.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.#ctor(Lumia.Imaging.Adjustments.CurveInterpolation)">
      <summary>
Creates and initializes a new curve with the specified interpolation mode.
</summary>
      <param name="curveInterpolation">
The mode of interpolation between points.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.#ctor(Lumia.Imaging.Adjustments.CurveInterpolation,Windows.Foundation.Point[])">
      <summary>
Creates and initializes a new curve with the specified interpolation mode and control points.
</summary>
      <param name="curveInterpolation">
The mode of interpolation between points.
</param>
      <param name="points">
An array of control points.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Add(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Adds two curves.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <returns>
A new resulting curve, where result(x) = curve1(x) + curve2(x).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Add(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Adds two curves and stores the result in a new or existing curve.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) + curve2(x).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Add(Lumia.Imaging.Adjustments.Curve,System.Int32)">
      <summary>
Adds a signed scalar value to a curve.
</summary>
      <param name="curve">
The curve operand.
</param>
      <param name="scalar">
The scalar operand.
</param>
      <returns>
A new resulting curve, where result(x) = curve(x) + scalar.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Add(Lumia.Imaging.Adjustments.Curve,System.Int32,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Adds a signed scalar value to a curve and stores the result in a new or existing curve.
</summary>
      <param name="curve">
The curve operand.
</param>
      <param name="scalar">
The scalar operand.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve(x) + scalar.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Clamp(Lumia.Imaging.Adjustments.Curve,System.Int32,System.Int32)">
      <summary>
Clamps the y-values of the curve to the interval (min, max). 
</summary>
      <param name="curve">
The curve to reflect.
</param>
      <param name="min">
The min y-value
</param>
      <param name="max">
The max y-value
</param>
      <returns>
The resulting curve, where min &lt;= result(x) &lt;= max
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Clamp(Lumia.Imaging.Adjustments.Curve,System.Int32,System.Int32,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Clamps the y-values of the curve to the interval (min, max). 
</summary>
      <param name="curve">
The curve to reflect.
</param>
      <param name="min">
The min y-value
</param>
      <param name="max">
The max y-value
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where min &lt;= result(x) &lt;= max
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Clear">
      <summary>
Clears all control points and values to defaults.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.CombineIntervals(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Int32)">
      <summary>
Combines two curves into a new curve by selecting points in one interval from the corresponding interval in one input curve, and the remaining points from the other curve.
</summary>
      <param name="curve1">
The first curve to select points from.
</param>
      <param name="curve2">
The second curve to select points from
</param>
      <param name="interval">
The x value that specifies the division between intervals
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) if x &lt;= interval, result(x) = curve2(x) if x &gt; interval
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.CombineIntervals(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Int32,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Combines two curves into a new curve by selecting points in one interval from the corresponding interval in one input curve, and the remaining points from the other curve.
</summary>
      <param name="curve1">
The first curve to select points from.
</param>
      <param name="curve2">
The second curve to select points from
</param>
      <param name="interval">
The x value that specifies the division between intervals
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) if x &lt;= interval, result(x) = curve2(x) if x &gt; interval
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Compose(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Composes two curves (curve1 ∘ curve2).
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <returns>
The resulting curve, where result(x) = curve1(curve2(x)).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Compose(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Composes two curves (curve1 ∘ curve2) and stores the result in a new or existing curve.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(curve2(x)).
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.Curve.CurveInterpolation">
      <summary>
The method of interpolation used when creating curve values between control points.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.EstimateInterpolationFactor(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Estimates the factor of interpolation between the identity curve and the curve supplied that should be used to get as close to target curve as possible.
</summary>
      <param name="targetCurve">
The curve to target with the interpolation.
</param>
      <param name="maxCurve">
The curve that corresponds to an 1.0 interpolation factor. 0.0 corresponds to the identity curve.
</param>
      <returns>
The factor of interpolation between the identity curve and the curve supplied that should be used to get as close to target curve as possible.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.EstimateInterpolationFactor(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.CurveMinMaxPair)">
      <summary>
Estimates the factor of interpolation between the identity curve and one of the min and max curves supplied that should be used to get as close to target curve as possible.
</summary>
      <param name="targetCurve">
The curve to target with the interpolation.
</param>
      <param name="curvePair">
Curve pair where the max curve corresponds to an 1.0 interpolation factor and the min curve corresponds to an -1.0 interpolation factor. 0.0 corresponds to the identity curve.
</param>
      <returns>
The factor of interpolation between the identity curve and one of the min and max curve supplied that should be used to get as close to target curve as possible. 
If the result is negative, it represents the negative interpolation between the identity curve and the supplied min curve, 
otherwise the interpolation between the identity curve and the supplied max curve.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.EstimateInterpolationFactors(Lumia.Imaging.Adjustments.Curve,Windows.Foundation.Collections.IIterable{Lumia.Imaging.Adjustments.Curve})">
      <summary>
For each of the input curves, estimates the factor of interpolation between the identity curve and the curve supplied that should be used to get as close to target curve as possible
when the resulting interpolated curves are applied in sequence.
</summary>
      <param name="targetCurve">
The curve to target with the interpolation.
</param>
      <param name="maxCurves">
List of curve that corresponds to an 1.0 interpolation factor. 0.0 corresponds to the identity curve.
</param>
      <returns>
List of factors of interpolation between the identity curve and the curves supplied that should be used to get as close to target curve as possible when the resulting interpolated curves are applied in sequence.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.EstimateInterpolationFactors(Lumia.Imaging.Adjustments.Curve,Windows.Foundation.Collections.IIterable{Lumia.Imaging.Adjustments.CurveMinMaxPair})">
      <summary>
For each of the input curves, estimates the factor of interpolation between the identity curve and the curve supplied that should be used to get as close to target curve as possible
when the resulting interpolated curves are applied in sequence.
</summary>
      <param name="targetCurve">
The curve to target with the interpolation.
</param>
      <param name="curvePairs">
List of curve pairs where the max curve corresponds to an 1.0 interpolation factor and the min curve corresponds to an -1.0 interpolation factor. 0.0 corresponds to the identity curve.
</param>
      <returns>
The factor of interpolation between the identity curve and one of the min and max curve supplied that should be used to get as close to target curve as possible when the resulting interpolated curves are applied in sequence.
If a factor is negative, it represents the negative interpolation between the identity curve and the corresponding min curve, 
otherwise the interpolation between the identity curve and the corresponding max curve.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.GetInterpolatedValues">
      <summary>
Gets the curve represented as an array of y-values, corresponding to each x in the range [MinX,MaxX].
</summary>
      <returns>Array of y-values that define the curve.</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Double)">
      <summary>
Interpolates between two curves.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
If alpha is 0 the resulting curve is equal to curve1. If alpha is 1 the resulting curve is equal to curve2.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) * (1 - alpha) + curve2(x) * alpha.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Double,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Interpolates between two curves and stores the result in a new or existing curve.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
If alpha is 0 the resulting curve is equal to curve1. If alpha is 1 the resulting curve is equal to curve2.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) * (1 - alpha) + curve2(x) * alpha.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate(Lumia.Imaging.Adjustments.CurveMinMaxPair,System.Double)">
      <summary>
Interpolates between the min and the max curve.
</summary>
      <param name="curveMinMaxPair">
The min-max curve pair.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
If alpha is 0 the resulting curve is equal to the minCurve. If alpha is 1 the resulting curve is equal to maxCurve.
</param>
      <returns>
The resulting curve, where result(x) = minCurve(x) * (1 - alpha) + maxCurve(x) * alpha.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate(Lumia.Imaging.Adjustments.CurveMinMaxPair,System.Double,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Interpolates between the min and the max curve.
</summary>
      <param name="curveMinMaxPair">
The min-max curve pair.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
If alpha is 0 the resulting curve is equal to the minCurve. If alpha is 1 the resulting curve is equal to maxCurve.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = minCurve(x) * (1 - alpha) + maxCurve(x) * alpha.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate3(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Double)">
      <summary>
Interpolates between maxCurve and normCurve if alpha &gt;= 0, otherwise between minCurve and normCurve.
<para>If alpha is 1, the resulting curve is identical to maxCurve. If alpha is -1, the resulting curve is identical to minCurve.
If alpha is 0, the resulting curve is equal to normCurve.</para>
The result is stored in a new or existing curve.
</summary>
      <param name="maxCurve">
The maxCurve.
</param>
      <param name="normCurve">
The normCurve.
</param>
      <param name="minCurve">
The minCurve.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where 
result(x) = maxCurve(x) * alpha + normCurve(x) * (1 - alpha),  if alpha &gt;= 0,
result(x) = minCurve(x) * (-alpha) + normCurve(x) * (1 + alpha),  if alpha &lt; 0.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Interpolate3(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,System.Double,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Interpolates between maxCurve and normCurve if alpha &gt;= 0, otherwise between minCurve and normCurve.
<para>If alpha is 1, the resulting curve is identical to maxCurve. If alpha is -1, the resulting curve is identical to minCurve.
If alpha is 0, the resulting curve is equal to normCurve.</para>
The result is stored in a new or existing curve.
</summary>
      <param name="maxCurve">
The maxCurve.
</param>
      <param name="normCurve">
The normCurve.
</param>
      <param name="minCurve">
The minCurve.
</param>
      <param name="alpha">
The alpha parameter that determines how the curves are interpolated.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where 
result(x) = maxCurve(x) * alpha + normCurve(x) * (1 - alpha),  if alpha &gt;= 0,
result(x) = minCurve(x) * (-alpha) + normCurve(x) * (1 + alpha),  if alpha &lt; 0.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Multiply(Lumia.Imaging.Adjustments.Curve,System.Double)">
      <summary>
Multiplies a curve with a signed scalar value.
</summary>
      <param name="curve">
The curve to multiply with a scalar.
</param>
      <param name="factor">
The scalar to multiply with.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) * factor.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Multiply(Lumia.Imaging.Adjustments.Curve,System.Double,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Multiplies a curve with a signed scalar value and stores the result in a new or existing curve.
</summary>
      <param name="curve">
The curve to multiply with a scalar.
</param>
      <param name="factor">
The scalar to multiply with
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) * factor.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.Curve.Points">
      <summary>
The control points that will be used to create the curve. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Reflect(Lumia.Imaging.Adjustments.Curve,System.Double)">
      <summary>
Reflects a curve in the line y = m*x. 
</summary>
      <param name="curve">
The curve to reflect.
</param>
      <param name="coefficient">
The coefficient m in y = m*x that describes the line of reflection.
</param>
      <returns>
The curve reflected in the line y = m*x.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Reflect(Lumia.Imaging.Adjustments.Curve,System.Double,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Reflects a curve in the line y = m*x into a new or existing curve. 
</summary>
      <param name="curve">
The curve to reflect.
</param>
      <param name="coefficient">
The coefficient m in y = m*x that describes the line of reflection.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The curve reflected in the line y = m*x.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.RemovePoint(System.Int32)">
      <summary>
Remove a control point from the curve. 
</summary>
      <param name="x">
The x-value for the point to be removed.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.SetPoint(System.Int32,System.Int32)">
      <summary>
Set a control point for the curve. 
</summary>
      <param name="x">
The x-value of the point to set.
</param>
      <param name="y">
The y-value of the point to set.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.SetPoint(Windows.Foundation.Point)">
      <summary>
Set a control point for the curve. 
</summary>
      <param name="point">
The point to set.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Subtract(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Subtracts the first curve from the second.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) - curve2(x).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Subtract(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Subtracts the first curve from the second and stores the result in a new or existing curve.
</summary>
      <param name="curve1">
The first operand curve.
</param>
      <param name="curve2">
The second operand curve.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = curve1(x) - curve2(x).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Subtract(System.Int32,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Subtracts a curve from a signed scalar value.
</summary>
      <param name="scalar">
The scalar operand.
</param>
      <param name="curve">
The curve operand.
</param>
      <returns>
The resulting curve, where result(x) = scalar - curve(x).
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.Curve.Subtract(System.Int32,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Subtracts a curve from a signed scalar value and stores the result in a new or existing curve.
</summary>
      <param name="scalar">
The scalar operand.
</param>
      <param name="curve">
The curve operand.
</param>
      <param name="resultCurve">
Optional. If a curve is passed, the content is overwritten with the result of the operation, keeping the previously set interpolation mode. If null is passed, a new curve is created with the default interpolation mode.
</param>
      <returns>
The resulting curve, where result(x) = scalar - curve(x).
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.Curve.Values">
      <summary>
The curve represented as an array of y-values corresponding to each x in the range [MinX,MaxX].
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.CurveInterpolation">
      <summary>
Curve interpolation modes that are used with Curves.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.CurveInterpolation.Linear">
      <summary>
Use linear interpolation between the control points.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.CurveInterpolation.NaturalCubicSpline">
      <summary>
Use natural cubic spline interpolation between the control points.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.CurveMinMaxPair">
      <summary>
A pair of min and max curves.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurveMinMaxPair.#ctor">
      <summary>
Creates and initializes a new empty MinMax curve pair.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurveMinMaxPair.#ctor(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Creates and initializes a new MinMax curve pair comprised of the specified curves.
</summary>
      <param name="minCurve">
The minCurve.
</param>
      <param name="maxCurve">
The maxCurve.
</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.CurveMinMaxPair.MaxCurve">
      <summary>
The MaxCurve part of the pair.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.CurveMinMaxPair.MinCurve">
      <summary>
The MinCurve part of the pair.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.CurvesFilter">
      <summary>
Transforms colors in the image using color curves.<br /><img src="..\Images\CurvesFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.#ctor">
      <summary>
Creates and initializes a new CurvesFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.#ctor(Lumia.Imaging.Adjustments.Curve)">
      <summary>
Creates and initializes a new CurvesFilter with a single color curve for red, green and blue.
</summary>
      <param name="rgb">
Color curve to use for the red, green and blue channels. 
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.#ctor(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Creates and initializes a new CurvesFilter with a set of color curves.
</summary>
      <param name="red">
Color curve for the red channel. 
</param>
      <param name="green">
Color curve for the green channel. 
</param>
      <param name="blue">
Color curve for the blue channel. 
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.CurvesFilter.Blue">
      <summary>
Color curve for the blue channel. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.CurvesFilter.Green">
      <summary>
Color curve for the green channel. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.CurvesFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.CurvesFilter.Red">
      <summary>
Color curve for the red channel. 
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.DespeckleFilter">
      <summary>
Applies a despeckle effect, removing noise from the image.<br /><img src="..\Images\DespeckleFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.DespeckleFilter.#ctor">
      <summary>
Creates and initializes a new DespeckleFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.DespeckleFilter.#ctor(Lumia.Imaging.Adjustments.DespeckleLevel)">
      <summary>
Creates and initializes a new DespeckleFilter with a specified level.
</summary>
      <param name="despeckleLevel">
The despeckle level.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.DespeckleFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.DespeckleFilter.DespeckleLevel">
      <summary>
Despeckle level. 
<remarks>
Default is DespeckleLevel::Minimum.
</remarks></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.DespeckleFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.DespeckleFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.DespeckleLevel">
      <summary>
The amount of despeckling done by the despeckle filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.DespeckleLevel.Minimum">
      <summary>Minimum</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.DespeckleLevel.Low">
      <summary>Low</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.DespeckleLevel.High">
      <summary>High</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.DespeckleLevel.Maximum">
      <summary>Maximum</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ExposureFilter">
      <summary>
Adjust the brightness of an image using one of the modes in ExposureMode.<br /><img src="..\Images\ExposureFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ExposureFilter.#ctor">
      <summary>
Creates and initializes a new ExposureFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ExposureFilter.#ctor(Lumia.Imaging.Adjustments.ExposureMode,System.Double)">
      <summary>
Creates and initializes a new ExposureFilter with specified mode and gain.
</summary>
      <param name="exposureMode">
The exposure mode.
</param>
      <param name="gain">
The desired exposure level. 
<para>Positive values will make the image
brighter, negative values will make it darker.</para><para>Range is [-1.0, 1.5], but for gamma mode the effect saturates 
at 1.0, which means that everything between [1.0, 1.5]
will be interpreted as 1.0. </para><para>Recommended range for both gamma and natural mode for normal 
usage is [-1.0, 1.0]. 0.0 equals no change of exposure.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ExposureFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ExposureFilter.ExposureMode">
      <summary>
The exposure mode.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ExposureFilter.Gain">
      <summary>
The desired exposure level. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ExposureFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.ExposureFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ExposureMode">
      <summary>
Exposure modes to use with the exposure filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.ExposureMode.Natural">
      <summary>
Adjust the brightness of an image using a "natural" curve inspired
by a film characteristic curve. This mode preserves
the blacks in an image much better than the gamma mode.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.ExposureMode.Gamma">
      <summary>Adjust the brightness of an image using a gamma correction curve.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.GaussianNoiseFilter">
      <summary>
Applies Gaussian noise to the image.<br /><img src="..\Images\GaussianNoiseFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GaussianNoiseFilter.#ctor">
      <summary>
Creates and initializes a new GaussianNoiseFilter with the default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GaussianNoiseFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new GaussianNoiseFilter with a specified level.
</summary>
      <param name="level">
The amount of noise, given as the standard deviation of the Gaussian distribution. Must be &gt;= 1.0.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GaussianNoiseFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.GaussianNoiseFilter.Level">
      <summary>
The amount of noise, given as the standard deviation of the Gaussian distribution. Must be &gt;= 1.0.
Default is 1.0.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GaussianNoiseFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GaussianNoiseFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.GrayscaleFilter">
      <summary>
Converts the image to grayscale using a mixture of the color components.<br /><img src="..\Images\GrayscaleFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GrayscaleFilter.#ctor">
      <summary>
Creates and initializes a new GrayscaleFilter with the default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GrayscaleFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
Creates and initializes a new GrayscaleFilter with specified weights.
The gray shade is calculated by multiplying each color component of every pixel with the matching Weight and adding a constant: 
resultShade = redValue * redWeight + greenValue * greenWeight + blueValue * blueWeight + constant.
The resulting shade is clamped to the range [0,1].
</summary>
      <param name="redWeight">
The red component of the equation for mixing weights.
Range [-255.0, 255.0].
</param>
      <param name="greenWeight">
The green component of the equation for mixing weights.
Range [-255.0, 255.0].
</param>
      <param name="blueWeight">
The blue component of the equation for mixing weights.
Range [-255.0, 255.0].
</param>
      <param name="constant">
The constant component of the equation for mixing weights.
Range [-255.0, 255.0].
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GrayscaleFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.GrayscaleFilter.BlueWeight">
      <summary>
The blue weight in the mixing equation.
Range [-255.0, 255.0].
Default value is 0.114.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.GrayscaleFilter.Constant">
      <summary>
The constant in the mixing equation.
Range [-255.0, 255.0].
Default value is 0.0.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.GrayscaleFilter.GreenWeight">
      <summary>
The green weight in the mixing equation.
Range [-255.0, 255.0].
Default value is 0.587.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GrayscaleFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.GrayscaleFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.GrayscaleFilter.RedWeight">
      <summary>
The red weight in the mixing equation.
Range [-255.0, 255.0].
Default value is 0.299.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.HdrEffect">
      <summary>
Applies local tone mapping to a single image to achieve an HDR-like effect.<br /><img src="..\Images\HdrEffect.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.#ctor">
      <summary>
Creates and initializes a new HDR effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new HDR effect that uses the provided image source.
</summary>
      <param name="imageSource">An image source for the effect.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HdrEffect.Gamma">
      <summary>
        <para>Controls global contrast enhancement using a power law. 
Values lower than 1.0 makes the image more white and values above 1.0 makes it more black.
Recommended range is between 0.6 and 1.0.</para>
        <para>Gamma must be &gt; 0.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HdrEffect.NoiseSuppression">
      <summary>
        <para>Controls supression of noise amplification, value should rise with
the noisiness of the input image combined with the strength applied.
Recommended value is between 0.1 and 0.3.</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HdrEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HdrEffect.Saturation">
      <summary>
        <para>Controls color saturation using a power law.
Values lower than 1.0 will decrease the saturation, and values above 1.0 will increase the saturation of the image.
Recommended range is between 0.4 and 0.8.</para>
        <para>Saturation must be &gt; 0.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HdrEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HdrEffect.Strength">
      <summary>
        <para>Controls strength of local contrast enhancement.
The higher the value, the stronger effect.
Recommended range is between 0.1 and 0.30.
Having a high value may result in dark noisy images.</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.HueSaturationFilter">
      <summary>
Adjusts the hue and saturation of the image.<br /><img src="..\Images\HueSaturationFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationFilter.#ctor">
      <summary>
Creates and initializes a new HueSaturationFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationFilter.#ctor(System.Double,System.Double)">
      <summary>
Creates and initializes a new HueSaturationFilter with specified hue and saturation.
</summary>
      <param name="hue">
Hue adjustment level. 
<para>Range [-1.0, 1.0] where 0 implies no adjustment.</para></param>
      <param name="saturation">
Saturation adjustment level. 
<para>Range [-1.0, 1.0] where 0 implies no adjustment.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HueSaturationFilter.Hue">
      <summary>
        <para>Hue adjustment level. </para>
        <para>Range [-1.0, 1.0] where 0 implies no adjustment.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HueSaturationFilter.Saturation">
      <summary>
        <para>Saturation adjustment level.</para>
        <para>Range [-1.0, 1.0] where 0 implies no adjustment.</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter">
      <summary>
A filter that can be used to change hue, saturation and lightness differently based on each hue value in the image.<br /><img src="..\Images\HueSaturationLightnessFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.#ctor">
      <summary>
Creates and initializes a HueSaturationLightness filter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.HueCurve">
      <summary>
Mapping curve for hue. The x-axis refers to original hue, and the y-values describe the new hue.
The x-axis has a range [0, 255] that corresponds to the hue range [0, 359]. Acceptable y-values are in the range [0,510].
Set to null if Hue should not be adjusted.
The default is null.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.LightnessCurve">
      <summary>
Offset curve for lightness. The x-axis refers to hue, and the y-values are signed offsets describing whether to raise or lower the lightness of particular hues.
The x-axis has a range [0, 255] that corresponds to the hue range [0, 359]. Acceptable y-values are in the range [-255,255].
Set to null if Lightness should not be adjusted.
The default is null.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.HueSaturationLightnessFilter.SaturationCurve">
      <summary>
Offset curve for saturation. The x-axis refers to hue, and the y-values are signed offsets describing whether to raise or lower the saturation of particular hues.
The x-axis has a range [0, 255] that corresponds to the hue range [0, 359]. Acceptable y-values are in the range [-255,255].
Set to null if Saturation should not be adjusted.
The default is null.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.ILensBlurKernel">
      <summary>
Defines a kernel used for bluring by LensBlurEffect.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ILensBlurKernel.PointLightStrength">
      <summary>
Deprecated: This property is deprecated and will be removed in the next version. Please use the property "PointLightStrength" on LensBlurEffect instead.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.ILensBlurKernel.Size">
      <summary>
The length of a side of the square of the kernel used.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurCustomKernel">
      <summary>
Defines a custom kernel used for blurring by LensBlurEffect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurCustomKernel.#ctor">
      <summary>
Creates and initializes a new empty LensBlurCustomKernel. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurCustomKernel.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new LensBlurCustomKernel with a custom shape. 
</summary>
      <param name="shape">Image representation of the kernel used for blurring.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurCustomKernel.#ctor(Lumia.Imaging.IImageProvider,System.UInt32)">
      <summary>
Creates and initializes a new LensBlurCustomKernel with a custom shape and a size. 
</summary>
      <param name="shape">Image representation of the kernel used for blurring.</param>
      <param name="size">The length of a side of the square of the kernel used.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurCustomKernel.PointLightStrength">
      <summary>
Deprecated: This property is deprecated and will be removed in the next version. Please use the property "PointLightStrength" on LensBlurEffect instead.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurCustomKernel.Shape">
      <summary>
Image representation of the kernel used for blurring.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurCustomKernel.Size">
      <summary>
The length of a side of the square of the kernel used.
Range [0, 250]. 
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurEffect">
      <summary>
        <para>Applies blur to an image in a way similar to how out-of-focus areas are rendered by a lens, an effect also known as bokeh.</para>
        <img src="..\Images\LensBlurEffect.jpg" />
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor">
      <summary>
        <para>Creates and initializes a new LensBlurEffect.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
        <para>Creates and initializes a new LensBlurEffect with a source and default values.</para>
      </summary>
      <param name="imageSource">An image source to which the effect will be applied.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Adjustments.ILensBlurKernel)">
      <summary>
        <para>Creates and initializes a new LensBlurEffect with the specified source and kernel.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="kernel">A kernel that will be used to blur the whole image.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider)">
      <summary>
        <para>Creates and initializes a new LensBlurEffect with the specified source, kernel map and default values.</para>
      </summary>
      <param name="imageSource">An image source to which the effect will be applied.</param>
      <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.Adjustments.ILensBlurKernel)">
      <summary>
        <para>Creates and initializes a new LensBlurEffect with the specified source, kernel map and kernel.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
      <param name="kernel">A kernel that will be used to blur the out of focus areas of the image.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Windows.Foundation.Collections.IVectorView{Lumia.Imaging.Adjustments.ILensBlurKernel})">
      <summary>
        <para>Creates and initializes a new LensBlurEffect with the specified source, kernel map and one or more kernels.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
      <param name="kernels">Kernels that will be used to blur the out of focus areas of the image.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.BlendKernelWidth">
      <summary>
        <para>The width of the band between out of focus areas blurred with different kernels that gets blended, thus providing a smooth transition.</para>
        <para>Range [0, 255].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.FocusAreaEdgeMirroring">
      <summary>
        <para>Determines whether pixels in the focus area should be sampled when applying blur. 
If mirroring is on, then samples that would be located inside the focus area are instead taken from a mirrored location outside it.</para>
        <para>Default value is <see cref="F:Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring.On" />.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.FocusEdgeSoftening">
      <summary>
        <para>Determines if and how much of the edge of the focus area will be softened.</para>
        <para>The default value is <see cref="F:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode.Medium" />.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.KernelMap">
      <summary>
        <para>An image source representing a kernel map, specifying which kernel should be used on each pixel.</para>
        <para>Each pixel either gets blurred with one of the kernels, or is not blurred and considered to be a part of the focus area.</para>
        <para>Kernels are referenced via zero-based indices, e.g. the area that is to be blurred with the first kernel should be referred to by 0, the second kernel by the value of 1 and so forth.
Pixels in the focus area should be marked with the value 255.</para>
        <para>The maximum number of kernels is 250.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.KernelMapType">
      <summary>
        <para>Determines how the kernel map values should be interpreted.</para>
        <para>The default value is <see cref="F:Lumia.Imaging.Adjustments.LensBlurKernelMapType.ForegroundMask" />.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.Kernels">
      <summary>
        <para>Kernels used to blur the out of focus areas of the source image.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.PointLightStrength">
      <summary>
The strength with which a point of light is rendererd.
Range [1, 10].
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.Quality">
      <summary>
        <para>Quality of the result.</para>
        <para>Changing quality of the effect affects time and memory consumption of the effect by adjusting the working size. The working size of the effect is dependent on the Source's size, so a lower Quality value might be necessary to avoid an OutOfMemoryException.</para>
        <para>Range [0.0, 1.0]. Default value is 1.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring">
      <summary>
Determines whether pixels in the focus area should be sampled when applying blur. 
If mirroring is on, then samples that would be located inside the focus area are 
instead taken from a mirrored location outside it.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring.On">
      <summary>
Pixels from the focus area will not be be sampled, instead samples which would be 
located inside the focus area are instead taken from a mirrored location outside it.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring.Off">
      <summary>
Pixels from the focus area will be sampled.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening">
      <summary>
Specifies LensBlur focus edge softening behavior.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening.#ctor(Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode)">
      <summary>
Create a LensBlurFocusEdgeSoftening setting that will allow <see cref="T:Lumia.Imaging.Adjustments.LensBlurEffect" /> to compute the appropriate focus edge softening value given the chosen mode.
</summary>
      <param name="mode">Determines if and how much of the edge of the focus area will be softened.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening.#ctor(System.Int32)">
      <summary>
Create a LensBlurFocusEdgeSoftening setting that will provide the exact number used by <see cref="T:Lumia.Imaging.Adjustments.LensBlurEffect" />, measured in pixels.
</summary>
      <param name="exactPixels">The exact number of pixels to be softened around the focus area. Must be greater than or equal to 0.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening.ToString">
      <summary>Returns a string representation of the object.</summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode">
      <summary>Determines if and how much of the edge of the focus area will be softened.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode.Medium">
      <summary>A medium amount of softening is applied. The amount scales automatically with the source image size.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode.Low">
      <summary>A low amount of softening is applied, independent of the image size.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode.High">
      <summary>A high amount of softening is applied. The amount scales automatically with the source image size.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode.None">
      <summary>No softening is applied.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurKernelMapType">
      <summary>Selects how the kernel map values should be interpreted.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurKernelMapType.ForegroundMask">
      <summary>Default mode where the focus area is represented by 255, and the first kernel starts at 0. This is the useful eg. when when using <see cref="T:Lumia.Imaging.Adjustments.InteractiveForegroundSegmenter" /> to generate the mask.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurKernelMapType.Continuous">
      <summary>The kernel map is continuous so that the focus area is represented by 0, and the first kernel starts at 1. This makes resizing and compositing the kernel map easier.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel">
      <summary>
Defines a predefined kernel shape used for blurring by LensBlurEffect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel.#ctor">
      <summary>
Creates and initializes a new LensBlurPredefinedKernel with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel.#ctor(Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape,System.UInt32)">
      <summary>
Creates and initializes a new LensBlurPredefinedKernel with a predefined shape and a size.
</summary>
      <param name="shape">An predefined shape for the kernel.</param>
      <param name="size">A size of the kernel used.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel.LensBlurPredefinedKernelShape">
      <summary>
Predefined kernel shape used for blurring by LensBlurEffect.
Default value is Circle.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel.PointLightStrength">
      <summary>
Deprecated: This property is deprecated and will be removed in the next version. Please use the property "PointLightStrength" on LensBlurEffect instead.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LensBlurPredefinedKernel.Size">
      <summary>
The length of a side of the square of the kernel used.
Range [1, 255].
Default value is 10.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape">
      <summary>
Predefined shapes for LensBlurEffect.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape.Circle"></member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape.Hexagon"></member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape.Flower"></member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape.Star"></member>
    <member name="F:Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape.Heart"></member>
    <member name="T:Lumia.Imaging.Adjustments.Levels">
      <summary>Represents levels in RGB levels filter.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.Levels.Max">
      <summary>The maximum value.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.Levels.MidTone">
      <summary>The midtone value.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.Levels.Min">
      <summary>The minimum value.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LevelsFilter">
      <summary>
Adjusts levels in the current image.<br /><img src="..\Images\LevelsFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LevelsFilter.#ctor">
      <summary>
Creates and initializes a new LevelsFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LevelsFilter.#ctor(System.Double,System.Double,System.Double)">
      <summary>
Creates and initializes a new LevelsFilter with specified settings.
</summary>
      <param name="white">
The position of the white saturating point. 
<para>
Range [0.0, 1.0].
</para></param>
      <param name="gray">
The relative position of the middle gray point. 
<para>
Range [0.0, 1.0], where 0.0 is at the bright saturating 
point and 1.0 is at the dark saturating point.
</para></param>
      <param name="black">
The position of the black saturating point.
<para>
Range [0.0, 1.0]. The value of black should be smaller 
than, or equal to the value of white.
</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LevelsFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LevelsFilter.Black">
      <summary>
        <para>The position of the black saturating point.</para>
        <para>Range [0.0, 1.0]. The value of black should be smaller 
than, or equal to the value of white.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LevelsFilter.Gray">
      <summary>
        <para>The relative position of the middle gray point. </para>
        <para>Range [0.0, 1.0], where 0.0 is at the white saturating 
point and 1.0 is at the black saturating point.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LevelsFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LevelsFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LevelsFilter.White">
      <summary>
        <para>The position of the white saturating point. The value of white should be larger 
than, or equal to the value of black.</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter">
      <summary>
Automatically boost and enhance images with unequal illumination.<br /><img src="..\Images\LocalBoostAutomaticFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.#ctor">
      <summary>
Creates and initializes a new LocalBoostAutomaticFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.#ctor(System.Int32)">
      <summary>
Creates and initializes a new LocalBoostAutomaticFilter with the specified level.
</summary>
      <param name="level">
Intensity of the filter.
<para>Range [0, 14].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.Level">
      <summary>
        <para>Intensity of the filter.</para>
        <para>Range [0, 14].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.LocalBoostFilter">
      <summary>
Manually boost and enhance images with unequal illumination.<br /><img src="..\Images\LocalBoostFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostFilter.#ctor">
      <summary>
Creates and initializes a new LocalBoostFilter with default settings.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
Creates and initializes a new LocalBoostFilter with specified settings.
</summary>
      <param name="gamma">
Gamma correction for the dark part of the image.
<para>Range [0.1, 5.0)</para></param>
      <param name="darkContrast">
Contrast amplification of the dark part.
<para>Range [0.5, 1.0)</para></param>
      <param name="lightContrast">
Contrast amplification of the light part.
<para>Range [0.5, 1.0)</para></param>
      <param name="sensitivityLevel">
Specifies how much of the processed image will be blended into the original image.
<para>Range: [0.0, 1.0]</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LocalBoostFilter.DarkContrast">
      <summary>
        <para>Contrast amplification of the dark part.</para>
        <para>Range [0.5, 1.0)</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LocalBoostFilter.Gamma">
      <summary>
        <para>Gamma correction for the dark part of the image.</para>
        <para>Range [0.1, 5.0)</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LocalBoostFilter.LightContrast">
      <summary>
Contrast amplification of the light part.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.LocalBoostFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.LocalBoostFilter.SensitivityLevel">
      <summary>
Specifies how much of the processed image will be blended into the original image.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.NoiseFilter">
      <summary>
Applies noise to the image.<br /><img src="..\Images\NoiseFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.NoiseFilter.#ctor">
      <summary>
Creates and initializes a new NoiseFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.NoiseFilter.#ctor(Lumia.Imaging.Adjustments.NoiseLevel)">
      <summary>
Creates and initializes a new NoiseFilter with a specified level.
</summary>
      <param name="level">
The amount of noise.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.NoiseFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.NoiseFilter.Level">
      <summary>
The amount of noise. Default is NoiseLevel::Minimum.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.NoiseFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.NoiseFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.NoiseLevel">
      <summary>
The amount of noise added by the noise filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.NoiseLevel.Minimum">
      <summary>Minimum</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.NoiseLevel.Medium">
      <summary>Medium</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.NoiseLevel.Maximum">
      <summary>Maximum</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.RedEyeRemovalFilter">
      <summary>
A filter that removes red eyes from a collection of defined eye areas.<br /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.#ctor">
      <summary>
Creates and initializes RedEyeRemovalFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.#ctor(Windows.Foundation.Collections.IVectorView{Windows.Foundation.Rect})">
      <summary>
Creates and initializes RedEyeRemovalFilter with specified eye areas and default removal mode.
</summary>
      <param name="eyeAreas">
Collection of rectangles (maximum 16), each specifying an area in the image containing one red eye to be removed.
Expressed in the unit coordinate space of the image, i.e., the top left corner of the image is at (0, 0), and the bottom right corner is at (1, 1).
Zero-sized areas and areas outside the image will be quietly ignored.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.#ctor(Windows.Foundation.Collections.IVectorView{Windows.Foundation.Rect},Lumia.Imaging.Adjustments.RedEyeRemovalMode)">
      <summary>
Creates and initializes RedEyeRemovalFilter with specified eye areas and removal mode.
</summary>
      <param name="eyeAreas">
Collection of rectangles (maximum 16), each specifying an area in the image containing one red eye to be removed.
Expressed in the unit coordinate space of the image, i.e., the top left corner of the image is at (0, 0), and the bottom right corner is at (1, 1).
Zero-sized areas and areas outside the image will be quietly ignored.
</param>
      <param name="mode">
Red eye removal algorith applied to the defined eye areas.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.DetectedEyes">
      <summary>
Collection of Rects representing each corrected eye, a subset of the <see cref="P:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.EyeAreas" /> Rects.
Expressed in the unit coordinate space of the image, i.e., the top left corner of the image is at (0, 0), and the bottom right corner is at (1, 1). 
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.EyeAreas">
      <summary>
Collection of rectangles (maximum 16), each specifying an area in the image containing one red eye to be removed.
Expressed in the unit coordinate space of the image, i.e., the top left corner of the image is at (0, 0), and the bottom right corner is at (1, 1).
Zero-sized areas and areas outside the image will be quietly ignored.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.Mode">
      <summary>
Red eye removal algorithm applied to the defined eye areas.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RedEyeRemovalFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.RedEyeRemovalMode">
      <summary>
Methods used with RedEyeRemoval filter to correct the red eye.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.Normal">
      <summary>
For red pixels with R &gt; (G+B)/2: set R := 3/4 (G+B)
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.Highlight">
      <summary>
Replace red pixels by solid green colour (debug).
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.ReplaceRedWithGreenBlueDark">
      <summary>
For red pixels: replace red channel by (G+B)/1.5.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.RestrictRedWithGreenBlueDark">
      <summary>
For red pixels: restrict red channel by (G+B)/1.5.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.ReplaceRedWithGreenBlue">
      <summary>
For red pixels: replace red channel by (G+B)/2
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.RedEyeRemovalMode.RestrictRedWithGreenBlue">
      <summary>
For red pixels: restrict red channel by (G+B)/2
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.RgbLevelsFilter">
      <summary>
Adjusts RGB levels in the current image.<br /><img src="..\Images\RgbLevelsFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.#ctor">
      <summary>
Creates and initializes a new RgbLevelsFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.#ctor(Lumia.Imaging.Adjustments.Levels)">
      <summary>
Creates and initializes a new RGBLevelsFilter with specified settings.
</summary>
      <param name="rgb">
The minimum, maximum and midtone of the RGB levels. 
<para>
Range Min[0, 255], Max[0.255], MidTone[0.01, 9.99]
</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.#ctor(Lumia.Imaging.Adjustments.Levels,Lumia.Imaging.Adjustments.Levels,Lumia.Imaging.Adjustments.Levels,Lumia.Imaging.Adjustments.Levels)">
      <summary>
Creates and initializes a new RGBLevelsFilter with specified settings.
</summary>
      <param name="rgb">
The minimum, maximum and midtone of the RGB levels. 
<para>
Range Min[0, 255], Max[0.255], MidTone[0.01, 9.99]
</para></param>
      <param name="red">
The minimum, maximum and midtone of the red levels. 
<para>
Range Min[0, 255], Max[0.255], MidTone[0.01, 9.99]
</para></param>
      <param name="green">
The minimum, maximum and midtone of the green levels. 
<para>
Range Min[0, 255], Max[0.255], MidTone[0.01, 9.99]
</para></param>
      <param name="blue">
The minimum, maximum and midtone of the blue levels. 
<para>
Range Min[0, 255], Max[0.255], MidTone[0.01, 9.99]
</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbLevelsFilter.Blue">
      <summary>
        <para>The minimum, maximum and midtone of the blue levels in the image.</para>
        <para>Range Min[0, 255], Max[0,255], MidTone[0.01, 9,99]</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbLevelsFilter.Green">
      <summary>
        <para>The minimum, maximum and midtone of the green levels in the image.</para>
        <para>Range Min[0, 255], Max[0,255], MidTone[0.01, 9,99]</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbLevelsFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbLevelsFilter.Red">
      <summary>
        <para>The minimum, maximum and midtone of the red levels in the image.</para>
        <para>Range Min[0, 255], Max[0,255], MidTone[0.01, 9,99]</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbLevelsFilter.Rgb">
      <summary>
        <para>The minimum, maximum and midtone of the RGB levels in the image.</para>
        <para>Range Min[0, 255], Max[0,255], MidTone[0.01, 9,99]</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.RgbMixerFilter">
      <summary>
Maps a linear combination of all input color channels onto each output color channel so that c_out = f(a_in, r_in, g_in, b_in).<br /><img src="..\Images\RgbMixerFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbMixerFilter.#ctor">
      <summary>
Creates and initializes a new RGB Mixer Filter with default values.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbMixerFilter.Alpha">
      <summary>
A set of curves defining the new color based on the current alpha component.
Default is a set of curves that leaves the Alpha channel unchanged.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbMixerFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbMixerFilter.Blue">
      <summary>
A set of curves defining the new color based on the current blue component.
Default is a set of curves that leaves the Blue channel unchanged.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbMixerFilter.Green">
      <summary>
A set of curves defining the new color based on the current green component.
Default is a set of curves that leaves the Green channel unchanged.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbMixerFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.RgbMixerFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.RgbMixerFilter.Red">
      <summary>
A set of curves defining the new color based on the current red component.
Default is a set of curves that leaves the Red channel unchanged.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.SaturationLightnessFilter">
      <summary>
Transforms saturation and/or lightness in the image using saturation and lightness curves. <br /><img src="..\Images\SaturationLightnessFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SaturationLightnessFilter.#ctor">
      <summary>
Creates and initializes a new SaturationLightnessFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SaturationLightnessFilter.#ctor(Lumia.Imaging.Adjustments.Curve,Lumia.Imaging.Adjustments.Curve)">
      <summary>
Creates and initializes a new SaturationLightnessFilter with a saturation and a lightness curve.
</summary>
      <param name="saturationCurve">
Curve for the saturation. Set to null if saturation should not be adjusted.
</param>
      <param name="lightnessCurve">
Curve for the lightness. Set to null if lightness should not be adjusted.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SaturationLightnessFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.SaturationLightnessFilter.LightnessCurve">
      <summary>
Curve for the lightness. The x-axis refers to the current lightness values and the matching y-axis values will become the new lightness values.
The x-axis has a range [0, 255]. Acceptable y-values are in the range [0, 255].
Set to null if lightness should not be adjusted.
Default is null.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SaturationLightnessFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SaturationLightnessFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.SaturationLightnessFilter.SaturationCurve">
      <summary>
Curve for the saturation. The x-axis refers to the current saturation values and the matching y-axis values will become the new saturation values.
The x-axis has a range [0, 255]. Acceptable y-values are in the range [0, 255].
Set to null if saturation should not be adjusted.
Default is null.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.SharpnessFilter">
      <summary>
Enhances the sharpness of the image, allowing for precise settings. <br /><img src="..\Images\SharpnessFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SharpnessFilter.#ctor">
      <summary>
Creates and initializes a new SharpnessFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SharpnessFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new SharpnessFilter with a specified level.
</summary>
      <param name="level">
Image sharpness level.
<para>Level must be greater than 0. Recommended range is [0, 1] however values greater than 1.0 are supported.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SharpnessFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.SharpnessFilter.Level">
      <summary>
        <para>Image sharpness level.</para>
        <para>Level must be greater than 0. Recommended range is [0, 1] however values greater than 1.0 are supported.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SharpnessFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.SharpnessFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.TemperatureAndTintFilter">
      <summary>
Adjusts the color temperature and tint of the image.<br /><img src="..\Images\TemperatureAndTintFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.#ctor">
      <summary>
Creates and initializes a new TemperatureAndTintFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.#ctor(System.Double,System.Double)">
      <summary>
Creates and initializes a new TemperatureAndTintFilter with specified temperature and tint.
</summary>
      <param name="temperature">
The temperature adjustment value.
<para>Range [-1.0, 1.0] where 0 implies an unmodified color temperature.</para></param>
      <param name="tint">
The tint adjustment.
<para>Range [-1.0, 1.0] where 0 implies an unmodified color tint.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.Temperature">
      <summary>
        <para>Color temperature adjustment.</para>
        <para>Range [-1.0, 1.0] where 0 implies an unmodified color temperature.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.TemperatureAndTintFilter.Tint">
      <summary>
        <para>Color tint adjustment.</para>
        <para>Range [-1.0, 1.0] where 0 implies an unmodified color tint. </para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.WhiteBalanceFilter">
      <summary>
Adjusts the white balance in the image.<br /><img src="..\Images\WhiteBalanceFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.#ctor">
      <summary>
Creates and initializes a new WhiteBalanceFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.#ctor(Lumia.Imaging.Adjustments.WhitePointCalculationMode)">
      <summary>
Creates and initializes a new WhiteBalanceFilter with specified white point calculation mode.
</summary>
      <param name="whitePointCalculationMode">
The white point calculation mode.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.#ctor(Lumia.Imaging.Adjustments.WhitePointCalculationMode,Windows.UI.Color)">
      <summary>
Creates and initializes a new WhiteBalanceFilter with specified white point calculation mode and source whitepoint.
</summary>
      <param name="whitePointCalculationMode">
The white point calculation mode.
</param>
      <param name="sourceWhitePoint">
The source white point reference color.
<para>Ignored, unless mode is set to Manual.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteBalanceFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.WhiteBalanceFilter.SourceWhitePoint">
      <summary>
The source white point reference color.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.WhiteBalanceFilter.WhitePointCalculationMode">
      <summary>
The white balance mode. 
<para>Default is WhitePointCalculationMode::Cluster.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.WhiteBalanceMode">
      <summary>
The white balance modes used with the AutoEnhanceFilter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhiteBalanceMode.Off">
      <summary>Does not apply white balance filter.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhiteBalanceMode.Automatic">
      <summary>Automatically calculates the white point in the source image, uses a manually set target white point.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhiteBalanceMode.Manual">
      <summary>Uses manually set source and target white points.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter">
      <summary>
Enhances text and drawings in an image of a whiteboard.<br /><img src="..\Images\WhiteboardEnhancementFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.#ctor">
      <summary>
Creates and initializes a new WhiteboardEnhancementFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.#ctor(Lumia.Imaging.Adjustments.WhiteboardEnhancementMode)">
      <summary>
Creates and initializes a new WhiteboardEnhancementFilter with a specified mode.
</summary>
      <param name="whiteboardEnhancementMode">
Specifies if the whiteboard effect should be hard or soft.
</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter.WhiteboardEnhancementMode">
      <summary>
Specifies if the whiteboard effect should be hard or soft.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.WhiteboardEnhancementMode">
      <summary>
The whiteboard enhancement modes used with the WhiteBoardEnhancementFilter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhiteboardEnhancementMode.Hard">
      <summary>Enhances the contrast.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhiteboardEnhancementMode.Soft">
      <summary>Preserve colors better.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.WhitePointCalculationMode">
      <summary>
The ways in which the white point can be calculated by the white balance filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhitePointCalculationMode.Cluster">
      <summary>Uses the mean value of the 256-bin distribution.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhitePointCalculationMode.Mean">
      <summary> Uses the estimated mean gray for the color correction.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhitePointCalculationMode.Maximum">
      <summary> Uses the estimated maximum intensity color.</summary>
    </member>
    <member name="F:Lumia.Imaging.Adjustments.WhitePointCalculationMode.Manual">
      <summary> Uses a specified white reference color.</summary>
    </member>
    <member name="T:Lumia.Imaging.Adjustments.VibranceFilter">
      <summary>
Increases the saturation in the image, while allowing skin color tones to be preserved or more moderately saturated.<br /><img src="..\Images\VibranceFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.VibranceFilter.#ctor">
      <summary>
Creates and initializes a new VibranceFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.VibranceFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.VibranceFilter.Level">
      <summary>
        <para>The strength of the effect.</para>
        <para>Range: Level &gt;= 0, where 0.0 results in no adjustment. Recommended range is [0, 1].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.VibranceFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Adjustments.VibranceFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.VibranceFilter.Sensitivity">
      <summary>
        <para>Sensitivity specifying how low saturated pixels will be affected by the effect.</para>
        <para>Range [0.0, 1.0], where 0.0 results in no adjustment for low saturated pixels.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.VibranceFilter.SkinHueRange">
      <summary>
        <para>Specifies the range which is considered human skin color range, specifying where the effect isn't applied.</para>
        <para>The ramp is specified in Hue space, with Red at 0 degrees.</para>
        <para>Range: -21 &lt;= BeginRamp &lt; BeginSustain &lt; EndSustain &lt; EndRamp &lt;= 240 </para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Adjustments.VibranceFilter.SkinLevel">
      <summary>
        <para>The strength of the effect on skin color tones.</para>
        <para>Range [0.0, 1.0], where 0.0 results in no vibrance, and 1.0 results in full vibrance being applied to skin tones.</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.AntiqueFilter">
      <summary>
        <para>Produces the look of an old color photo.</para>
        <img src="..\Images\AntiqueFilter.jpg" />
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.AntiqueFilter.#ctor">
      <summary>
Creates a new AntiqueFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.AntiqueFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.AntiqueFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.AntiqueFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.CartoonFilter">
      <summary>
Transforms the image into a cartoon graphic style.<br /><img src="..\Images\CartoonFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.CartoonFilter.#ctor">
      <summary>
Creates and initializes a new CartoonFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.CartoonFilter.#ctor(System.Boolean)">
      <summary>
Creates and initializes a new CartoonFilter with distinctEdges settings.
</summary>
      <param name="distinctEdges">
Specifies if detected edges in the image should be rendered distinctively.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.CartoonFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.CartoonFilter.DistinctEdges">
      <summary>
Specifies if detected edges in the image should be rendered distinctively.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.CartoonFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.CartoonFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.ColorSwapFilter">
      <summary>
Adjusts the parameters of the Color-swap filter.<br /><img src="..\Images\ColorSwapFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.ColorSwapFilter.#ctor">
      <summary>
Creates and initializes a new ColorSwapFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.ColorSwapFilter.#ctor(Windows.UI.Color,Windows.UI.Color,System.Double,System.Boolean,System.Boolean)">
      <summary>
Creates and initializes a new ColorSwapFilter with specified settings.
</summary>
      <param name="sourceColor">
Specifies the color that should be converted.
<para>The alpha-component is ignored.</para></param>
      <param name="swapColor">
Specifies which color sourceColor should be converted to.
<para>The alpha-component is ignored.</para></param>
      <param name="colorDistance">
Specifies the tolerance level of the effect. 
<para>Range [0.0, 1.0].</para></param>
      <param name="isMonoColor">
Specifies if the other colors should be converted to grayscale or be preserved.
</param>
      <param name="swapLuminance">
Controls if the luminance should be included in the color swap.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.ColorSwapFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.ColorSwapFilter.ColorDistance">
      <summary>
        <para>Specifies the tolerance level of the effect. </para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.ColorSwapFilter.IsMonoColor">
      <summary>
Specifies if the other colors should be converted to grayscale or be preserved.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.ColorSwapFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.ColorSwapFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.ColorSwapFilter.SourceColor">
      <summary>
Specifies the color that should be converted.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.ColorSwapFilter.SwapColor">
      <summary>
Specifies which color SourceColor should be converted to.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.ColorSwapFilter.SwapLuminance">
      <summary>
Controls if the luminance should be included in the color swap.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.EmbossFilter">
      <summary>
Applies an emboss effect in grayscale.<br /><img src="..\Images\EmbossFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.EmbossFilter.#ctor">
      <summary>
Creates and initializes a new EmbossFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.EmbossFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new EmbossFilter with a specified level.
</summary>
      <param name="level">
The level of the emboss effect.
<para>Range: [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.EmbossFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.EmbossFilter.Level">
      <summary>
        <para>The level of the emboss effect.</para>
        <para>Range: [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.EmbossFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.EmbossFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.FogFilter">
      <summary>
Applies a fog effect.<br /><img src="..\Images\FogFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FogFilter.#ctor">
      <summary>
Creates and initializes a new FogFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FogFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FogFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FogFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.FoundationFilter">
      <summary>
Applies a foundation effect on a specified region of the image.<br /><img src="..\Images\FoundationFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FoundationFilter.#ctor">
      <summary>
Creates and initializes a new FoundationFilter that will be applied to the whole image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FoundationFilter.#ctor(Windows.Foundation.Rect)">
      <summary>
Creates and initializes a new FoundationFilter that will be applied to a specific region in the image.
</summary>
      <param name="region">
The region in which the effect is applied, for instance a face.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para><para>If a region with zero width or height is specified, the effect will be applied to the whole image.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FoundationFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FoundationFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.FoundationFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.FoundationFilter.Region">
      <summary>
The region in which the effect is applied, for instance a face.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.GrayscaleNegativeFilter">
      <summary>
Converts the image to a grayscale negative.<br /><img src="..\Images\GrayscaleNegativeFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.GrayscaleNegativeFilter.#ctor">
      <summary>
Creates and initializes a new GrayscaleNegativeFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.GrayscaleNegativeFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.GrayscaleNegativeFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.GrayscaleNegativeFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.LomoFilter">
      <summary>
Applies a lomo effect on the image.<br /><img src="..\Images\LomoFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.LomoFilter.#ctor">
      <summary>
Creates and initializes a new LomoFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.LomoFilter.#ctor(System.Double,System.Double,Lumia.Imaging.Artistic.LomoVignetting,Lumia.Imaging.Artistic.LomoStyle)">
      <summary>
Creates and initializes a new LomoFilter with specified settings.
</summary>
      <param name="brightness">
The brightness adjustment.
<para>Range [0.0, 1.0], where 0.0 gives a bright image and 1.0 a dark image.</para></param>
      <param name="saturation">
The color saturation adjustment. 
Range [0.0, 1.0], where 0.0 implies no saturation.
</param>
      <param name="vignetting">
The vignetting level.
</param>
      <param name="style">
The color style.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.LomoFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.LomoFilter.Brightness">
      <summary>
        <para>The brightness of the image.</para>
        <para>Range [0.0, 1.0], where 0.0 gives a bright image and 1.0 a dark image.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.LomoFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.LomoFilter.LomoStyle">
      <summary>
Color style.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.LomoFilter.LomoVignetting">
      <summary>
The vignetting level.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.LomoFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.LomoFilter.Saturation">
      <summary>
        <para>The color saturation of the image.</para>
        <para>Range [0.0, 1.0], where 0.0 implies no saturation.</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.LomoStyle">
      <summary>
Color styles to use with the lomo filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoStyle.Neutral">
      <summary>Neutral</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoStyle.Red">
      <summary>Red</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoStyle.Green">
      <summary>Green</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoStyle.Blue">
      <summary>Blue</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoStyle.Yellow">
      <summary>Yellow</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.LomoVignetting">
      <summary>
Vignetting impact levels to use with the lomo filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoVignetting.Low">
      <summary>Low</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoVignetting.Medium">
      <summary>Medium</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.LomoVignetting.High">
      <summary>High</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.MagicPenFilter">
      <summary>
Applies a mix of edge distinction and color manipulation to the image.<br /><img src="..\Images\MagicPenFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MagicPenFilter.#ctor">
      <summary>
Creates and initializes a new MagicPenFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MagicPenFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MagicPenFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MagicPenFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.MilkyFilter">
      <summary>
Applies a milky surface to the image.<br /><img src="..\Images\MilkyFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MilkyFilter.#ctor">
      <summary>
Creates and initializes a new MilkyFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MilkyFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MilkyFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MilkyFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.MirrorFilter">
      <summary>
Mirrors the left half of the image onto the right half.<br /><img src="..\Images\MirrorFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MirrorFilter.#ctor">
      <summary>
Creates and initializes a new MirrorFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MirrorFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MirrorFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MirrorFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.MonoColorFilter">
      <summary>
Preserves one color tone while other colors
are converted to grayscale.<br /><img src="..\Images\MonoColorFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MonoColorFilter.#ctor">
      <summary>
Creates and initializes a new MonoColorFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MonoColorFilter.#ctor(Windows.UI.Color,System.Double)">
      <summary>
Creates and initializes a new MonoColorFilter with specified settings for the color to be preserved.
</summary>
      <param name="preserveColor">
The color that will be preserved.
</param>
      <param name="colorDistance">
Specifies the tolerance level of the effect. 
<para>Range [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MonoColorFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.MonoColorFilter.ColorDistance">
      <summary>
        <para>Specifies the tolerance level of the effect. </para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MonoColorFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MonoColorFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.MonoColorFilter.PreserveColor">
      <summary>
The color that will be preserved.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.MoonlightFilter">
      <summary>
Applies a moonlight effect to the image.<br /><img src="..\Images\MoonlightFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MoonlightFilter.#ctor">
      <summary>
Creates and initializes a new MoonlightFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MoonlightFilter.#ctor(System.Int32)">
      <summary>
Creates and initializes a new MoonlightFilter specifying the time of day.
</summary>
      <param name="clock">
Time of night in clock time [0, 23].
<para>The filter has effect only at night time, between 17 and 7. </para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MoonlightFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.MoonlightFilter.Clock">
      <summary>
Time of night in clock time [0, 23].
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MoonlightFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.MoonlightFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.NegativeFilter">
      <summary>
Converts the image to a negative.<br /><img src="..\Images\NegativeFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.NegativeFilter.#ctor">
      <summary>
Creates and initializes a new NegativeFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.NegativeFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.NegativeFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.NegativeFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.OilBrushSize">
      <summary>
The size of the brush used by the <cref see="OilyFilter" />.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.OilBrushSize.Small">
      <summary>Small brush size, low strength of the effect.</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.OilBrushSize.Medium">
      <summary>Medium brush size, medium strength of the effect.</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.OilBrushSize.Large">
      <summary>Large brush size, high strength of the effect.</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.OilyFilter">
      <summary>
Applies an oil-painting-like effect to the image.<br /><img src="..\Images\OilyFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.OilyFilter.#ctor">
      <summary>
Creates and initializes a new OilyFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.OilyFilter.#ctor(Lumia.Imaging.Artistic.OilBrushSize)">
      <summary>
Creates and initializes a new OilyFilter with the specified OilinessLevel.
</summary>
      <param name="oilBrushSize">
Specifies the strength of the effect, where higher oiliness results in higher distortion of the source image.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.OilyFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.OilyFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.OilyFilter.OilBrushSize">
      <summary>
Specifies the strength of the effect, where a bigger brush size producing wider strokes and bigger smudges.
Default value is Large.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.OilyFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.PaintFilter">
      <summary>
Applies a painting-like effect to the image.<br /><img src="..\Images\PaintFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PaintFilter.#ctor">
      <summary>
Creates and initializes a new PaintFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PaintFilter.#ctor(System.Int32)">
      <summary>
Creates and initializes a new PaintFilter with the specified level.
</summary>
      <param name="level">
Paint effect level. 
<para>Range [1, 4].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PaintFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.PaintFilter.Level">
      <summary>
        <para>Paint effect level. </para>
        <para>Range [1, 4].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PaintFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PaintFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.PosterizeFilter">
      <summary>
Applies a posterize effect, reducing the number of colors in the image.<br /><img src="..\Images\PosterizeFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PosterizeFilter.#ctor">
      <summary>
Creates and initializes a new PosterizeFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PosterizeFilter.#ctor(System.Int32)">
      <summary>
Creates and initializes a new PosterizeFilter with a specified color component count.
</summary>
      <param name="colorComponentValueCount">
The number of allowed values for each color component.
<para>Range [2, 16]</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PosterizeFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.PosterizeFilter.ColorComponentValueCount">
      <summary>
        <para>The number of allowed values for each color component.</para>
        <para>Range [2, 16]</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PosterizeFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.PosterizeFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SepiaFilter">
      <summary>
Applies a sepia tone to the image. <br /><img src="..\Images\SepiaFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SepiaFilter.#ctor">
      <summary>
Creates and initializes a new SepiaFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SepiaFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SepiaFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SepiaFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SketchFilter">
      <summary>
Produces the look of a sketched image.<br /><img src="..\Images\SketchFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SketchFilter.#ctor">
      <summary>
Creates and initializes a new SketchFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SketchFilter.#ctor(Lumia.Imaging.Artistic.SketchMode)">
      <summary>
Creates and initializes a new SketchFilter with a specified mode.
</summary>
      <param name="sketchMode">
The sketch mode.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SketchFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SketchFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SketchFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SketchFilter.SketchMode">
      <summary>
Sketch mode, grey or color.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SketchMode">
      <summary>
Modes for the sketch filter. 
</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.SketchMode.Gray">
      <summary>Sketch in grayscale.</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.SketchMode.Color">
      <summary>Sketch in color.</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SolarizeFilter">
      <summary>
Applies a solarize effect.<br /><img src="..\Images\SolarizeFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SolarizeFilter.#ctor">
      <summary>
Creates and initializes a new SolarizeFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SolarizeFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new SolarizeFilter with a specified threshold.
</summary>
      <param name="threshold">
The threshold level of the solarize effect.
Range [0.0, 1.0]
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SolarizeFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SolarizeFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SolarizeFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SolarizeFilter.Threshold">
      <summary>
        <para>The threshold level of the solarize effect.</para>
        <para>Range [0.0, 1.0]</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SplitToneFilter">
      <summary>
Applies a given color to pixels with luminance values within a specified range, while retaining some luminance information.<br /><img src="..\Images\SplitToneFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneFilter.#ctor">
      <summary>
Creates and initializes a new SplitToneFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneFilter.#ctor(Windows.Foundation.Collections.IVector{Lumia.Imaging.Artistic.SplitToneRange})">
      <summary>
Creates and initializes a new SplitToneFilter with a list of split tone ranges.
</summary>
      <param name="splitToneRanges">
List of SplitToneRanges.
<para>Any number of ranges can be provided. Overlaps and gaps between ranges will be handled by interpolating between known values.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SplitToneFilter.SplitToneRanges">
      <summary>
List of SplitToneRanges.
<remarks>
Any number of ranges can be provided. Overlaps and gaps between ranges will be handled by interpolating between known values.
</remarks></summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SplitToneRange">
      <summary>
Defines a luminance range and the color to be applied by the split tone filter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneRange.#ctor">
      <summary>
Creates and initializes a new SplitToneRange with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SplitToneRange.#ctor(System.Byte,System.Byte,Windows.UI.Color)">
      <summary>
Creates and initializes a new SplitToneRange with specified luminance and color values.
</summary>
      <param name="luminanceLow">
Defines the lower luminance value.
Range [0, 255]. Must be lower than LuminanceHigh.
</param>
      <param name="luminanceHigh">
Defines the higher luminance value.
Range [0, 255]. Must be higher than LuminanceLow.
</param>
      <param name="color">
Defines the RGB color to be set for the luminance.
Range [0, 255].
</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SplitToneRange.Color">
      <summary>
The RGB color to be set for the luminance.
Range [0, 255], for each color component.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SplitToneRange.LuminanceHigh">
      <summary>
        <para>The higher luminance value.</para>
        <para>Range [0, 255]. Must be higher than LuminanceLow.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SplitToneRange.LuminanceLow">
      <summary>
        <para>The lower luminance value.</para>
        <para>Range [0, 255]. Must be lower than LuminanceHigh.</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.SpotlightFilter">
      <summary>
Applies a spotlight effect to the image.<br /><img src="..\Images\SpotlightFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SpotlightFilter.#ctor">
      <summary>
Creates a new SpotlightFilter.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SpotlightFilter.#ctor(Windows.Foundation.Point,System.Int32,System.Double)">
      <summary>
Creates a new SpotlightFilter.
</summary>
      <param name="position">
The position of the center of spotlight circle.
</param>
      <param name="radius">
The radius of the spotlight circle in pixels. Current coordinates.
<para>Range [0, 64511].</para></param>
      <param name="transitionSize">
The size of the transition region given as a fraction of the radius.
<para>Range [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SpotlightFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SpotlightFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SpotlightFilter.Position">
      <summary>
The position of the center of spotlight circle.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.SpotlightFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SpotlightFilter.Radius">
      <summary>
        <para>The radius of the spotlight circle in pixels. Current coordinates.</para>
        <para>Range [0, 64511].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.SpotlightFilter.TransitionSize">
      <summary>
        <para>The size of the transition region given as a fraction of the radius.</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.StampFilter">
      <summary>
Applies a stamp-like effect, resulting in a black and white image.<br /><img src="..\Images\StampFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.StampFilter.#ctor">
      <summary>
Creates and initializes a new StampFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.StampFilter.#ctor(System.Int32,System.Double)">
      <summary>
Creates and initializes a new StampFilter with specified smoothness and threshold values.
</summary>
      <param name="smoothness">
The smoothness level.
<para>Range [0, 6].</para></param>
      <param name="threshold">
The threshold level.
<para>Range [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.StampFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.StampFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.StampFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.StampFilter.Smoothness">
      <summary>
        <para>Smoothness level. </para>
        <para>Range [0, 6].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.StampFilter.Threshold">
      <summary>
        <para>Threshold level. </para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.WarpEffect">
      <summary>
Effects for the warp filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Upnose">
      <summary>Upnose</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Twister">
      <summary>Twister</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.SmallNose">
      <summary>SmallNose</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.WideSmile">
      <summary>WideSmile</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Grit">
      <summary>Grit</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.BigFace">
      <summary>BigFace</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Professor">
      <summary>Professor</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Alien">
      <summary>Alien</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.BigNose">
      <summary>BigNose</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.AlienHybrid">
      <summary>AlienHybrid</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Gobbler">
      <summary>Gobbler</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Square">
      <summary>Square</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Sharpchin">
      <summary>Sharpchin</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.LongFaced">
      <summary>LongFaced</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.HappyFool">
      <summary>HappyFool</summary>
    </member>
    <member name="F:Lumia.Imaging.Artistic.WarpEffect.Insect">
      <summary>Insect</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.WarpFilter">
      <summary>
Applies a warp effect to an image or parts of an image.<br /><img src="..\Images\WarpFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.#ctor">
      <summary>
Creates and initializes a new WarpFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.#ctor(Lumia.Imaging.Artistic.WarpEffect,System.Double)">
      <summary>
Creates and initializes a new WarpFilter with specified warp effect and level.
</summary>
      <param name="effect">
The warp effect to apply. 
</param>
      <param name="level">
Amount of effect applied.
Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.
Default is 0.5.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.#ctor(Lumia.Imaging.Artistic.WarpEffect,System.Double,Lumia.Imaging.Rotation,Windows.Foundation.Collections.IVector{Windows.Foundation.Rect})">
      <summary>
Creates and initializes a new WarpFilter.
</summary>
      <param name="effect">
The warp effect to apply. 
</param>
      <param name="level">
Amount of effect applied.
Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.
Default is 0.5.
</param>
      <param name="rotation">
Rotation of the effect.
</param>
      <param name="regions">
Array of rectangles where warp is applied. 
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WarpFilter.Level">
      <summary>
        <para>Amount of effect applied.</para>
        <para>Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WarpFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WarpFilter.Regions">
      <summary>
List of rectangles where warp is applied. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WarpFilter.Rotation">
      <summary>
Rotation of the effect.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WarpFilter.WarpEffect">
      <summary>
The warp effect to apply. Default is WarpEffect::Upnose.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Artistic.WatercolorFilter">
      <summary>
Applies a watercolor effect to the image.<br /><img src="..\Images\WatercolorFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WatercolorFilter.#ctor">
      <summary>
Creates and initializes a new WatercolorFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WatercolorFilter.#ctor(System.Double,System.Double)">
      <summary>
Creates and initializes a new WatercolorFilter with specified intensities.
</summary>
      <param name="lightIntensity">
The light intensity. 
<para>Range [0.0, 1.0].</para></param>
      <param name="colorIntensity">
The color intensity.
<para>Range [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WatercolorFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WatercolorFilter.ColorIntensity">
      <summary>
        <para>Specifies color intensity. </para>
        <para>Range [0.0, 1.0]. </para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.WatercolorFilter.LightIntensity">
      <summary>
        <para>Specifies light intensity. </para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WatercolorFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.WatercolorFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Artistic.VignettingFilter">
      <summary>
Applies vignetting effect to the image.<br /><img src="..\Images\VignettingFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.#ctor">
      <summary>
Creates and initializes a new VignettingFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.#ctor(System.Double,Windows.UI.Color)">
      <summary>
Creates and initializes a new VignettingFilter with specified transition size and vignetting color.
</summary>
      <param name="transitionSize">
The size of the transition region as a fraction of the radius.
<para>Range [0.0, 15.0].</para></param>
      <param name="color">
The color to use for the vignetting effect.
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.#ctor(System.Double,Windows.UI.Color,Windows.Foundation.Rect)">
      <summary>
Creates and initializes a new VignettingFilter with specified transition size, vignetting color, and region of application.
</summary>
      <param name="transitionSize">
The size of the transition region as a fraction of the radius.
<para>Range [0.0, 15.0].</para></param>
      <param name="color">
The color to use for the vignetting effect.
</param>
      <param name="region">
A rectangle defining where the vignetting should be applied. 
</param>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Artistic.VignettingFilter.Color">
      <summary>
The color to use for the vignetting effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Artistic.VignettingFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Artistic.VignettingFilter.Region">
      <summary>
A rectangle defining where the vignetting should be applied. 
</summary>
    </member>
    <member name="P:Lumia.Imaging.Artistic.VignettingFilter.TransitionSize">
      <summary>
        <para>The size of the transition region as a fraction of the radius.</para>
        <para>Range [0.0, 15.0].</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Compositing.AlphaToGrayscaleFilter">
      <summary>
        <para>Copies the alpha channel in the image to the color channels, resulting in a grayscale representation of the alpha channel.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.AlphaToGrayscaleFilter.#ctor">
      <summary>
Creates a new AlphaToGrayscaleFilter with the default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.AlphaToGrayscaleFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.AlphaToGrayscaleFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.AlphaToGrayscaleFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Compositing.BlendEffect">
      <summary>
Blends a foreground image onto the current image, with optional masking, positioning, scaling and rotation.<br /><img src="..\Images\BlendEffect.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.#ctor">
      <summary>
Creates and initializes a new BlendEffect. Note that a <see cref="P:Lumia.Imaging.Compositing.BlendEffect.Source" /> and <see cref="P:Lumia.Imaging.Compositing.BlendEffect.ForegroundSource" /> must also be set.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new BlendEffect with specified background and foreground image sources.
</summary>
      <param name="backgroundSource">The background image source.</param>
      <param name="foregroundSource">The foreground image source.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction)">
      <summary>
Creates and initializes a new BlendEffect with specified background and foreground image sources and a blend function.
</summary>
      <param name="backgroundSource">The background image source.</param>
      <param name="foregroundSource">The foreground image source.</param>
      <param name="blendFunction">The blend function to use.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction,System.Double)">
      <summary>
Creates and initializes a new BlendEffect with specified background and foreground image sources, a blend function and a global alpha value.
</summary>
      <param name="backgroundSource">The background image source.</param>
      <param name="foregroundSource">The foreground image source.</param>
      <param name="blendFunction">The blend function to use.</param>
      <param name="globalAlpha">
The amount that the blend operation will affect the final result.
<para>Range [-128.0, 127.0], where 0.0 gives a result identical to the source image and 1.0 means the result of the blend operation is fully visible.</para>
See <see cref="P:Lumia.Imaging.Compositing.BlendEffect.BlendFunction" /> for specifics, as some blend functions ignore this value.
</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction,System.Double)">
      <summary>
Creates and initializes a new BlendEffect with specified background, foreground and mask image sources, a blend function and a global alpha value.
</summary>
      <param name="backgroundSource">The background image source.</param>
      <param name="foregroundSource">The foreground image source.</param>
      <param name="maskSource">
The mask image source. Determines how the <see cref="P:Lumia.Imaging.Compositing.BlendEffect.ForegroundSource" /> image is blended onto the background image.
</param>
      <param name="blendFunction">The blend function to use.</param>
      <param name="globalAlpha">
The amount that the blend operation will affect the final result.
<para>Range [-128.0, 127.0], where 0.0 gives a result identical to the source image and 1.0 means the result of the blend operation is fully visible.</para>
See <see cref="P:Lumia.Imaging.Compositing.BlendEffect.BlendFunction" /> for specifics, as some blend functions ignore this value.
</param>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.BlendFunction">
      <summary>
Blend function to use when blending the two images.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.ForegroundSource">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as the foreround image in the blend operation.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.GlobalAlpha">
      <summary>
The factor of interpolation between the result of the blend operation and the original image.
<para>Range [-128.0, 127.0], where 0.0 gives a result identical to the source image and 1.0 means the result of the blend operation is fully visible.</para><para>The result is calculated using the formula result = (1 - GlobalAlpha) * BackgroundSource + GlobalAlpha * ForegroundSource.
By using values outside of the [0.0, 1.0] range one can use extrapolation to achieve additional effects on the image (such as saturation or sharpening).</para></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.MaskSource">
      <summary>
An optional "mask" <see cref="T:Lumia.Imaging.IImageProvider" /> that determines per-pixel how much of the result of the blend operation is visible in the final result. If set to null, the alpha channel of the <see cref="P:Lumia.Imaging.Compositing.BlendEffect.ForegroundSource" /> is used instead.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as the background image in the blend operation.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.TargetArea">
      <summary>
A target area within the background image into which the foreground is image blended. Expressed in the unit coordinate space of the background image, 
i.e., the top left corner of the background image is at (0, 0), and the bottom right corner is at (1, 1).
<para><see cref="P:Lumia.Imaging.Compositing.BlendEffect.TargetOutputOption" /> controls how the foreground is fitted into the target area. By default, the foreground image is stretched to fit the target area.</para><para>If value equals Windows::Foundation::Rect::Empty, or either Width or Height is smaller than or equal to zero, 
the foreground will be stretched over whole background and aspect ratio will not be preserved.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.TargetAreaRotation">
      <summary>
The angle of counter clockwise rotation of <see cref="P:Lumia.Imaging.Compositing.BlendEffect.TargetArea" /> around its center, in degrees.
<para>If the <see cref="P:Lumia.Imaging.Compositing.BlendEffect.TargetArea" /> has not been set, or doesn't have a positive width and height, this property will be ignored.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendEffect.TargetOutputOption">
      <summary>
Controls how the foreground is fitted into the target area.
<para> If set to <see cref="F:Lumia.Imaging.OutputOption.Stretch" />, the foreground image will be resized to fit the target area exactly. 
If set to <see cref="F:Lumia.Imaging.OutputOption.PreserveAspectRatio" />, the foreground image will be blended into the target area centered and with the original aspect ratio intact. 
If set to <see cref="F:Lumia.Imaging.OutputOption.PreserveSize" />, the size portion of the target area will be ignored, and the foregound image will be blended in its original size.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Compositing.BlendFilter">
      <summary>
Blends an image source onto the image using a blend function.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.#ctor">
      <summary>
Creates and initializes a new BlendFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new BlendFilter with an image source.
</summary>
      <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction)">
      <summary>
Creates and initializes a new BlendFilter with an image source and a blend function.
</summary>
      <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
      <param name="blendFunction">
Blend function to use when blending the two images.
</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction,System.Double)">
      <summary>
Creates and initializes a new BlendFilter with an image source, a blend function, and a level.
</summary>
      <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
      <param name="blendFunction">
Blend function to use when blending the two images.
</param>
      <param name="level">
Amount that the blend operation will affect the final result.
<para>Range [0, 1], where 0 implies no effect and 1 means full effect.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,Lumia.Imaging.Compositing.BlendFunction,System.Double)">
      <summary>
Creates and initializes a new BlendFilter with an image source, a mask, a blend function, and a level.
</summary>
      <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
      <param name="maskSource">
A mask image that determines how the <see cref="P:Lumia.Imaging.Compositing.BlendFilter.ForegroundSource" /> image is blended onto the background image.
</param>
      <param name="blendFunction">
Blend function to use when blending the two images.
</param>
      <param name="level">
Amount that the blend operation will affect the final result.
<para>Range [0, 1], where 0 implies no effect and 1 means full effect.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.BlendFunction">
      <summary>
Blend function to use when blending the two images.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.ForegroundSource">
      <summary>
The foreground image that will be blended onto the background image.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.Level">
      <summary>
The factor of interpolation between the result of the blend operation and the original image.
<para>Range [0.0, 1.0], where 0.0 gives a result identical to the source image and 1.0 means the result of the blend operation is fully visible.</para></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.MaskSource">
      <summary>
An optional mask image that determines per-pixel how much of the result of the blend operation is visible in the final result. If set to null, the alpha channel of the <see cref="P:Lumia.Imaging.Compositing.BlendFilter.ForegroundSource" /> is used instead.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.BlendFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.TargetArea">
      <summary>
A target area within the background image into which the foreground is image blended. Expressed in the unit coordinate space of the background image, 
i.e., the top left corner of the background image is at (0, 0), and the bottom right corner is at (1, 1).
<para><see cref="P:Lumia.Imaging.Compositing.BlendFilter.TargetOutputOption" /> controls how the foreground is fitted into the target area. By default, the foreground image is stretched to fit the target area.</para><para>If value equals Windows::Foundation::Rect::Empty, or either Width or Height is smaller than or equal to zero, 
the foreground will be stretched over whole background and aspect ratio will not be preserved.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.TargetAreaRotation">
      <summary>
The angle of counter clockwise rotation of <see cref="P:Lumia.Imaging.Compositing.BlendFilter.TargetArea" /> around its center, in degrees.
<para>If the <see cref="P:Lumia.Imaging.Compositing.BlendFilter.TargetArea" /> has not been set, or doesn't have a positive width and height, this property will be ignored.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.BlendFilter.TargetOutputOption">
      <summary>
Controls how the foreground is fitted into the target area.
<para> If set to <see cref="F:Lumia.Imaging.OutputOption.Stretch" />, the foreground image will be resized to fit the target area exactly. 
If set to <see cref="F:Lumia.Imaging.OutputOption.PreserveAspectRatio" />, the foreground image will be blended into the target area centered and with the original aspect ratio intact. 
If set to <see cref="F:Lumia.Imaging.OutputOption.PreserveSize" />, the size portion of the target area will be ignored, and the foregound image will be blended in its original size.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Compositing.BlendFunction">
      <summary>
The blend function to use with the blend filter.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Normal">
      <summary>Normal "alpha" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Multiply">
      <summary>Multiplicative blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Add">
      <summary>Additive blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Lineardodge">
      <summary>Additive blending (alias of <see cref="F:Lumia.Imaging.Compositing.BlendFunction.Add" />).</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Color">
      <summary>Color replacement.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Colorburn">
      <summary>"Colorburn" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Colordodge">
      <summary>"Colordodge" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Screen">
      <summary>"Screen" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Overlay">
      <summary>"Overlay" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Softlight">
      <summary>"Softlight" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Hardlight">
      <summary>"Hardlight" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Darken">
      <summary>Darken by taking the minimum.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Lighten">
      <summary>Lightness by taking the maximum.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Hue">
      <summary>Hue replacement.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Exclusion">
      <summary>"Exclusion" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Difference">
      <summary>Absolute difference.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Linearlight">
      <summary>"Linearlight" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.Vividlight">
      <summary>"Vividlight" blending.</summary>
    </member>
    <member name="F:Lumia.Imaging.Compositing.BlendFunction.SignedDifference">
      <summary>Signed difference.</summary>
    </member>
    <member name="T:Lumia.Imaging.Compositing.ChromaKeyFilter">
      <summary>
Adds transparency to the pixels of a specific color.<br /><img src="..\Images\ChromaKeyFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.#ctor">
      <summary>
Creates and initializes a new ChromaKeyFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.#ctor(Windows.UI.Color)">
      <summary>
Creates and initializes a new ChromaKeyFilter with specified color.
</summary>
      <param name="color">
The chroma key color that will be made transparent.
<para>The alpha component will be ignored.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double)">
      <summary>
Creates and initializes a new ChromaKeyFilter with specified color and distance values.
</summary>
      <param name="color">
The chroma key color that will be made transparent.
<para>The alpha component will be ignored.</para></param>
      <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>Range [0.0, 1.0].</para><para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double,System.Double)">
      <summary>
Creates and initializes a new ChromaKeyFilter with specified specified color, distance and noiseSuppression values.
</summary>
      <param name="color">
The chroma key color that will be made transparent. 
<para>The alpha component will be ignored.</para></param>
      <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para><para>Range [0.0, 1.0].</para></param>
      <param name="noiseSuppression">
Specifies the noise suppression level.
<para>If the noise suppression level is low, only a small amount of noise will be suppressed.</para><para>Range [0.0, 1.0].</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double,System.Double,System.Boolean)">
      <summary>
Creates and initializes a new ChromaKeyFilter with specified settings.
</summary>
      <param name="color">
The chroma key color that will be made transparent. 
<para>The alpha component will be ignored.</para></param>
      <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para><para>Range [0.0, 1.0].</para></param>
      <param name="noiseSuppression">
Specifies the noise suppression level.
<para>If the noise suppression level is low, only a small amount of noise will be suppressed.</para><para>Range [0.0, 1.0].</para></param>
      <param name="invertAlpha">
Controls how the alpha channel is generated.
<para>If false, full transparency in the resulting alpha channel is the value 0.</para><para>If true, full transparency in the resulting alpha channel is the value 255.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ChromaKeyFilter.Color">
      <summary>
The chroma key color that will be made transparent.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ChromaKeyFilter.ColorDistance">
      <summary>
        <para>Specifies how much variation around the chroma key color will be considered for transparency.</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ChromaKeyFilter.InvertAlpha">
      <summary>
Controls how the alpha channel is generated.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ChromaKeyFilter.NoiseSuppression">
      <summary>
        <para>Specifies the noise suppression level</para>
        <para>Range [0.0, 1.0].</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ChromaKeyFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Compositing.ExtractedObjectImageSource">
      <summary>
An image source that represents an extracted sub-image from the <see cref="T:Lumia.Imaging.Compositing.ObjectExtractor" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ExtractedObjectImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ExtractedObjectImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ExtractedObjectImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ExtractedObjectImageSource.ObjectRectangle">
      <summary>
        <para>The bounding rectangle of the extracted object within the original source image.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ExtractedObjectImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="T:Lumia.Imaging.Compositing.ImageFusionFilter">
      <summary>
Inserts an image on the current image with a separately defined alpha mask.<br /><img src="..\Images\ImageFusionFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ImageFusionFilter.#ctor">
      <summary>
Creates and initializes a new ImageFusionFilter with default settings.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ImageFusionFilter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider,System.Boolean)">
      <summary>
Creates and initializes a new ImageFusionFilter with specified sources and settings.
</summary>
      <param name="fusionImageSource">
Source for the image to be merged with the current image.
</param>
      <param name="maskImageSource">
Source for the image containing the alpha mask. 
<para>The mask is assumed to be a gray scale image. If the image is 
of a richer color format it will first automatically be converted into grayscale and any alpha channel 
will be ignored.</para></param>
      <param name="invertAlpha">
The invert alpha.
</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ImageFusionFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ImageFusionFilter.FusionImageSource">
      <summary>
An image to be merged with the current image.
</summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ImageFusionFilter.InvertAlpha">
      <summary>
Controls how the alpha channel fades the fusion image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ImageFusionFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ImageFusionFilter.MaskImageSource">
      <summary>
A raw image containing the alpha mask. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ImageFusionFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter">
      <summary>
        <para>Segments the source image into foreground and background guided by user provided annotations.
The output is a black and white mask where white areas represent the foreground and black areas represent the background.</para>
        <img src="..\Images\InteractiveForegroundSegmenter.jpg" />
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.#ctor">
      <summary>
        <para>Creates and initializes a new empty InteractiveForegroundSegmenter.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.#ctor(Lumia.Imaging.IImageProvider)">
      <summary>
        <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.#ctor(Lumia.Imaging.IImageProvider,Windows.UI.Color,Windows.UI.Color)">
      <summary>
        <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source, foreground color, and background color.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="foregroundColor">The color that represents the foreground annotations on AnnotationsSource.</param>
      <param name="backgroundColor">The color that represents the background annotations on AnnotationsSource.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.#ctor(Lumia.Imaging.IImageProvider,Windows.UI.Color,Windows.UI.Color,Lumia.Imaging.IImageProvider)">
      <summary>
        <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source, annotations source, foreground color, and background color.</para>
      </summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="foregroundColor">The color that represents the foreground annotations on AnnotationsSource.</param>
      <param name="backgroundColor">The color that represents the background annotations on AnnotationsSource.</param>
      <param name="annotationsSource">An image containing the user annotations for foreground and background. Must contain at least one pixel in foreground color, and one pixel in background color.</param>
    </member>
    <member name="P:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.AnnotationsSource">
      <summary>
        <para>An image containing the user annotations for the foreground and the background. Must contain at least one pixel in foreground color and one pixel in background color.</para>
        <para>The segmenter will only consider pixels of foreground color or background color, any other color will be treated as unknown.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.BackgroundColor">
      <summary>
        <para>The color that represents the background annotations in the AnnotationsSource image.</para>
        <para>Default value is blue (A = 255, R = 0, G = 0, B = 255).</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.ForegroundColor">
      <summary>
        <para>The color that represents the foreground annotations in the AnnotationsSource image.</para>
        <para>Default value is red (R = 255, G = 0, B = 0).</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.Quality">
      <summary>
        <para>Quality of the result.</para>
        <para>Changing quality of the effect affects time and memory consumption of the effect by adjusting the working size. The working size of the effect is dependent on the Source's size, so a lower Quality value might be necessary to avoid an OutOfMemoryException.</para>
        <para>Range [0.0, 1.0]. Default value is 1.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Compositing.InteractiveForegroundSegmenter.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Compositing.ObjectExtractor">
      <summary>
Extracts one or more objects defined by a mask from an image.<br /><img src="..\Images\ObjectExtractor.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.#ctor">
      <summary>
Creates and initializes a new ObjectExtractor.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new ObjectExtractor that uses the provided image source.
</summary>
      <param name="imageSource">The source image containing objects to extract.</param>
      <param name="maskSource">The mask describing objects to extract.</param>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.ExtractObjectsAsync">
      <summary>
Extracts sub-image objects using the current settings.
</summary>
      <returns>The extracted objects as image providers.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ObjectExtractor.MaskSource">
      <summary>
        <para>The mask describing objects to extract.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Compositing.ObjectExtractor.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Compositing.ObjectExtractor.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.CustomEffectAdapter">
      <summary>
An adapter that allows the creation of a user implemented custom effect.  
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Custom.ICustomEffect)">
      <summary>
Creates and initializes a new <see cref="T:Lumia.Imaging.Custom.CustomEffectAdapter" /> with a reference to the user-implemented outer <see cref="T:Lumia.Imaging.IImageProvider" /> and the user-implemented <see cref="T:Lumia.Imaging.Custom.ICustomEffect" />.
</summary>
      <param name="outerImageProvider">The user-defined object that owns the adapter. A weak reference to this object will be kept.</param>
      <param name="customEffect">An <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> implementation. A weak reference to this object will be kept.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Custom.ICustomEffect,Lumia.Imaging.IImageProvider)">
      <summary>
Creates and initializes a new <see cref="T:Lumia.Imaging.Custom.CustomEffectAdapter" /> with a reference to the user-implemented outer <see cref="T:Lumia.Imaging.IImageProvider" />, the user-implemented <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> and an initial image source.
</summary>
      <param name="outerImageProvider">The user-defined class that owns the adapter. A weak reference to this object will be kept.</param>
      <param name="customEffect">An <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> implementation. A weak reference to this object will be kept.</param>
      <param name="imageSource">An image source for the effect.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomEffectAdapter.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.CustomEffectAdapter.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.CustomFilterAdapter">
      <summary>
An adapter that allows a user-defined implementation of <see cref="T:Lumia.Imaging.Custom.ICustomFilter2" /> to be used as a block-based <see cref="T:Lumia.Imaging.IFilter" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomFilterAdapter.#ctor(Lumia.Imaging.Custom.ICustomFilter)">
      <summary>
This overload is deprecated. Create the adapter passing an implementation of <see cref="T:Lumia.Imaging.Custom.ICustomFilter2" /> instead.
</summary>
      <param name="customFilter">
This overload is deprecated. Create the adapter passing an implementation of <see cref="T:Lumia.Imaging.Custom.ICustomFilter2" /> instead.
</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomFilterAdapter.#ctor(Lumia.Imaging.Custom.ICustomFilter2)">
      <summary>
Creates and initializes a new adapter with a user-defined custom filter object.
</summary>
      <param name="customFilter">
A custom filter object. A weak reference to this object will be kept by the adapter.
</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomFilterAdapter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Custom.CustomFilterAdapter.BlockMargins">
      <summary>
Size of the margins needed if the filter wants to sample neighboring pixels around a source pixel. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomFilterAdapter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomFilterAdapter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.CustomFilterAdapter.WrapBorders">
      <summary>Controls whether to wrap the pixels along the borders of the image if non-zero <see cref="P:Lumia.Imaging.Custom.CustomFilterAdapter.BlockMargins" /> are used.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.CustomFilterBlockParameters">
      <summary>
Specifies an image block to be processed by an <see cref="T:Lumia.Imaging.Custom.ICustomFilter" />.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.Height">
      <summary>The height in pixels of the rectangle to process.</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.SourcePitch">
      <summary>The width in bytes of an entire row of source pixels, including the block margins.</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.SourceStartIndex">
      <summary>Byte index in the source buffer where the source rectangle starts.</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.Width">
      <summary>The width in pixels of the rectangle to process. Also the pitch of the target buffer.</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.X">
      <summary>The X coordinate of the top-left pixel of the block within the entire image.</summary>
    </member>
    <member name="F:Lumia.Imaging.Custom.CustomFilterBlockParameters.Y">
      <summary>The Y coordinate of the top-left pixel of the block within the entire image.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.CustomImageSourceAdapter">
      <summary>
An adapter that allows the creation of a user implemented custom image source.  
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Custom.ICustomImageSource,Windows.Foundation.Size)">
      <summary>
Create and initialize a CustomImageSourceAdapter which will be coupled to the specified ICustomImageSource.
</summary>
      <param name="outerImageProvider">The user-defined class that owns the adapter. A weak reference to this object will be kept.</param>
      <param name="customImageSource">An <see cref="T:Lumia.Imaging.Custom.ICustomImageSource" /> implementation. A weak reference to this object will be kept.</param>
      <param name="size">The size of the image.</param>
    </member>
    <member name="P:Lumia.Imaging.Custom.CustomImageSourceAdapter.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.CustomImageSourceAdapter.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.CustomImageSourceAdapter.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.DelegatingEffect">
      <summary>
(Note: this class is deprecated, use CustomEffectAdapter instead.) Use with an implementation of <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> to create an effect that can be used in the rendering pipeline.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.#ctor(Lumia.Imaging.Custom.ICustomEffect)">
      <summary>
Creates and initializes a new DelegatingEffect which will delegate to the provided <see cref="T:Lumia.Imaging.Custom.ICustomEffect" />.
</summary>
      <param name="customEffect">An <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> implementation.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Custom.ICustomEffect)">
      <summary>
Creates and initializes a new DelegatingEffect that uses the provided image source and will delegate to the provided <see cref="T:Lumia.Imaging.Custom.ICustomEffect" />.
</summary>
      <param name="imageSource">An image source for the effect.</param>
      <param name="customEffect">An <see cref="T:Lumia.Imaging.Custom.ICustomEffect" /> implementation.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingEffect.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.DelegatingEffect.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.DelegatingFilter">
      <summary>
(Note: this class is deprecated, use CustomFilterAdapter instead.) Use with an implementation of <see cref="T:Lumia.Imaging.Custom.ICustomFilter" /> to create a filter that can be used with the <see cref="T:Lumia.Imaging.Custom.FilterEffect" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingFilter.#ctor(Lumia.Imaging.Custom.ICustomFilter)">
      <summary>
Creates and initializes a new adapter with the provided <see cref="T:Lumia.Imaging.Custom.ICustomFilter" />.
</summary>
      <param name="customFilter">An <see cref="T:Lumia.Imaging.Custom.ICustomFilter" /> implementation.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Custom.DelegatingFilter.BlockMargins">
      <summary>The margins in terms of neighboring source pixels required when applying the filter to a target pixel.</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.DelegatingFilter.WrapBorders">
      <summary>Whether to wrap the pixels along the borders of the image if BlockMargins are in use.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.DelegatingImageSource">
      <summary>
(Note: this class is deprecated, use CustomImageSourceAdapter instead.) An <see cref="T:Lumia.Imaging.IImageProvider" /> that couples to a user implementation of <see cref="T:Lumia.Imaging.Custom.ICustomImageSource" /> object, which can provide an image and manage any buffers needed.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.#ctor(Windows.Foundation.Size,Lumia.Imaging.Custom.ICustomImageSource)">
      <summary>
Create and initialize a DelegatingImageSource which will be coupled to the specified ICustomImageSource.
</summary>
      <param name="size">The size of the image.</param>
      <param name="customImageSource">An <see cref="T:Lumia.Imaging.Custom.ICustomImageSource" /> implementation.</param>
    </member>
    <member name="P:Lumia.Imaging.Custom.DelegatingImageSource.CanSetSize">
      <summary>If true, the <see cref="P:Lumia.Imaging.IImageSize.Size" /> property can be set.</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.Invalidate">
      <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.DelegatingImageSource.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.DelegatingImageSource.Size">
      <summary>The inherent size of the image.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.EffectGroupAdapter">
      <summary>
An adapter that allows the creation of a user implemented effect group (a sub-graph of other effects).  
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.EffectGroupAdapter.#ctor(Lumia.Imaging.IImageProvider,Lumia.Imaging.Custom.IEffectGroup)">
      <summary>
Creates and initializes an EffectGroupAdapter.
</summary>
      <param name="outerImageProvider">The user defined class representing the outer identity of the effect group.</param>
      <param name="effectGroup">An implementation of <see cref="T:Lumia.Imaging.Custom.IEffectGroup" />, which may be the same object as <paramref name="outerImageProvider" />.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.EffectGroupAdapter.GetBitmapAsync(Lumia.Imaging.Bitmap,Lumia.Imaging.OutputOption)">
      <summary>Creates a <see cref="T:Lumia.Imaging.Bitmap" /> from the contents of the image provider.</summary>
      <param name="bitmap">An input <see cref="T:Lumia.Imaging.Bitmap" /> to fill. If null, a <see cref="T:Lumia.Imaging.Bitmap" /> will be created and returned.</param>
      <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the <see cref="T:Lumia.Imaging.Bitmap" /> passed into this method.</param>
      <returns>An async result with the <see cref="T:Lumia.Imaging.Bitmap" />.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.EffectGroupAdapter.GetInfoAsync">
      <summary>Asynchronously gets information about this image provider.</summary>
      <returns>An async result with a <see cref="T:Lumia.Imaging.ImageProviderInfo" /> object containing information such as image size.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.EffectGroupAdapter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>For internal use. Locks the image provider for the purpose of rendering.</summary>
      <param name="renderRequest">The <see cref="T:Lumia.Imaging.RenderRequest" /> with which to lock.</param>
      <returns>True if the <paramref name="renderRequest" /> owns the lock. False if the lock was already taken.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.EffectGroupAdapter.PreloadAsync">
      <summary>Perform expensive loading operations, typically involving I/O, needed to render or get info from this image provider.</summary>
      <returns>An async action that completes when the loading is done.</returns>
    </member>
    <member name="P:Lumia.Imaging.Custom.EffectGroupAdapter.Source">
      <summary>
The <see cref="T:Lumia.Imaging.IImageProvider" /> that will be used as source.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomEffect">
      <summary>
Interface for the user-implemented part of a custom bitmap-based effect based on <see cref="T:Lumia.Imaging.Custom.CustomEffectAdapter" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomEffect.LoadAsync">
      <summary>Load/prepare for rendering.</summary>
      <returns>An async action representing the load operation.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomEffect.Process(Windows.Foundation.Rect)">
      <summary>Called when the image should be processed.</summary>
      <param name="rect">The part of the image to process.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomEffect.ProvideSourceBuffer(Windows.Foundation.Size)">
      <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
      <param name="imageSize">The size of the image.</param>
      <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomEffect.ProvideTargetBuffer(Windows.Foundation.Size)">
      <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
      <param name="imageSize">The size of the image.</param>
      <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomFilter">
      <summary>
Interface for the user-implemented part of a custom block-based filter based on <see cref="T:Lumia.Imaging.Custom.CustomFilterAdapter" />.
Implementing this interface is not recommended. See <see cref="T:Lumia.Imaging.Custom.ICustomFilter2" /> instead.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilter.BeginProcessing(Lumia.Imaging.Custom.ICustomFilterRequest)">
      <summary>Called when the block-based rendering is about to begin, or new source/target buffers are requested.</summary>
      <param name="request">Information about the processing operation.</param>
      <returns>Acknowledgement in response, or null if the custom filter cannot perform the requested operation. Returning null will cause the overall rendering operation to throw an exception.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilter.PrepareAsync">
      <summary>Load/prepare for processing.</summary>
      <returns>An async action representing the preparation work. Return null if no preparation work is required.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilter.ProcessBlock(Lumia.Imaging.Custom.CustomFilterBlockParameters)">
      <summary>Called when a rectangular block in the image should be processed.</summary>
      <param name="blockParameters">Information about the block that should be processed.</param>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomFilter2">
      <summary>
Interface for the user-implemented part of a custom block-based filter based on <see cref="T:Lumia.Imaging.Custom.CustomFilterAdapter" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilter2.CreateSession">
      <summary>Create a new filter session.</summary>
      <returns>A new filter session that can be rendered concurrently with other sessions created by this filter.</returns>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomFilterRequest">
      <summary>Requests the custom filter to prepare for an upcoming image processing operation.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterRequest.ImageSize">
      <summary>The size of the whole image.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterRequest.PreferredColorMode">
      <summary>The color mode preferred by the processing operation. This or an alternate color mode can be returned in the <see cref="T:Lumia.Imaging.Custom.ICustomFilterResponse" />.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterRequest.SourceBufferLength">
      <summary>The required length of the source buffer to return in the <see cref="T:Lumia.Imaging.Custom.ICustomFilterResponse" />.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterRequest.TargetBufferLength">
      <summary>The required length of the target buffer to return in the <see cref="T:Lumia.Imaging.Custom.ICustomFilterResponse" />.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomFilterResponse">
      <summary>Response returned by a custom filter to match an <see cref="T:Lumia.Imaging.Custom.ICustomFilterRequest" />.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterResponse.ColorMode">
      <summary>The accepted color mode, either ColorMode::Ayuv4444 or ColorMode::Bgra8888.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterResponse.SourceBuffer">
      <summary>The source buffer. Must have a capacity of at least <see cref="P:Lumia.Imaging.Custom.ICustomFilterRequest.SourceBufferLength" /> bytes.</summary>
    </member>
    <member name="P:Lumia.Imaging.Custom.ICustomFilterResponse.TargetBuffer">
      <summary>The target buffer. Must have a capacity of at least <see cref="P:Lumia.Imaging.Custom.ICustomFilterRequest.TargetBufferLength" /> bytes.</summary>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomFilterSession">
      <summary>
Interface for a user-defined custom filter session, used by <see cref="T:Lumia.Imaging.Custom.CustomFilterAdapter" /> when processing the image.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilterSession.BeginProcessing(Lumia.Imaging.Custom.ICustomFilterRequest)">
      <summary>Called when the block-based rendering is about to begin, or new source/target buffers are requested.</summary>
      <param name="request">Information about the processing operation.</param>
      <returns>Acknowledgement in response, or null if the custom filter cannot perform the requested operation. Returning null will cause the overall rendering operation to throw an exception.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomFilterSession.ProcessBlock(Lumia.Imaging.Custom.CustomFilterBlockParameters)">
      <summary>Called when a rectangular block in the image should be processed.</summary>
      <param name="blockParameters">Information about the block that should be processed.</param>
    </member>
    <member name="T:Lumia.Imaging.Custom.ICustomImageSource">
      <summary>
Interface for the user-implemented part of a custom bitmap-based image source based on <see cref="T:Lumia.Imaging.Custom.CustomImageSourceAdapter" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomImageSource.LoadAsync">
      <summary>Load/prepare for rendering.</summary>
      <returns>An async action representing the load operation.</returns>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomImageSource.Process(Windows.Foundation.Rect)">
      <summary>Called when the image should be generated.</summary>
      <param name="rect">The part of the image to generate.</param>
    </member>
    <member name="M:Lumia.Imaging.Custom.ICustomImageSource.ProvideBuffer(Windows.Foundation.Size)">
      <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
      <param name="imageSize">The size of the image.</param>
      <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
    </member>
    <member name="T:Lumia.Imaging.Custom.IEffectGroup">
      <summary>
Interface for the user-implemented part of an effect group based on <see cref="T:Lumia.Imaging.Custom.EffectGroupAdapter" />.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Custom.IEffectGroup.PrepareGroup(Lumia.Imaging.IImageProvider)">
      <summary>
Prepare the internal structure of the effect group prior to loading and rendering.
</summary>
      <param name="groupSource">
The source <see cref="T:Lumia.Imaging.IImageProvider" />.
</param>
      <returns>
The result <see cref="T:Lumia.Imaging.IImageProvider" /> of the effect group. 
Note that only a weak reference is made by the caller. 
The implementor of this interface should hold a strong reference.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Transforms.AlignmentQuality">
      <summary>
Quality of the alignment produced by the  <see cref="T:Lumia.Imaging.Transforms.ImageAligner" />.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.AlignmentQuality.High">
      <summary>High</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.AlignmentQuality.Medium">
      <summary>Medium</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.AlignmentQuality.Low">
      <summary>Low</summary>
    </member>
    <member name="T:Lumia.Imaging.Transforms.CropFilter">
      <summary>
Crops the image to a specified region.<br /><img src="..\Images\CropFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.CropFilter.#ctor">
      <summary>
Creates and initializes a new CropFilter with a default crop area.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.CropFilter.#ctor(Windows.Foundation.Rect)">
      <summary>
Creates and initializes a new CropFilter with a specified crop area.
</summary>
      <param name="cropArea">
The crop area.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters. 
The crop area can only be within the image area, otherwise ArgumentException will be thrown when applying the filter.</para><para>The crop area has to be within the image area, range x: [0, min(16383, image width)] y: [0, min(16383, image height)].</para><para>If the crop area has a width or height of 0, this filter will not be applied.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.CropFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Transforms.CropFilter.CropArea">
      <summary>
Rectangle describing the crop area. 
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.CropFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Transforms.CropFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Transforms.FlipFilter">
      <summary>
Flips the image horizontally and/or vertically.<br /><img src="..\Images\FlipFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.FlipFilter.#ctor">
      <summary>
Creates and initializes a new FlipFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.FlipFilter.#ctor(Lumia.Imaging.Transforms.FlipMode)">
      <summary>
Creates and initializes a new FlipFilter with a specified flip mode.
</summary>
      <param name="flipMode">
The flip mode.
</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.FlipFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="P:Lumia.Imaging.Transforms.FlipFilter.FlipMode">
      <summary>
Flip mode, around horizontal, vertical or both axes.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.FlipFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Transforms.FlipFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="T:Lumia.Imaging.Transforms.FlipMode">
      <summary>
Flip modes employed by the flip filter. An image can be flipped around its horizontal or vertical
axis as well as around both axes at once.
</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.FlipMode.None">
      <summary>Do not flip the image</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.FlipMode.Vertical">
      <summary>Flip the image vertically</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.FlipMode.Horizontal">
      <summary>Flip the image horizontally</summary>
    </member>
    <member name="F:Lumia.Imaging.Transforms.FlipMode.Both">
      <summary>Flip the image vertically and horizontally</summary>
    </member>
    <member name="T:Lumia.Imaging.Transforms.ImageAligner">
      <summary>
Aligns a series of images that differ by small movements.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ImageAligner.#ctor">
      <summary>
Creates a new image aligner with default settings.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView{Lumia.Imaging.IImageProvider})">
      <summary>
Creates a new image aligner with the specified sources.
</summary>
      <param name="sources">
        <para>A list of images to align.</para>
        <para>At least two image and a maximum of 40 sources must be provided.</para>
        <para>All image sources must have the same size.</para>
      </param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView{Lumia.Imaging.IImageProvider},Lumia.Imaging.IImageProvider)">
      <summary>
Creates a new image aligner with the specified sources and reference source.
</summary>
      <param name="sources">
        <para>A list of images to align.</para>
        <para>At least two image and a maximum of 40 sources must be provided.</para>
        <para>All image sources must have the same size.</para>
      </param>
      <param name="referenceSource">
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Lumia.Imaging.Transforms.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView{Lumia.Imaging.IImageProvider},Lumia.Imaging.IImageProvider,System.Int32)">
      <summary>
Creates a new image aligner with the specified sources, reference source, and bitmap cache size.
</summary>
      <param name="sources">
        <para>A list of images to align.</para>
        <para>At least two image and a maximum of 40 sources must be provided.</para>
        <para>All image sources must have the same size.</para>
      </param>
      <param name="referenceSource">
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Lumia.Imaging.Transforms.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</param>
      <param name="bitmapCacheSize">
The maximum number of bitmaps that are cached internally during processing.
<para>If set to 0, the number of cached bitmaps will not be limited.</para></param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ImageAligner.AlignAsync">
      <summary>
Aligns the images in <see cref="P:Lumia.Imaging.Transforms.ImageAligner.Sources" />.
</summary>
      <returns>An operation representing the resulting aligned image sources. 
If alignment failed for a source, a null reference will be inserted in that position in the list.</returns>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ImageAligner.BitmapCacheSize">
      <summary>
The maximum number of bitmaps that are cached internally during processing.
<para>If set to 0, the number of cached bitmaps will not be limited.</para><para>Default is 2.</para></summary>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ImageAligner.Quality">
      <summary>
        <para>Quality of the alignment. Setting a lower quality will make the effect run faster, at the expense of the quality of the result.</para>
        <para>Default value is High.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ImageAligner.ReferenceSource">
      <summary>
        <para>
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Lumia.Imaging.Transforms.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</para>
        <para>Selecting a different reference source will invalidate the alignment, and <see cref="M:Lumia.Imaging.Transforms.ImageAligner.AlignAsync" /> must be called (again) before attempting to render an aligned source. Failing that an exception will be thrown during rendering.</para>
        <para>
If set to null, will default to the middle element in the <see cref="P:Lumia.Imaging.Transforms.ImageAligner.Sources" /> list.
</para>
        <para>
Default is null.
</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ImageAligner.Sources">
      <summary>
        <para>A list of images to align.</para>
        <para>At least two image and a maximum of 40 sources must be provided.</para>
        <para>All image sources must have the same size, otherwise an exception will be thrown when calling <see cref="M:Lumia.Imaging.Transforms.ImageAligner.AlignAsync" />.</para>
        <para>Any change to the Sources property will invalidate the alignment, and <see cref="M:Lumia.Imaging.Transforms.ImageAligner.AlignAsync" /> must be called (again) before attempting to render an aligned source. Failing that an exception will be thrown during rendering.</para>
      </summary>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ImageAligner.UseColorCorrection">
      <summary>
        <para>If color correction should be used or not.</para>
        <para>Default value is True.</para>
      </summary>
    </member>
    <member name="T:Lumia.Imaging.Transforms.ReframingFilter">
      <summary>
Reframes the image to comprise a rectangle of any size inside or outside the current image.
Reframing is done by specifying a reframing area by position and size, an angle of clockwise rotation, 
and a pivot point around which the reframing area is rotated.<br /><img src="..\Images\ReframingFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.#ctor">
      <summary>
Creates and initializes a new ReframingFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.#ctor(Windows.Foundation.Rect,System.Double)">
      <summary>
Creates and initializes a new ReframingFilter with a default pivot point and specified reframing area and angle of rotation.
</summary>
      <param name="reframingArea">
The position and size of the reframing area.
If the reframing area has a width or height of 0, this filter will not be applied.
<para>When reframing without rotation, width and height must be in the range [0, 16383].</para><para>When reframing with rotation, width and height must be in the range [0, X], where X is in the range [5792, 16383] depending on the reframing area and the source image size.
An exception will be thrown during rendering if this limit is exceeded.</para><para>The ReframingFilter supports reframing to areas larger than the source or outside of source's bounds.
Areas outside the original image are rendered as transparent black pixels, ARGB(0, 0, 0, 0).</para></param>
      <param name="angle">
Rotation of the reframing area clockwise around the pivot point in degrees.
</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.#ctor(Windows.Foundation.Rect,System.Double,Windows.Foundation.Point)">
      <summary>
Creates and initializes a new ReframingFilter with specified reframing area, angle of rotation, and pivot point.
</summary>
      <param name="reframingArea">
The position and size of the reframing area.
If the reframing area has a width or height of 0, this filter will not be applied.
<para>When reframing without rotation, width and height must be in the range [0, 16383].</para><para>When reframing with rotation, width and height must be in the range [0, X], where X is in the range [5792, 16383] depending on the reframing area and the source image size.
An exception will be thrown during rendering if this limit is exceeded.</para><para>The ReframingFilter supports reframing to areas larger than the source or outside of source's bounds.
Areas outside the original image are rendered as transparent black pixels, ARGB(0, 0, 0, 0).</para></param>
      <param name="angle">
Rotation of the reframing area clockwise around the pivot point in degrees.
</param>
      <param name="pivotPoint">
The point around which rotation is done. Expressed in the unit coordinate space of the reframing area,
i.e., the top left corner of the reframing area is at (0.0), and the bottom right corner is at (1, 1).
</param>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ReframingFilter.Angle">
      <summary>
Rotation of the reframing area clockwise around its top-left corner in degrees.
<remarks><para>Default is 0.</para></remarks></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ReframingFilter.PivotPoint">
      <summary>
The point around which rotation is done. Expressed in the unit coordinate space of the reframing area,
i.e., the top left corner of the reframing area is at (0.0), and the bottom right corner is at (1, 1).
<para>Default is (0.5, 0.5), the center of the reframing area.</para></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ReframingFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ReframingFilter.ReframingArea">
      <summary>
Rectangle describing the position and size of the reframing area.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
    </member>
    <member name="T:Lumia.Imaging.Transforms.RotationFilter">
      <summary>
Rotates the image around its center in a clock-wise direction. <br /><img src="..\Images\RotationFilter.jpg" /></summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.RotationFilter.#ctor">
      <summary>
Creates and initializes a new RotationFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.RotationFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new RotationFilter with a specified angle.
</summary>
      <param name="rotationAngle">
The rotation angle in degrees.
</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.RotationFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.RotationFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Transforms.RotationFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Transforms.RotationFilter.RotationAngle">
      <summary>
Rotation angle in degrees.
</summary>
    </member>
    <member name="T:Lumia.Imaging.Transforms.ScaleFilter">
      <summary>
        <para>Scales the image by a given factor, while preserving the aspect ratio.</para>
      </summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ScaleFilter.#ctor">
      <summary>
Creates and initializes a new ScaleFilter with default values.
</summary>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ScaleFilter.#ctor(System.Double)">
      <summary>
Creates and initializes a new ScaleFilter with the specified scale factor.
</summary>
      <param name="scale">
The factor with which the image will be scaled.
</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ScaleFilter.Apply(Lumia.Imaging.IFilterEffect)">
      <summary>
Internal framework method.
</summary>
      <param name="filterEffect">This parameter is passed internally.</param>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ScaleFilter.Lock(Lumia.Imaging.RenderRequest)">
      <summary>
Internal framework method.
</summary>
      <param name="renderRequest">This parameter is passed internally.</param>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="M:Lumia.Imaging.Transforms.ScaleFilter.PrepareAsync">
      <summary>
Internal framework method.
</summary>
      <returns>
The returned value is for internal use.
</returns>
    </member>
    <member name="P:Lumia.Imaging.Transforms.ScaleFilter.Scale">
      <summary>
The factor with which the image will be scaled.
Must be larger than zero. Default is 1.0.
</summary>
    </member>
  </members>
</doc>