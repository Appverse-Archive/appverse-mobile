

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.00.0603 */
/* at Mon Sep 14 13:19:26 2015
 */
/* Compiler settings for C:\Users\grfxaltb\AppData\Local\Temp\2\Canvas.abi.idl-5f65e64a:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 8.00.0603 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __Microsoft2EGraphics2ECanvas_h__
#define __Microsoft2EGraphics2ECanvas_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#if defined(__cplusplus)
#if defined(__MIDL_USE_C_ENUM)
#define MIDL_ENUM enum
#else
#define MIDL_ENUM enum class
#endif
#endif


/* Forward Declarations */ 

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        interface IDirect3DDevice;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        interface IDirect3DSurface;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGraphicsEffectSource;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGraphicsEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasImage;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreator;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreatorWithDpi;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDevice;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrush;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmap;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__ */


#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__ */


#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTarget;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasStrokeStyle;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormat;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormatStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayout;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayoutFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilder;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilderFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathReceiver;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometry;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometryStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometry;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometryStatics;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasActiveLayer;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDrawingSession;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainStatics;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChain;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandListFactory;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandList;
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgsFactory;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgs;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgsFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasSwapChainPanel;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSourceFactory;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSource;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasRegionsInvalidatedEventArgs;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__ */


#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualControl;
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IArithmeticCompositeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAtlasEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBlendEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBorderEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBrightnessEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorMatrixEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorSourceEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__ */


#ifndef ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#endif 	/* ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICompositeEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IConvolveMatrixEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICropEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDirectionalBlurEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDiscreteTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDisplacementMapEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDpiCompensationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGammaTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGaussianBlurEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHueRotationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILinearTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILuminanceToAlphaEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IMorphologyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityMetadataEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPremultiplyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISaturationEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IScaleEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IShadowEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotDiffuseEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotSpecularEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITableTransferEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITileEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform2DEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform3DEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITurbulenceEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__ */


#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;

#ifdef __cplusplus
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IUnPremultiplyEffect;
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

#endif /* __cplusplus */

#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__ */


/* header files for imported files */
#include "inspectable.h"
#include "Windows.Foundation.h"
#include "Windows.UI.h"
#include "Windows.UI.Xaml.Media.Imaging.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_Canvas2Eabi_0000_0000 */
/* [local] */ 

#ifdef __cplusplus
} /*extern "C"*/ 
#endif
#include <windows.foundation.collections.h>
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasDevice;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
interface ICanvasDevice;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

interface IInspectable;


/* interface __MIDL_itf_Canvas2Eabi_0000_0000 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0000_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2097 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2097 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2097_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2097_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0001 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ef539eb5-aa23-573f-ba41-ccd7f3150c5b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasDevice*, ABI::Microsoft::Graphics::Canvas::ICanvasDevice*>,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.CanvasDevice, Object>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE */

#ifdef __cplusplus
namespace ABI {
namespace Windows {
namespace Foundation {
struct Rect;
} /*Foundation*/
} /*Windows*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0001 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0001_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2098 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2098 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2098_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2098_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0002 */
/* [local] */ 

#ifndef DEF___FIReference_1_Windows__CFoundation__CRect_USE
#define DEF___FIReference_1_Windows__CFoundation__CRect_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("80423f11-054f-5eac-afd3-63b6ce15e77b"))
IReference<struct ABI::Windows::Foundation::Rect> : IReference_impl<struct ABI::Windows::Foundation::Rect> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IReference`1<Windows.Foundation.Rect>"; }
};
typedef IReference<struct ABI::Windows::Foundation::Rect> __FIReference_1_Windows__CFoundation__CRect_t;
#define ____FIReference_1_Windows__CFoundation__CRect_FWD_DEFINED__
#define __FIReference_1_Windows__CFoundation__CRect ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CRect_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIReference_1_Windows__CFoundation__CRect_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
interface ICanvasBitmap;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0002 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0002_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2099 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2099 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2099_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2099_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0003 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("01f4b012-b7d5-5e02-8caa-2c460f35c947"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; }
};
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0003 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0003_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2100 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2100 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2100_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2100_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0004 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0391e8ef-719a-5c80-b87a-7d902b154e3e"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; }
};
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_FWD_DEFINED__
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0004 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0004_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2101 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2101 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2101_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0005 */
/* [local] */ 

#ifndef DEF___FIIterator_1_HSTRING_USE
#define DEF___FIIterator_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8c304ebb-6615-50a4-8829-879ecd443236"))
IIterator<HSTRING> : IIterator_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<String>"; }
};
typedef IIterator<HSTRING> __FIIterator_1_HSTRING_t;
#define ____FIIterator_1_HSTRING_FWD_DEFINED__
#define __FIIterator_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0005 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0005_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2102 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2102 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2102_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0006 */
/* [local] */ 

#ifndef DEF___FIIterable_1_HSTRING_USE
#define DEF___FIIterable_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e"))
IIterable<HSTRING> : IIterable_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<String>"; }
};
typedef IIterable<HSTRING> __FIIterable_1_HSTRING_t;
#define ____FIIterable_1_HSTRING_FWD_DEFINED__
#define __FIIterable_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_HSTRING_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0006 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0006_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2103 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2103 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2103_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0007 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_HSTRING_USE
#define DEF___FIVectorView_1_HSTRING_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2f13c006-a03a-5f69-b090-75a43e33423e"))
IVectorView<HSTRING> : IVectorView_impl<HSTRING> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<String>"; }
};
typedef IVectorView<HSTRING> __FIVectorView_1_HSTRING_t;
#define ____FIVectorView_1_HSTRING_FWD_DEFINED__
#define __FIVectorView_1_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1_HSTRING_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_HSTRING_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
class CanvasCreateResourcesEventArgs;
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
interface ICanvasCreateResourcesEventArgs;
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0007 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0007_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2104 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2104 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2104_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2104_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0008 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a29acd34-5ab2-50ff-b02d-e6737195de24"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedUpdateEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedUpdateEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0008 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0008_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2105 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2105 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2105_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0009 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f3505553-11e9-548c-80b6-33e56d2e673b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasAnimatedDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasAnimatedDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0009 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0009_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2106 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2106 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2106_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0010 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("00ddd999-594e-5c0f-b4a0-52b01171dcd6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0010 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0010_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2107 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2107 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2107_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0011 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("17e87476-4ea7-5920-a49e-a7a9e383c7dc"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Object>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0011 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0011_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2108 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2108 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2108_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0012 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ffcd91a9-b0f6-5e59-b815-0581129240e6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasDrawEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0012 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0012_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2109 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2109 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2109_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2109_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0013 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6b0b7674-c32a-59f5-ba42-79cd2fd7f023"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasVirtualImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasVirtualImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasRegionsInvalidatedEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasRegionsInvalidatedEventArgs;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0013 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0013_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2110 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2110 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2110_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0014 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fed1b996-f368-58b3-bccd-8ebacf6611b2"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasVirtualControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
interface ICanvasVirtualControl;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0014 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0014_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2111 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2111 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2111_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0015 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("82c7431b-0f55-5f54-8dd8-f9a8327df123"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0015 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0015_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2112 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2112 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2112_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0016 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9a63a22f-5ad4-5195-beb6-9b73b4304443"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; }
};
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t

/* ABI */ } /* Windows */ } /* Foundation */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
interface IGraphicsEffectSource;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0016 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0016_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2113 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2113 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2113_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0017 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("96b833f6-dc12-52a2-ac0b-17925fd36109"))
IIterator<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> : IIterator_impl<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterator`1<Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource>"; }
};
typedef IIterator<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t;
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0017 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0017_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2114 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2114 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2114_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0018 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2f743550-4890-518d-92aa-407fc86d6064"))
IIterable<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> : IIterable_impl<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IIterable`1<Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource>"; }
};
typedef IIterable<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t;
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0018 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0018_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2115 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2115 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2115_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0019 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("b5d935d5-13a2-5196-b115-8c34629869c0"))
IVectorView<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> : IVectorView_impl<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVectorView`1<Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource>"; }
};
typedef IVectorView<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t;
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE */


/* interface __MIDL_itf_Canvas2Eabi_0000_0019 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0019_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2116 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2116 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2116_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0020 */
/* [local] */ 

#ifndef DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE
#if defined(__cplusplus) && !defined(RO_NO_TEMPLATE_NAME)
} /*extern "C"*/ 
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5889e5fd-01d9-55f3-b896-b0e1b4a7b412"))
IVector<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> : IVector_impl<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> {
static const wchar_t* z_get_rc_name_impl() {
return L"Windows.Foundation.Collections.IVector`1<Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource>"; }
};
typedef IVector<ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource*> __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t;
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_FWD_DEFINED__
#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_t

/* ABI */ } /* Windows */ } /* Foundation */ } /* Collections */ }
extern "C" {
#endif //__cplusplus
#endif /* DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_USE */
#pragma warning(push)
#pragma warning(disable:4001) 
#pragma once
#pragma warning(pop)
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2
    {
    float X;
    float Y;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3
    {
    float X;
    float Y;
    float Z;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector4
    {
    float X;
    float Y;
    float Z;
    float W;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector4;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2
    {
    float M11;
    float M12;
    float M21;
    float M22;
    float M31;
    float M32;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4
    {
    float M11;
    float M12;
    float M13;
    float M14;
    float M21;
    float M22;
    float M23;
    float M24;
    float M31;
    float M32;
    float M33;
    float M34;
    float M41;
    float M42;
    float M43;
    float M44;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CPlane
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 Normal;
    float D;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CPlane;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CQuaternion
    {
    float X;
    float Y;
    float Z;
    float W;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CQuaternion;

#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
    {
        CanvasAlphaMode_Premultiplied	= ( int  )0,
        CanvasAlphaMode_Straight	= ( int  )1,
        CanvasAlphaMode_Ignore	= ( int  )2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
    {
        CanvasAntialiasing_Antialiased	= ( int  )0,
        CanvasAntialiasing_Aliased	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
    {
        CanvasBlend_SourceOver	= ( int  )0,
        CanvasBlend_Copy	= ( int  )1,
        CanvasBlend_Min	= ( int  )2,
        CanvasBlend_Add	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
    {
        CanvasBufferPrecision_Precision8UIntNormalized	= ( int  )0,
        CanvasBufferPrecision_Precision8UIntNormalizedSrgb	= ( int  )1,
        CanvasBufferPrecision_Precision16UIntNormalized	= ( int  )2,
        CanvasBufferPrecision_Precision16Float	= ( int  )3,
        CanvasBufferPrecision_Precision32Float	= ( int  )4
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace
    {
        CanvasColorSpace_Custom	= ( int  )0,
        CanvasColorSpace_Srgb	= ( int  )1,
        CanvasColorSpace_ScRgb	= ( int  )2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
    {
        CanvasComposite_SourceOver	= ( int  )0,
        CanvasComposite_DestinationOver	= ( int  )1,
        CanvasComposite_SourceIn	= ( int  )2,
        CanvasComposite_DestinationIn	= ( int  )3,
        CanvasComposite_SourceOut	= ( int  )4,
        CanvasComposite_DestinationOut	= ( int  )5,
        CanvasComposite_SourceAtop	= ( int  )6,
        CanvasComposite_DestinationAtop	= ( int  )7,
        CanvasComposite_Xor	= ( int  )8,
        CanvasComposite_Add	= ( int  )9,
        CanvasComposite_Copy	= ( int  )10,
        CanvasComposite_BoundedCopy	= ( int  )11,
        CanvasComposite_MaskInvert	= ( int  )12
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel
    {
        CanvasDebugLevel_None	= ( int  )0,
        CanvasDebugLevel_Error	= ( int  )1,
        CanvasDebugLevel_Warning	= ( int  )2,
        CanvasDebugLevel_Information	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior
    {
        CanvasEdgeBehavior_Clamp	= ( int  )0,
        CanvasEdgeBehavior_Wrap	= ( int  )1,
        CanvasEdgeBehavior_Mirror	= ( int  )2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
    {
        CanvasImageInterpolation_NearestNeighbor	= ( int  )0,
        CanvasImageInterpolation_Linear	= ( int  )1,
        CanvasImageInterpolation_Cubic	= ( int  )2,
        CanvasImageInterpolation_MultiSampleLinear	= ( int  )3,
        CanvasImageInterpolation_Anisotropic	= ( int  )4,
        CanvasImageInterpolation_HighQualityCubic	= ( int  )5
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
    {
        CanvasLayerOptions_None	= 0,
        CanvasLayerOptions_InitializeFromBackground	= 1,
        CanvasLayerOptions_IgnoreAlpha	= 2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasLayerOptions CanvasLayerOptions;
#else
typedef enum class CanvasLayerOptions CanvasLayerOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasLayerOptions)
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
    {
        CanvasUnits_Dips	= ( int  )0,
        CanvasUnits_Pixels	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize
    {
        CanvasArcSize_Small	= ( int  )0,
        CanvasArcSize_Large	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle
    {
        CanvasCapStyle_Flat	= ( int  )0,
        CanvasCapStyle_Square	= ( int  )1,
        CanvasCapStyle_Round	= ( int  )2,
        CanvasCapStyle_Triangle	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle
    {
        CanvasDashStyle_Solid	= ( int  )0,
        CanvasDashStyle_Dash	= ( int  )1,
        CanvasDashStyle_Dot	= ( int  )2,
        CanvasDashStyle_DashDot	= ( int  )3,
        CanvasDashStyle_DashDotDot	= ( int  )4
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill
    {
        CanvasFigureFill_Default	= ( int  )0,
        CanvasFigureFill_DoesNotAffectFills	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop
    {
        CanvasFigureLoop_Open	= ( int  )0,
        CanvasFigureLoop_Closed	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions
    {
        CanvasFigureSegmentOptions_None	= 0,
        CanvasFigureSegmentOptions_ForceUnstroked	= 0x1,
        CanvasFigureSegmentOptions_ForceRoundLineJoin	= 0x2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasFigureSegmentOptions CanvasFigureSegmentOptions;
#else
typedef enum class CanvasFigureSegmentOptions CanvasFigureSegmentOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasFigureSegmentOptions)
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination
    {
        CanvasFilledRegionDetermination_Alternate	= ( int  )0,
        CanvasFilledRegionDetermination_Winding	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine
    {
        CanvasGeometryCombine_Union	= ( int  )0,
        CanvasGeometryCombine_Intersect	= ( int  )1,
        CanvasGeometryCombine_Xor	= ( int  )2,
        CanvasGeometryCombine_Exclude	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation
    {
        CanvasGeometryRelation_Disjoint	= ( int  )0,
        CanvasGeometryRelation_Contained	= ( int  )1,
        CanvasGeometryRelation_Contains	= ( int  )2,
        CanvasGeometryRelation_Overlap	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification
    {
        CanvasGeometrySimplification_CubicsAndLines	= ( int  )0,
        CanvasGeometrySimplification_Lines	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin
    {
        CanvasLineJoin_Miter	= ( int  )0,
        CanvasLineJoin_Bevel	= ( int  )1,
        CanvasLineJoin_Round	= ( int  )2,
        CanvasLineJoin_MiterOrBevel	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior
    {
        CanvasStrokeTransformBehavior_Normal	= ( int  )0,
        CanvasStrokeTransformBehavior_Fixed	= ( int  )1,
        CanvasStrokeTransformBehavior_Hairline	= ( int  )2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection
    {
        CanvasSweepDirection_CounterClockwise	= ( int  )0,
        CanvasSweepDirection_Clockwise	= ( int  )1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
    {
        CanvasDrawTextOptions_Default	= 0,
        CanvasDrawTextOptions_NoPixelSnap	= 0x1,
        CanvasDrawTextOptions_Clip	= 0x2,
        CanvasDrawTextOptions_EnableColorFont	= 0x4
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM CanvasDrawTextOptions CanvasDrawTextOptions;
#else
typedef enum class CanvasDrawTextOptions CanvasDrawTextOptions;
#endif
DEFINE_ENUM_FLAG_OPERATORS(CanvasDrawTextOptions)
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
    {
        CanvasTextAntialiasing_Auto	= ( int  )0,
        CanvasTextAntialiasing_ClearType	= ( int  )1,
        CanvasTextAntialiasing_Grayscale	= ( int  )2,
        CanvasTextAntialiasing_Aliased	= ( int  )3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;


#endif /* end if !defined(__cplusplus) */


#endif
#define PIXEL_FORMAT(x) ::ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat::##x
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat
    {
        DirectXPixelFormat_Unknown	= 0,
        DirectXPixelFormat_R32G32B32A32Typeless	= 1,
        DirectXPixelFormat_R32G32B32A32Float	= 2,
        DirectXPixelFormat_R32G32B32A32UInt	= 3,
        DirectXPixelFormat_R32G32B32A32Int	= 4,
        DirectXPixelFormat_R32G32B32Typeless	= 5,
        DirectXPixelFormat_R32G32B32Float	= 6,
        DirectXPixelFormat_R32G32B32UInt	= 7,
        DirectXPixelFormat_R32G32B32Int	= 8,
        DirectXPixelFormat_R16G16B16A16Typeless	= 9,
        DirectXPixelFormat_R16G16B16A16Float	= 10,
        DirectXPixelFormat_R16G16B16A16UIntNormalized	= 11,
        DirectXPixelFormat_R16G16B16A16UInt	= 12,
        DirectXPixelFormat_R16G16B16A16IntNormalized	= 13,
        DirectXPixelFormat_R16G16B16A16Int	= 14,
        DirectXPixelFormat_R32G32Typeless	= 15,
        DirectXPixelFormat_R32G32Float	= 16,
        DirectXPixelFormat_R32G32UInt	= 17,
        DirectXPixelFormat_R32G32Int	= 18,
        DirectXPixelFormat_R32G8X24Typeless	= 19,
        DirectXPixelFormat_D32FloatS8X24UInt	= 20,
        DirectXPixelFormat_R32FloatX8X24Typeless	= 21,
        DirectXPixelFormat_X32TypelessG8X24UInt	= 22,
        DirectXPixelFormat_R10G10B10A2Typeless	= 23,
        DirectXPixelFormat_R10G10B10A2UIntNormalized	= 24,
        DirectXPixelFormat_R10G10B10A2UInt	= 25,
        DirectXPixelFormat_R11G11B10Float	= 26,
        DirectXPixelFormat_R8G8B8A8Typeless	= 27,
        DirectXPixelFormat_R8G8B8A8UIntNormalized	= 28,
        DirectXPixelFormat_R8G8B8A8UIntNormalizedSrgb	= 29,
        DirectXPixelFormat_R8G8B8A8UInt	= 30,
        DirectXPixelFormat_R8G8B8A8IntNormalized	= 31,
        DirectXPixelFormat_R8G8B8A8Int	= 32,
        DirectXPixelFormat_R16G16Typeless	= 33,
        DirectXPixelFormat_R16G16Float	= 34,
        DirectXPixelFormat_R16G16UIntNormalized	= 35,
        DirectXPixelFormat_R16G16UInt	= 36,
        DirectXPixelFormat_R16G16IntNormalized	= 37,
        DirectXPixelFormat_R16G16Int	= 38,
        DirectXPixelFormat_R32Typeless	= 39,
        DirectXPixelFormat_D32Float	= 40,
        DirectXPixelFormat_R32Float	= 41,
        DirectXPixelFormat_R32UInt	= 42,
        DirectXPixelFormat_R32Int	= 43,
        DirectXPixelFormat_R24G8Typeless	= 44,
        DirectXPixelFormat_D24UIntNormalizedS8UInt	= 45,
        DirectXPixelFormat_R24UIntNormalizedX8Typeless	= 46,
        DirectXPixelFormat_X24TypelessG8UInt	= 47,
        DirectXPixelFormat_R8G8Typeless	= 48,
        DirectXPixelFormat_R8G8UIntNormalized	= 49,
        DirectXPixelFormat_R8G8UInt	= 50,
        DirectXPixelFormat_R8G8IntNormalized	= 51,
        DirectXPixelFormat_R8G8Int	= 52,
        DirectXPixelFormat_R16Typeless	= 53,
        DirectXPixelFormat_R16Float	= 54,
        DirectXPixelFormat_D16UIntNormalized	= 55,
        DirectXPixelFormat_R16UIntNormalized	= 56,
        DirectXPixelFormat_R16UInt	= 57,
        DirectXPixelFormat_R16IntNormalized	= 58,
        DirectXPixelFormat_R16Int	= 59,
        DirectXPixelFormat_R8Typeless	= 60,
        DirectXPixelFormat_R8UIntNormalized	= 61,
        DirectXPixelFormat_R8UInt	= 62,
        DirectXPixelFormat_R8IntNormalized	= 63,
        DirectXPixelFormat_R8Int	= 64,
        DirectXPixelFormat_A8UIntNormalized	= 65,
        DirectXPixelFormat_R1UIntNormalized	= 66,
        DirectXPixelFormat_R9G9B9E5SharedExponent	= 67,
        DirectXPixelFormat_R8G8B8G8UIntNormalized	= 68,
        DirectXPixelFormat_G8R8G8B8UIntNormalized	= 69,
        DirectXPixelFormat_BC1Typeless	= 70,
        DirectXPixelFormat_BC1UIntNormalized	= 71,
        DirectXPixelFormat_BC1UIntNormalizedSrgb	= 72,
        DirectXPixelFormat_BC2Typeless	= 73,
        DirectXPixelFormat_BC2UIntNormalized	= 74,
        DirectXPixelFormat_BC2UIntNormalizedSrgb	= 75,
        DirectXPixelFormat_BC3Typeless	= 76,
        DirectXPixelFormat_BC3UIntNormalized	= 77,
        DirectXPixelFormat_BC3UIntNormalizedSrgb	= 78,
        DirectXPixelFormat_BC4Typeless	= 79,
        DirectXPixelFormat_BC4UIntNormalized	= 80,
        DirectXPixelFormat_BC4IntNormalized	= 81,
        DirectXPixelFormat_BC5Typeless	= 82,
        DirectXPixelFormat_BC5UIntNormalized	= 83,
        DirectXPixelFormat_BC5IntNormalized	= 84,
        DirectXPixelFormat_B5G6R5UIntNormalized	= 85,
        DirectXPixelFormat_B5G5R5A1UIntNormalized	= 86,
        DirectXPixelFormat_B8G8R8A8UIntNormalized	= 87,
        DirectXPixelFormat_B8G8R8X8UIntNormalized	= 88,
        DirectXPixelFormat_R10G10B10XRBiasA2UIntNormalized	= 89,
        DirectXPixelFormat_B8G8R8A8Typeless	= 90,
        DirectXPixelFormat_B8G8R8A8UIntNormalizedSrgb	= 91,
        DirectXPixelFormat_B8G8R8X8Typeless	= 92,
        DirectXPixelFormat_B8G8R8X8UIntNormalizedSrgb	= 93,
        DirectXPixelFormat_BC6HTypeless	= 94,
        DirectXPixelFormat_BC6H16UnsignedFloat	= 95,
        DirectXPixelFormat_BC6H16Float	= 96,
        DirectXPixelFormat_BC7Typeless	= 97,
        DirectXPixelFormat_BC7UIntNormalized	= 98,
        DirectXPixelFormat_BC7UIntNormalizedSrgb	= 99,
        DirectXPixelFormat_Ayuv	= 100,
        DirectXPixelFormat_Y410	= 101,
        DirectXPixelFormat_Y416	= 102,
        DirectXPixelFormat_NV12	= 103,
        DirectXPixelFormat_P010	= 104,
        DirectXPixelFormat_P016	= 105,
        DirectXPixelFormat_Opaque420	= 106,
        DirectXPixelFormat_Yuy2	= 107,
        DirectXPixelFormat_Y210	= 108,
        DirectXPixelFormat_Y216	= 109,
        DirectXPixelFormat_NV11	= 110,
        DirectXPixelFormat_AI44	= 111,
        DirectXPixelFormat_IA44	= 112,
        DirectXPixelFormat_P8	= 113,
        DirectXPixelFormat_A8P8	= 114,
        DirectXPixelFormat_B4G4R4A4UIntNormalized	= 115
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DMultisampleDescription
    {
    INT32 Count;
    INT32 Quality;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DMultisampleDescription;

#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DSurfaceDescription
    {
    INT32 Width;
    INT32 Height;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat Format;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DMultisampleDescription MultisampleDescription;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DSurfaceDescription;

#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DUsage
    {
        Direct3DUsage_Default	= 0,
        Direct3DUsage_Immutable	= 1,
        Direct3DUsage_Dynamic	= 2,
        Direct3DUsage_Staging	= 3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CxDirect3DUsage;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DBindings
    {
        Direct3DBindings_VertexBuffer	= 0x1,
        Direct3DBindings_IndexBuffer	= 0x2,
        Direct3DBindings_ConstantBuffer	= 0x4,
        Direct3DBindings_ShaderResource	= 0x8,
        Direct3DBindings_StreamOutput	= 0x10,
        Direct3DBindings_RenderTarget	= 0x20,
        Direct3DBindings_DepthStencil	= 0x40,
        Direct3DBindings_UnorderedAccess	= 0x80,
        Direct3DBindings_Decoder	= 0x200,
        Direct3DBindings_VideoEncoder	= 0x400
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CxDirect3DBindings;


#endif /* end if !defined(__cplusplus) */


#else
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace DirectX {
namespace Direct3D11 {
#if defined(MIDL_ENUM)
typedef MIDL_ENUM Direct3DBindings xDirect3DBindings;
#else
typedef enum class Direct3DBindings xDirect3DBindings;
#endif
DEFINE_ENUM_FLAG_OPERATORS(xDirect3DBindings)
} /*Direct3D11*/
} /*DirectX*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_DirectX_Direct3D11_IDirect3DDevice[] = L"Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DDevice";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0020 */
/* [local] */ 


#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Vector2
                        {
                        float X;
                        float Y;
                        } 	Vector2;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Vector3
                        {
                        float X;
                        float Y;
                        float Z;
                        } 	Vector3;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Vector4
                        {
                        float X;
                        float Y;
                        float Z;
                        float W;
                        } 	Vector4;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Matrix3x2
                        {
                        float M11;
                        float M12;
                        float M21;
                        float M22;
                        float M31;
                        float M32;
                        } 	Matrix3x2;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Matrix4x4
                        {
                        float M11;
                        float M12;
                        float M13;
                        float M14;
                        float M21;
                        float M22;
                        float M23;
                        float M24;
                        float M31;
                        float M32;
                        float M33;
                        float M34;
                        float M41;
                        float M42;
                        float M43;
                        float M44;
                        } 	Matrix4x4;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Plane
                        {
                        Vector3 Normal;
                        float D;
                        } 	Plane;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Numerics {
                    
                    typedef struct Quaternion
                        {
                        float X;
                        float Y;
                        float Z;
                        float W;
                        } 	Quaternion;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasAlphaMode
                    {
                        Premultiplied	= ( int  )0,
                        Straight	= ( int  )1,
                        Ignore	= ( int  )2
                    } 	CanvasAlphaMode;
                

                const CanvasAlphaMode CanvasAlphaMode_Premultiplied = CanvasAlphaMode::Premultiplied;
                const CanvasAlphaMode CanvasAlphaMode_Straight = CanvasAlphaMode::Straight;
                const CanvasAlphaMode CanvasAlphaMode_Ignore = CanvasAlphaMode::Ignore;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasAntialiasing
                    {
                        Antialiased	= ( int  )0,
                        Aliased	= ( int  )1
                    } 	CanvasAntialiasing;
                

                const CanvasAntialiasing CanvasAntialiasing_Antialiased = CanvasAntialiasing::Antialiased;
                const CanvasAntialiasing CanvasAntialiasing_Aliased = CanvasAntialiasing::Aliased;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasBlend
                    {
                        SourceOver	= ( int  )0,
                        Copy	= ( int  )1,
                        Min	= ( int  )2,
                        Add	= ( int  )3
                    } 	CanvasBlend;
                

                const CanvasBlend CanvasBlend_SourceOver = CanvasBlend::SourceOver;
                const CanvasBlend CanvasBlend_Copy = CanvasBlend::Copy;
                const CanvasBlend CanvasBlend_Min = CanvasBlend::Min;
                const CanvasBlend CanvasBlend_Add = CanvasBlend::Add;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasBufferPrecision
                    {
                        Precision8UIntNormalized	= ( int  )0,
                        Precision8UIntNormalizedSrgb	= ( int  )1,
                        Precision16UIntNormalized	= ( int  )2,
                        Precision16Float	= ( int  )3,
                        Precision32Float	= ( int  )4
                    } 	CanvasBufferPrecision;
                

                const CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalized = CanvasBufferPrecision::Precision8UIntNormalized;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalizedSrgb = CanvasBufferPrecision::Precision8UIntNormalizedSrgb;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision16UIntNormalized = CanvasBufferPrecision::Precision16UIntNormalized;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision16Float = CanvasBufferPrecision::Precision16Float;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision32Float = CanvasBufferPrecision::Precision32Float;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasColorSpace
                    {
                        Custom	= ( int  )0,
                        Srgb	= ( int  )1,
                        ScRgb	= ( int  )2
                    } 	CanvasColorSpace;
                

                const CanvasColorSpace CanvasColorSpace_Custom = CanvasColorSpace::Custom;
                const CanvasColorSpace CanvasColorSpace_Srgb = CanvasColorSpace::Srgb;
                const CanvasColorSpace CanvasColorSpace_ScRgb = CanvasColorSpace::ScRgb;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasComposite
                    {
                        SourceOver	= ( int  )0,
                        DestinationOver	= ( int  )1,
                        SourceIn	= ( int  )2,
                        DestinationIn	= ( int  )3,
                        SourceOut	= ( int  )4,
                        DestinationOut	= ( int  )5,
                        SourceAtop	= ( int  )6,
                        DestinationAtop	= ( int  )7,
                        Xor	= ( int  )8,
                        Add	= ( int  )9,
                        Copy	= ( int  )10,
                        BoundedCopy	= ( int  )11,
                        MaskInvert	= ( int  )12
                    } 	CanvasComposite;
                

                const CanvasComposite CanvasComposite_SourceOver = CanvasComposite::SourceOver;
                const CanvasComposite CanvasComposite_DestinationOver = CanvasComposite::DestinationOver;
                const CanvasComposite CanvasComposite_SourceIn = CanvasComposite::SourceIn;
                const CanvasComposite CanvasComposite_DestinationIn = CanvasComposite::DestinationIn;
                const CanvasComposite CanvasComposite_SourceOut = CanvasComposite::SourceOut;
                const CanvasComposite CanvasComposite_DestinationOut = CanvasComposite::DestinationOut;
                const CanvasComposite CanvasComposite_SourceAtop = CanvasComposite::SourceAtop;
                const CanvasComposite CanvasComposite_DestinationAtop = CanvasComposite::DestinationAtop;
                const CanvasComposite CanvasComposite_Xor = CanvasComposite::Xor;
                const CanvasComposite CanvasComposite_Add = CanvasComposite::Add;
                const CanvasComposite CanvasComposite_Copy = CanvasComposite::Copy;
                const CanvasComposite CanvasComposite_BoundedCopy = CanvasComposite::BoundedCopy;
                const CanvasComposite CanvasComposite_MaskInvert = CanvasComposite::MaskInvert;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasDebugLevel
                    {
                        None	= ( int  )0,
                        Error	= ( int  )1,
                        Warning	= ( int  )2,
                        Information	= ( int  )3
                    } 	CanvasDebugLevel;
                

                const CanvasDebugLevel CanvasDebugLevel_None = CanvasDebugLevel::None;
                const CanvasDebugLevel CanvasDebugLevel_Error = CanvasDebugLevel::Error;
                const CanvasDebugLevel CanvasDebugLevel_Warning = CanvasDebugLevel::Warning;
                const CanvasDebugLevel CanvasDebugLevel_Information = CanvasDebugLevel::Information;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasEdgeBehavior
                    {
                        Clamp	= ( int  )0,
                        Wrap	= ( int  )1,
                        Mirror	= ( int  )2
                    } 	CanvasEdgeBehavior;
                

                const CanvasEdgeBehavior CanvasEdgeBehavior_Clamp = CanvasEdgeBehavior::Clamp;
                const CanvasEdgeBehavior CanvasEdgeBehavior_Wrap = CanvasEdgeBehavior::Wrap;
                const CanvasEdgeBehavior CanvasEdgeBehavior_Mirror = CanvasEdgeBehavior::Mirror;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasImageInterpolation
                    {
                        NearestNeighbor	= ( int  )0,
                        Linear	= ( int  )1,
                        Cubic	= ( int  )2,
                        MultiSampleLinear	= ( int  )3,
                        Anisotropic	= ( int  )4,
                        HighQualityCubic	= ( int  )5
                    } 	CanvasImageInterpolation;
                

                const CanvasImageInterpolation CanvasImageInterpolation_NearestNeighbor = CanvasImageInterpolation::NearestNeighbor;
                const CanvasImageInterpolation CanvasImageInterpolation_Linear = CanvasImageInterpolation::Linear;
                const CanvasImageInterpolation CanvasImageInterpolation_Cubic = CanvasImageInterpolation::Cubic;
                const CanvasImageInterpolation CanvasImageInterpolation_MultiSampleLinear = CanvasImageInterpolation::MultiSampleLinear;
                const CanvasImageInterpolation CanvasImageInterpolation_Anisotropic = CanvasImageInterpolation::Anisotropic;
                const CanvasImageInterpolation CanvasImageInterpolation_HighQualityCubic = CanvasImageInterpolation::HighQualityCubic;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasLayerOptions
                    {
                        None	= 0,
                        InitializeFromBackground	= 1,
                        IgnoreAlpha	= 2
                    } 	CanvasLayerOptions;
                

                const CanvasLayerOptions CanvasLayerOptions_None = CanvasLayerOptions::None;
                const CanvasLayerOptions CanvasLayerOptions_InitializeFromBackground = CanvasLayerOptions::InitializeFromBackground;
                const CanvasLayerOptions CanvasLayerOptions_IgnoreAlpha = CanvasLayerOptions::IgnoreAlpha;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasUnits
                    {
                        Dips	= ( int  )0,
                        Pixels	= ( int  )1
                    } 	CanvasUnits;
                

                const CanvasUnits CanvasUnits_Dips = CanvasUnits::Dips;
                const CanvasUnits CanvasUnits_Pixels = CanvasUnits::Pixels;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasArcSize
                        {
                            Small	= ( int  )0,
                            Large	= ( int  )1
                        } 	CanvasArcSize;
                    

                    const CanvasArcSize CanvasArcSize_Small = CanvasArcSize::Small;
                    const CanvasArcSize CanvasArcSize_Large = CanvasArcSize::Large;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasCapStyle
                        {
                            Flat	= ( int  )0,
                            Square	= ( int  )1,
                            Round	= ( int  )2,
                            Triangle	= ( int  )3
                        } 	CanvasCapStyle;
                    

                    const CanvasCapStyle CanvasCapStyle_Flat = CanvasCapStyle::Flat;
                    const CanvasCapStyle CanvasCapStyle_Square = CanvasCapStyle::Square;
                    const CanvasCapStyle CanvasCapStyle_Round = CanvasCapStyle::Round;
                    const CanvasCapStyle CanvasCapStyle_Triangle = CanvasCapStyle::Triangle;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasDashStyle
                        {
                            Solid	= ( int  )0,
                            Dash	= ( int  )1,
                            Dot	= ( int  )2,
                            DashDot	= ( int  )3,
                            DashDotDot	= ( int  )4
                        } 	CanvasDashStyle;
                    

                    const CanvasDashStyle CanvasDashStyle_Solid = CanvasDashStyle::Solid;
                    const CanvasDashStyle CanvasDashStyle_Dash = CanvasDashStyle::Dash;
                    const CanvasDashStyle CanvasDashStyle_Dot = CanvasDashStyle::Dot;
                    const CanvasDashStyle CanvasDashStyle_DashDot = CanvasDashStyle::DashDot;
                    const CanvasDashStyle CanvasDashStyle_DashDotDot = CanvasDashStyle::DashDotDot;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureFill
                        {
                            Default	= ( int  )0,
                            DoesNotAffectFills	= ( int  )1
                        } 	CanvasFigureFill;
                    

                    const CanvasFigureFill CanvasFigureFill_Default = CanvasFigureFill::Default;
                    const CanvasFigureFill CanvasFigureFill_DoesNotAffectFills = CanvasFigureFill::DoesNotAffectFills;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureLoop
                        {
                            Open	= ( int  )0,
                            Closed	= ( int  )1
                        } 	CanvasFigureLoop;
                    

                    const CanvasFigureLoop CanvasFigureLoop_Open = CanvasFigureLoop::Open;
                    const CanvasFigureLoop CanvasFigureLoop_Closed = CanvasFigureLoop::Closed;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasFigureSegmentOptions
                        {
                            None	= 0,
                            ForceUnstroked	= 0x1,
                            ForceRoundLineJoin	= 0x2
                        } 	CanvasFigureSegmentOptions;
                    

                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_None = CanvasFigureSegmentOptions::None;
                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceUnstroked = CanvasFigureSegmentOptions::ForceUnstroked;
                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceRoundLineJoin = CanvasFigureSegmentOptions::ForceRoundLineJoin;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasFilledRegionDetermination
                        {
                            Alternate	= ( int  )0,
                            Winding	= ( int  )1
                        } 	CanvasFilledRegionDetermination;
                    

                    const CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Alternate = CanvasFilledRegionDetermination::Alternate;
                    const CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Winding = CanvasFilledRegionDetermination::Winding;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometryCombine
                        {
                            Union	= ( int  )0,
                            Intersect	= ( int  )1,
                            Xor	= ( int  )2,
                            Exclude	= ( int  )3
                        } 	CanvasGeometryCombine;
                    

                    const CanvasGeometryCombine CanvasGeometryCombine_Union = CanvasGeometryCombine::Union;
                    const CanvasGeometryCombine CanvasGeometryCombine_Intersect = CanvasGeometryCombine::Intersect;
                    const CanvasGeometryCombine CanvasGeometryCombine_Xor = CanvasGeometryCombine::Xor;
                    const CanvasGeometryCombine CanvasGeometryCombine_Exclude = CanvasGeometryCombine::Exclude;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometryRelation
                        {
                            Disjoint	= ( int  )0,
                            Contained	= ( int  )1,
                            Contains	= ( int  )2,
                            Overlap	= ( int  )3
                        } 	CanvasGeometryRelation;
                    

                    const CanvasGeometryRelation CanvasGeometryRelation_Disjoint = CanvasGeometryRelation::Disjoint;
                    const CanvasGeometryRelation CanvasGeometryRelation_Contained = CanvasGeometryRelation::Contained;
                    const CanvasGeometryRelation CanvasGeometryRelation_Contains = CanvasGeometryRelation::Contains;
                    const CanvasGeometryRelation CanvasGeometryRelation_Overlap = CanvasGeometryRelation::Overlap;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasGeometrySimplification
                        {
                            CubicsAndLines	= ( int  )0,
                            Lines	= ( int  )1
                        } 	CanvasGeometrySimplification;
                    

                    const CanvasGeometrySimplification CanvasGeometrySimplification_CubicsAndLines = CanvasGeometrySimplification::CubicsAndLines;
                    const CanvasGeometrySimplification CanvasGeometrySimplification_Lines = CanvasGeometrySimplification::Lines;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasLineJoin
                        {
                            Miter	= ( int  )0,
                            Bevel	= ( int  )1,
                            Round	= ( int  )2,
                            MiterOrBevel	= ( int  )3
                        } 	CanvasLineJoin;
                    

                    const CanvasLineJoin CanvasLineJoin_Miter = CanvasLineJoin::Miter;
                    const CanvasLineJoin CanvasLineJoin_Bevel = CanvasLineJoin::Bevel;
                    const CanvasLineJoin CanvasLineJoin_Round = CanvasLineJoin::Round;
                    const CanvasLineJoin CanvasLineJoin_MiterOrBevel = CanvasLineJoin::MiterOrBevel;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasStrokeTransformBehavior
                        {
                            Normal	= ( int  )0,
                            Fixed	= ( int  )1,
                            Hairline	= ( int  )2
                        } 	CanvasStrokeTransformBehavior;
                    

                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Normal = CanvasStrokeTransformBehavior::Normal;
                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Fixed = CanvasStrokeTransformBehavior::Fixed;
                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Hairline = CanvasStrokeTransformBehavior::Hairline;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasSweepDirection
                        {
                            CounterClockwise	= ( int  )0,
                            Clockwise	= ( int  )1
                        } 	CanvasSweepDirection;
                    

                    const CanvasSweepDirection CanvasSweepDirection_CounterClockwise = CanvasSweepDirection::CounterClockwise;
                    const CanvasSweepDirection CanvasSweepDirection_Clockwise = CanvasSweepDirection::Clockwise;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasDrawTextOptions
                        {
                            Default	= 0,
                            NoPixelSnap	= 0x1,
                            Clip	= 0x2,
                            EnableColorFont	= 0x4
                        } 	CanvasDrawTextOptions;
                    

                    const CanvasDrawTextOptions CanvasDrawTextOptions_Default = CanvasDrawTextOptions::Default;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_NoPixelSnap = CanvasDrawTextOptions::NoPixelSnap;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_Clip = CanvasDrawTextOptions::Clip;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_EnableColorFont = CanvasDrawTextOptions::EnableColorFont;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextAntialiasing
                        {
                            Auto	= ( int  )0,
                            ClearType	= ( int  )1,
                            Grayscale	= ( int  )2,
                            Aliased	= ( int  )3
                        } 	CanvasTextAntialiasing;
                    

                    const CanvasTextAntialiasing CanvasTextAntialiasing_Auto = CanvasTextAntialiasing::Auto;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_ClearType = CanvasTextAntialiasing::ClearType;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_Grayscale = CanvasTextAntialiasing::Grayscale;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_Aliased = CanvasTextAntialiasing::Aliased;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM DirectXPixelFormat
                        {
                            Unknown	= 0,
                            R32G32B32A32Typeless	= 1,
                            R32G32B32A32Float	= 2,
                            R32G32B32A32UInt	= 3,
                            R32G32B32A32Int	= 4,
                            R32G32B32Typeless	= 5,
                            R32G32B32Float	= 6,
                            R32G32B32UInt	= 7,
                            R32G32B32Int	= 8,
                            R16G16B16A16Typeless	= 9,
                            R16G16B16A16Float	= 10,
                            R16G16B16A16UIntNormalized	= 11,
                            R16G16B16A16UInt	= 12,
                            R16G16B16A16IntNormalized	= 13,
                            R16G16B16A16Int	= 14,
                            R32G32Typeless	= 15,
                            R32G32Float	= 16,
                            R32G32UInt	= 17,
                            R32G32Int	= 18,
                            R32G8X24Typeless	= 19,
                            D32FloatS8X24UInt	= 20,
                            R32FloatX8X24Typeless	= 21,
                            X32TypelessG8X24UInt	= 22,
                            R10G10B10A2Typeless	= 23,
                            R10G10B10A2UIntNormalized	= 24,
                            R10G10B10A2UInt	= 25,
                            R11G11B10Float	= 26,
                            R8G8B8A8Typeless	= 27,
                            R8G8B8A8UIntNormalized	= 28,
                            R8G8B8A8UIntNormalizedSrgb	= 29,
                            R8G8B8A8UInt	= 30,
                            R8G8B8A8IntNormalized	= 31,
                            R8G8B8A8Int	= 32,
                            R16G16Typeless	= 33,
                            R16G16Float	= 34,
                            R16G16UIntNormalized	= 35,
                            R16G16UInt	= 36,
                            R16G16IntNormalized	= 37,
                            R16G16Int	= 38,
                            R32Typeless	= 39,
                            D32Float	= 40,
                            R32Float	= 41,
                            R32UInt	= 42,
                            R32Int	= 43,
                            R24G8Typeless	= 44,
                            D24UIntNormalizedS8UInt	= 45,
                            R24UIntNormalizedX8Typeless	= 46,
                            X24TypelessG8UInt	= 47,
                            R8G8Typeless	= 48,
                            R8G8UIntNormalized	= 49,
                            R8G8UInt	= 50,
                            R8G8IntNormalized	= 51,
                            R8G8Int	= 52,
                            R16Typeless	= 53,
                            R16Float	= 54,
                            D16UIntNormalized	= 55,
                            R16UIntNormalized	= 56,
                            R16UInt	= 57,
                            R16IntNormalized	= 58,
                            R16Int	= 59,
                            R8Typeless	= 60,
                            R8UIntNormalized	= 61,
                            R8UInt	= 62,
                            R8IntNormalized	= 63,
                            R8Int	= 64,
                            A8UIntNormalized	= 65,
                            R1UIntNormalized	= 66,
                            R9G9B9E5SharedExponent	= 67,
                            R8G8B8G8UIntNormalized	= 68,
                            G8R8G8B8UIntNormalized	= 69,
                            BC1Typeless	= 70,
                            BC1UIntNormalized	= 71,
                            BC1UIntNormalizedSrgb	= 72,
                            BC2Typeless	= 73,
                            BC2UIntNormalized	= 74,
                            BC2UIntNormalizedSrgb	= 75,
                            BC3Typeless	= 76,
                            BC3UIntNormalized	= 77,
                            BC3UIntNormalizedSrgb	= 78,
                            BC4Typeless	= 79,
                            BC4UIntNormalized	= 80,
                            BC4IntNormalized	= 81,
                            BC5Typeless	= 82,
                            BC5UIntNormalized	= 83,
                            BC5IntNormalized	= 84,
                            B5G6R5UIntNormalized	= 85,
                            B5G5R5A1UIntNormalized	= 86,
                            B8G8R8A8UIntNormalized	= 87,
                            B8G8R8X8UIntNormalized	= 88,
                            R10G10B10XRBiasA2UIntNormalized	= 89,
                            B8G8R8A8Typeless	= 90,
                            B8G8R8A8UIntNormalizedSrgb	= 91,
                            B8G8R8X8Typeless	= 92,
                            B8G8R8X8UIntNormalizedSrgb	= 93,
                            BC6HTypeless	= 94,
                            BC6H16UnsignedFloat	= 95,
                            BC6H16Float	= 96,
                            BC7Typeless	= 97,
                            BC7UIntNormalized	= 98,
                            BC7UIntNormalizedSrgb	= 99,
                            Ayuv	= 100,
                            Y410	= 101,
                            Y416	= 102,
                            NV12	= 103,
                            P010	= 104,
                            P016	= 105,
                            Opaque420	= 106,
                            Yuy2	= 107,
                            Y210	= 108,
                            Y216	= 109,
                            NV11	= 110,
                            AI44	= 111,
                            IA44	= 112,
                            P8	= 113,
                            A8P8	= 114,
                            B4G4R4A4UIntNormalized	= 115
                        } 	DirectXPixelFormat;
                    

                    const DirectXPixelFormat DirectXPixelFormat_Unknown = DirectXPixelFormat::Unknown;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32A32Typeless = DirectXPixelFormat::R32G32B32A32Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32A32Float = DirectXPixelFormat::R32G32B32A32Float;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32A32UInt = DirectXPixelFormat::R32G32B32A32UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32A32Int = DirectXPixelFormat::R32G32B32A32Int;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32Typeless = DirectXPixelFormat::R32G32B32Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32Float = DirectXPixelFormat::R32G32B32Float;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32UInt = DirectXPixelFormat::R32G32B32UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32B32Int = DirectXPixelFormat::R32G32B32Int;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16Typeless = DirectXPixelFormat::R16G16B16A16Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16Float = DirectXPixelFormat::R16G16B16A16Float;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16UIntNormalized = DirectXPixelFormat::R16G16B16A16UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16UInt = DirectXPixelFormat::R16G16B16A16UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16IntNormalized = DirectXPixelFormat::R16G16B16A16IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16B16A16Int = DirectXPixelFormat::R16G16B16A16Int;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32Typeless = DirectXPixelFormat::R32G32Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32Float = DirectXPixelFormat::R32G32Float;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32UInt = DirectXPixelFormat::R32G32UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R32G32Int = DirectXPixelFormat::R32G32Int;
                    const DirectXPixelFormat DirectXPixelFormat_R32G8X24Typeless = DirectXPixelFormat::R32G8X24Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_D32FloatS8X24UInt = DirectXPixelFormat::D32FloatS8X24UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R32FloatX8X24Typeless = DirectXPixelFormat::R32FloatX8X24Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_X32TypelessG8X24UInt = DirectXPixelFormat::X32TypelessG8X24UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R10G10B10A2Typeless = DirectXPixelFormat::R10G10B10A2Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R10G10B10A2UIntNormalized = DirectXPixelFormat::R10G10B10A2UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R10G10B10A2UInt = DirectXPixelFormat::R10G10B10A2UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R11G11B10Float = DirectXPixelFormat::R11G11B10Float;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8Typeless = DirectXPixelFormat::R8G8B8A8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8UIntNormalized = DirectXPixelFormat::R8G8B8A8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8UIntNormalizedSrgb = DirectXPixelFormat::R8G8B8A8UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8UInt = DirectXPixelFormat::R8G8B8A8UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8IntNormalized = DirectXPixelFormat::R8G8B8A8IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8A8Int = DirectXPixelFormat::R8G8B8A8Int;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16Typeless = DirectXPixelFormat::R16G16Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16Float = DirectXPixelFormat::R16G16Float;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16UIntNormalized = DirectXPixelFormat::R16G16UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16UInt = DirectXPixelFormat::R16G16UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16IntNormalized = DirectXPixelFormat::R16G16IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16G16Int = DirectXPixelFormat::R16G16Int;
                    const DirectXPixelFormat DirectXPixelFormat_R32Typeless = DirectXPixelFormat::R32Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_D32Float = DirectXPixelFormat::D32Float;
                    const DirectXPixelFormat DirectXPixelFormat_R32Float = DirectXPixelFormat::R32Float;
                    const DirectXPixelFormat DirectXPixelFormat_R32UInt = DirectXPixelFormat::R32UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R32Int = DirectXPixelFormat::R32Int;
                    const DirectXPixelFormat DirectXPixelFormat_R24G8Typeless = DirectXPixelFormat::R24G8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_D24UIntNormalizedS8UInt = DirectXPixelFormat::D24UIntNormalizedS8UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R24UIntNormalizedX8Typeless = DirectXPixelFormat::R24UIntNormalizedX8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_X24TypelessG8UInt = DirectXPixelFormat::X24TypelessG8UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8Typeless = DirectXPixelFormat::R8G8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8UIntNormalized = DirectXPixelFormat::R8G8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8UInt = DirectXPixelFormat::R8G8UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8IntNormalized = DirectXPixelFormat::R8G8IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8Int = DirectXPixelFormat::R8G8Int;
                    const DirectXPixelFormat DirectXPixelFormat_R16Typeless = DirectXPixelFormat::R16Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R16Float = DirectXPixelFormat::R16Float;
                    const DirectXPixelFormat DirectXPixelFormat_D16UIntNormalized = DirectXPixelFormat::D16UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16UIntNormalized = DirectXPixelFormat::R16UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16UInt = DirectXPixelFormat::R16UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R16IntNormalized = DirectXPixelFormat::R16IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R16Int = DirectXPixelFormat::R16Int;
                    const DirectXPixelFormat DirectXPixelFormat_R8Typeless = DirectXPixelFormat::R8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_R8UIntNormalized = DirectXPixelFormat::R8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8UInt = DirectXPixelFormat::R8UInt;
                    const DirectXPixelFormat DirectXPixelFormat_R8IntNormalized = DirectXPixelFormat::R8IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R8Int = DirectXPixelFormat::R8Int;
                    const DirectXPixelFormat DirectXPixelFormat_A8UIntNormalized = DirectXPixelFormat::A8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R1UIntNormalized = DirectXPixelFormat::R1UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R9G9B9E5SharedExponent = DirectXPixelFormat::R9G9B9E5SharedExponent;
                    const DirectXPixelFormat DirectXPixelFormat_R8G8B8G8UIntNormalized = DirectXPixelFormat::R8G8B8G8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_G8R8G8B8UIntNormalized = DirectXPixelFormat::G8R8G8B8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC1Typeless = DirectXPixelFormat::BC1Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC1UIntNormalized = DirectXPixelFormat::BC1UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC1UIntNormalizedSrgb = DirectXPixelFormat::BC1UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_BC2Typeless = DirectXPixelFormat::BC2Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC2UIntNormalized = DirectXPixelFormat::BC2UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC2UIntNormalizedSrgb = DirectXPixelFormat::BC2UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_BC3Typeless = DirectXPixelFormat::BC3Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC3UIntNormalized = DirectXPixelFormat::BC3UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC3UIntNormalizedSrgb = DirectXPixelFormat::BC3UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_BC4Typeless = DirectXPixelFormat::BC4Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC4UIntNormalized = DirectXPixelFormat::BC4UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC4IntNormalized = DirectXPixelFormat::BC4IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC5Typeless = DirectXPixelFormat::BC5Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC5UIntNormalized = DirectXPixelFormat::BC5UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC5IntNormalized = DirectXPixelFormat::BC5IntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_B5G6R5UIntNormalized = DirectXPixelFormat::B5G6R5UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_B5G5R5A1UIntNormalized = DirectXPixelFormat::B5G5R5A1UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8A8UIntNormalized = DirectXPixelFormat::B8G8R8A8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8X8UIntNormalized = DirectXPixelFormat::B8G8R8X8UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_R10G10B10XRBiasA2UIntNormalized = DirectXPixelFormat::R10G10B10XRBiasA2UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8A8Typeless = DirectXPixelFormat::B8G8R8A8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8A8UIntNormalizedSrgb = DirectXPixelFormat::B8G8R8A8UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8X8Typeless = DirectXPixelFormat::B8G8R8X8Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_B8G8R8X8UIntNormalizedSrgb = DirectXPixelFormat::B8G8R8X8UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_BC6HTypeless = DirectXPixelFormat::BC6HTypeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC6H16UnsignedFloat = DirectXPixelFormat::BC6H16UnsignedFloat;
                    const DirectXPixelFormat DirectXPixelFormat_BC6H16Float = DirectXPixelFormat::BC6H16Float;
                    const DirectXPixelFormat DirectXPixelFormat_BC7Typeless = DirectXPixelFormat::BC7Typeless;
                    const DirectXPixelFormat DirectXPixelFormat_BC7UIntNormalized = DirectXPixelFormat::BC7UIntNormalized;
                    const DirectXPixelFormat DirectXPixelFormat_BC7UIntNormalizedSrgb = DirectXPixelFormat::BC7UIntNormalizedSrgb;
                    const DirectXPixelFormat DirectXPixelFormat_Ayuv = DirectXPixelFormat::Ayuv;
                    const DirectXPixelFormat DirectXPixelFormat_Y410 = DirectXPixelFormat::Y410;
                    const DirectXPixelFormat DirectXPixelFormat_Y416 = DirectXPixelFormat::Y416;
                    const DirectXPixelFormat DirectXPixelFormat_NV12 = DirectXPixelFormat::NV12;
                    const DirectXPixelFormat DirectXPixelFormat_P010 = DirectXPixelFormat::P010;
                    const DirectXPixelFormat DirectXPixelFormat_P016 = DirectXPixelFormat::P016;
                    const DirectXPixelFormat DirectXPixelFormat_Opaque420 = DirectXPixelFormat::Opaque420;
                    const DirectXPixelFormat DirectXPixelFormat_Yuy2 = DirectXPixelFormat::Yuy2;
                    const DirectXPixelFormat DirectXPixelFormat_Y210 = DirectXPixelFormat::Y210;
                    const DirectXPixelFormat DirectXPixelFormat_Y216 = DirectXPixelFormat::Y216;
                    const DirectXPixelFormat DirectXPixelFormat_NV11 = DirectXPixelFormat::NV11;
                    const DirectXPixelFormat DirectXPixelFormat_AI44 = DirectXPixelFormat::AI44;
                    const DirectXPixelFormat DirectXPixelFormat_IA44 = DirectXPixelFormat::IA44;
                    const DirectXPixelFormat DirectXPixelFormat_P8 = DirectXPixelFormat::P8;
                    const DirectXPixelFormat DirectXPixelFormat_A8P8 = DirectXPixelFormat::A8P8;
                    const DirectXPixelFormat DirectXPixelFormat_B4G4R4A4UIntNormalized = DirectXPixelFormat::B4G4R4A4UIntNormalized;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        
                        typedef struct Direct3DMultisampleDescription
                            {
                            INT32 Count;
                            INT32 Quality;
                            } 	Direct3DMultisampleDescription;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        
                        typedef struct Direct3DSurfaceDescription
                            {
                            INT32 Width;
                            INT32 Height;
                            ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat Format;
                            Direct3DMultisampleDescription MultisampleDescription;
                            } 	Direct3DSurfaceDescription;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        
                        typedef /* [v1_enum] */ 
                        MIDL_ENUM Direct3DUsage
                            {
                                Default	= 0,
                                Immutable	= 1,
                                Dynamic	= 2,
                                Staging	= 3
                            } 	xDirect3DUsage;
                        

                        const xDirect3DUsage Direct3DUsage_Default = xDirect3DUsage::Default;
                        const xDirect3DUsage Direct3DUsage_Immutable = xDirect3DUsage::Immutable;
                        const xDirect3DUsage Direct3DUsage_Dynamic = xDirect3DUsage::Dynamic;
                        const xDirect3DUsage Direct3DUsage_Staging = xDirect3DUsage::Staging;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace DirectX {
                    namespace Direct3D11 {
                        
                        typedef /* [v1_enum] */ 
                        MIDL_ENUM Direct3DBindings
                            {
                                VertexBuffer	= 0x1,
                                IndexBuffer	= 0x2,
                                ConstantBuffer	= 0x4,
                                ShaderResource	= 0x8,
                                StreamOutput	= 0x10,
                                RenderTarget	= 0x20,
                                DepthStencil	= 0x40,
                                UnorderedAccess	= 0x80,
                                Decoder	= 0x200,
                                VideoEncoder	= 0x400
                            } 	xDirect3DBindings;
                        

                        const xDirect3DBindings Direct3DBindings_VertexBuffer = xDirect3DBindings::VertexBuffer;
                        const xDirect3DBindings Direct3DBindings_IndexBuffer = xDirect3DBindings::IndexBuffer;
                        const xDirect3DBindings Direct3DBindings_ConstantBuffer = xDirect3DBindings::ConstantBuffer;
                        const xDirect3DBindings Direct3DBindings_ShaderResource = xDirect3DBindings::ShaderResource;
                        const xDirect3DBindings Direct3DBindings_StreamOutput = xDirect3DBindings::StreamOutput;
                        const xDirect3DBindings Direct3DBindings_RenderTarget = xDirect3DBindings::RenderTarget;
                        const xDirect3DBindings Direct3DBindings_DepthStencil = xDirect3DBindings::DepthStencil;
                        const xDirect3DBindings Direct3DBindings_UnorderedAccess = xDirect3DBindings::UnorderedAccess;
                        const xDirect3DBindings Direct3DBindings_Decoder = xDirect3DBindings::Decoder;
                        const xDirect3DBindings Direct3DBindings_VideoEncoder = xDirect3DBindings::VideoEncoder;
                        
                    } /* end namespace */
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0020_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DDevice */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace DirectX {
                        namespace Direct3D11 {
                            
                            MIDL_INTERFACE("24F4A47F-911C-4E60-AA3B-556B15CD8CE6")
                            IDirect3DDevice : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Trim( void) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IDirect3DDevice = __uuidof(IDirect3DDevice);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Trim )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDeviceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_Trim(This)	\
    ( (This)->lpVtbl -> Trim(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0021 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_DirectX_Direct3D11_IDirect3DSurface[] = L"Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0021 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0021_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace DirectX {
                        namespace Direct3D11 {
                            
                            MIDL_INTERFACE("04E9D2A5-9AA1-47DA-9FFC-D481CDDAC4EE")
                            IDirect3DSurface : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::Direct3DSurfaceDescription *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_IDirect3DSurface = __uuidof(IDirect3DSurface);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CDirect3DSurfaceDescription *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_get_Description(This,value)	\
    ( (This)->lpVtbl -> get_Description(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0022 */
/* [local] */ 

#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode
    {
        EffectBorderMode_Soft	= 0,
        EffectBorderMode_Hard	= 1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization
    {
        EffectOptimization_Speed	= 0,
        EffectOptimization_Balanced	= 1,
        EffectOptimization_Quality	= 2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect
    {
        EffectChannelSelect_Red	= 0,
        EffectChannelSelect_Green	= 1,
        EffectChannelSelect_Blue	= 2,
        EffectChannelSelect_Alpha	= 3
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGraphicsEffectSource[] = L"Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0022 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM EffectBorderMode
                        {
                            Soft	= 0,
                            Hard	= 1
                        } 	EffectBorderMode;
                    

                    const EffectBorderMode EffectBorderMode_Soft = EffectBorderMode::Soft;
                    const EffectBorderMode EffectBorderMode_Hard = EffectBorderMode::Hard;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM EffectOptimization
                        {
                            Speed	= 0,
                            Balanced	= 1,
                            Quality	= 2
                        } 	EffectOptimization;
                    

                    const EffectOptimization EffectOptimization_Speed = EffectOptimization::Speed;
                    const EffectOptimization EffectOptimization_Balanced = EffectOptimization::Balanced;
                    const EffectOptimization EffectOptimization_Quality = EffectOptimization::Quality;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM EffectChannelSelect
                        {
                            Red	= 0,
                            Green	= 1,
                            Blue	= 2,
                            Alpha	= 3
                        } 	EffectChannelSelect;
                    

                    const EffectChannelSelect EffectChannelSelect_Red = EffectChannelSelect::Red;
                    const EffectChannelSelect EffectChannelSelect_Green = EffectChannelSelect::Green;
                    const EffectChannelSelect EffectChannelSelect_Blue = EffectChannelSelect::Blue;
                    const EffectChannelSelect EffectChannelSelect_Alpha = EffectChannelSelect::Alpha;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0022_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("FA3AA76D-074E-4EAC-8FC7-306B0629F301")
                        IGraphicsEffectSource : public IInspectable
                        {
                        public:
                        };

                        extern const __declspec(selectany) IID & IID_IGraphicsEffectSource = __uuidof(IGraphicsEffectSource);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSourceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0023 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGraphicsEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGraphicsEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0023 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0023_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3A339957-A95E-490E-A1BF-2CBF4806C378")
                        IGraphicsEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
                                /* [out][retval] */ HSTRING *name) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
                                /* [in] */ HSTRING name) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGraphicsEffect = __uuidof(IGraphicsEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [out][retval] */ HSTRING *name);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect * This,
            /* [in] */ HSTRING name);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_get_Name(This,name)	\
    ( (This)->lpVtbl -> get_Name(This,name) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_put_Name(This,name)	\
    ( (This)->lpVtbl -> put_Name(This,name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0024 */
/* [local] */ 

#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4
    {
    float M11;
    float M12;
    float M13;
    float M14;
    float M21;
    float M22;
    float M23;
    float M24;
    float M31;
    float M32;
    float M33;
    float M34;
    float M41;
    float M42;
    float M43;
    float M44;
    float M51;
    float M52;
    float M53;
    float M54;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasDrawingSession;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImage[] = L"Microsoft.Graphics.Canvas.ICanvasImage";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0024 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef struct Matrix5x4
                        {
                        float M11;
                        float M12;
                        float M13;
                        float M14;
                        float M21;
                        float M22;
                        float M23;
                        float M24;
                        float M31;
                        float M32;
                        float M33;
                        float M34;
                        float M41;
                        float M42;
                        float M43;
                        float M44;
                        float M51;
                        float M52;
                        float M53;
                        float M54;
                        } 	Matrix5x4;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0024_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasImage */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("794966D3-6A64-47E9-8DA8-B46AAA24D53B")
                    ICanvasImage : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetBounds( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession,
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetBoundsWithTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasImage = __uuidof(ICanvasImage);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *GetBoundsWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBounds(This,drawingSession,bounds)	\
    ( (This)->lpVtbl -> GetBounds(This,drawingSession,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBoundsWithTransform(This,drawingSession,transform,bounds)	\
    ( (This)->lpVtbl -> GetBoundsWithTransform(This,drawingSession,transform,bounds) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0025 */
/* [local] */ 

#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
    {
        CanvasDpiRounding_Floor	= 0,
        CanvasDpiRounding_Round	= 1,
        CanvasDpiRounding_Ceiling	= 2
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreator[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreator";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0025 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasDpiRounding
                    {
                        Floor	= 0,
                        Round	= 1,
                        Ceiling	= 2
                    } 	CanvasDpiRounding;
                

                const CanvasDpiRounding CanvasDpiRounding_Floor = CanvasDpiRounding::Floor;
                const CanvasDpiRounding CanvasDpiRounding_Round = CanvasDpiRounding::Round;
                const CanvasDpiRounding CanvasDpiRounding_Ceiling = CanvasDpiRounding::Ceiling;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0025_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11")
                    ICanvasResourceCreator : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasResourceCreator = __uuidof(ICanvasResourceCreator);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0026 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0026 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0026_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("1A75B512-E9FA-49E6-A876-38CAE194013E")
                    ICanvasResourceCreatorWithDpi : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                            /* [out][retval] */ float *dpi) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                            /* [in] */ INT32 pixels,
                            /* [out][retval] */ float *dips) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                            /* [in] */ float dips,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                            /* [out][retval] */ INT32 *pixels) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasResourceCreatorWithDpi = __uuidof(ICanvasResourceCreatorWithDpi);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [out][retval] */ float *dpi);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0027 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceFactory[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0027 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0027_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDeviceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("E2C2BF21-5418-43B9-A2DA-539E287C790F")
                    ICanvasDeviceFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithForceSoftwareRendererOption( 
                            /* [in] */ boolean forceSoftwareRenderer,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDeviceFactory = __uuidof(ICanvasDeviceFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithForceSoftwareRendererOption )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
            /* [in] */ boolean forceSoftwareRenderer,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice)	\
    ( (This)->lpVtbl -> CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0028 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceStatics[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0028 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0028_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDeviceStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C")
                    ICanvasDeviceStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Device( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DDevice *direct3DDevice,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSharedDevice( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetSharedDeviceWithForceSoftwareRenderer( 
                            /* [in] */ boolean forceSoftwareRenderer,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **canvasDevice) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DebugLevel( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DebugLevel( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel *value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDeviceStatics = __uuidof(ICanvasDeviceStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DDevice *direct3DDevice,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedDeviceWithForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ boolean forceSoftwareRenderer,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **canvasDevice);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DebugLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DebugLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDevice(This,canvasDevice)	\
    ( (This)->lpVtbl -> GetSharedDevice(This,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice)	\
    ( (This)->lpVtbl -> GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_put_DebugLevel(This,value)	\
    ( (This)->lpVtbl -> put_DebugLevel(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_get_DebugLevel(This,value)	\
    ( (This)->lpVtbl -> get_DebugLevel(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_2117 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2117 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2117_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0030 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0030 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0030_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ef539eb5-aa23-573f-ba41-ccd7f3150c5b")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *sender,
            /* [in] */ IInspectable *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *sender,
            /* [in] */ IInspectable *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0031 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDevice[] = L"Microsoft.Graphics.Canvas.ICanvasDevice";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0031 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0031_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDevice */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6")
                    ICanvasDevice : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaximumBitmapSizeInPixels( 
                            /* [out][retval] */ INT32 *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE add_DeviceLost( 
                            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable *value,
                            /* [out][retval] */ EventRegistrationToken *token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE remove_DeviceLost( 
                            /* [in] */ EventRegistrationToken token) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE IsDeviceLost( 
                            /* [in] */ int hresult,
                            /* [out][retval] */ boolean *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE RaiseDeviceLost( void) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDevice = __uuidof(ICanvasDevice);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ boolean *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumBitmapSizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [out][retval] */ INT32 *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_DeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_DeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *IsDeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
            /* [in] */ int hresult,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *RaiseDeviceLost )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_MaximumBitmapSizeInPixels(This,value)	\
    ( (This)->lpVtbl -> get_MaximumBitmapSizeInPixels(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_add_DeviceLost(This,value,token)	\
    ( (This)->lpVtbl -> add_DeviceLost(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_remove_DeviceLost(This,token)	\
    ( (This)->lpVtbl -> remove_DeviceLost(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsDeviceLost(This,hresult,value)	\
    ( (This)->lpVtbl -> IsDeviceLost(This,hresult,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_RaiseDeviceLost(This)	\
    ( (This)->lpVtbl -> RaiseDeviceLost(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0032 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDevice[] = L"Microsoft.Graphics.Canvas.CanvasDevice";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0032 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0032_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("F5D58591-C803-41B4-878E-79D92AB13295")
                        ICanvasBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Opacity( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Opacity( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Transform( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Transform( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasBrush = __uuidof(ICanvasBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Opacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Opacity(This,value)	\
    ( (This)->lpVtbl -> get_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Opacity(This,value)	\
    ( (This)->lpVtbl -> put_Opacity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Transform(This,value)	\
    ( (This)->lpVtbl -> get_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Transform(This,value)	\
    ( (This)->lpVtbl -> put_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0033 */
/* [local] */ 

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasSolidColorBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0033 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0033_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("8ABF4780-4EDD-4F2B-BF63-2C385115B201")
                        ICanvasSolidColorBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color color,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush **canvasSolidColorBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSolidColorBrushFactory = __uuidof(ICanvasSolidColorBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush **canvasSolidColorBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Create(This,resourceCreator,color,canvasSolidColorBrush)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,color,canvasSolidColorBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0034 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0034 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0034_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("8BC30F87-BAD5-4871-88B8-9FE3C63D204A")
                        ICanvasSolidColorBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasSolidColorBrush = __uuidof(ICanvasSolidColorBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0035 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasImageBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0035 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0035_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("C40CCB59-1B87-4394-A6A6-ECD278E877D6")
                        ICanvasImageBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush **canvasImageBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithImage( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush **canvasImageBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasImageBrushFactory = __uuidof(ICanvasImageBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush **canvasImageBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithImage )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush **canvasImageBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Create(This,resourceCreator,canvasImageBrush)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,canvasImageBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_CreateWithImage(This,resourceCreator,image,canvasImageBrush)	\
    ( (This)->lpVtbl -> CreateWithImage(This,resourceCreator,image,canvasImageBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0036 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0036 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0036_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("5A21C4E7-D450-4942-8BBD-F017097AB763")
                        ICanvasImageBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendX( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendX( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendY( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendY( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ __FIReference_1_Windows__CFoundation__CRect **value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ __FIReference_1_Windows__CFoundation__CRect *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Interpolation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Interpolation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasImageBrush = __uuidof(ICanvasImageBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __FIReference_1_Windows__CFoundation__CRect **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __FIReference_1_Windows__CFoundation__CRect *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Image(This,value)	\
    ( (This)->lpVtbl -> get_Image(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Image(This,value)	\
    ( (This)->lpVtbl -> put_Image(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendX(This,value)	\
    ( (This)->lpVtbl -> get_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendX(This,value)	\
    ( (This)->lpVtbl -> put_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendY(This,value)	\
    ( (This)->lpVtbl -> get_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendY(This,value)	\
    ( (This)->lpVtbl -> put_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Interpolation(This,value)	\
    ( (This)->lpVtbl -> get_Interpolation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Interpolation(This,value)	\
    ( (This)->lpVtbl -> put_Interpolation(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0037 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush";
#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop
    {
    float Position;
    __x_ABI_CWindows_CUI_CColor Color;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop;

#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasLinearGradientBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0037 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    
                    typedef struct CanvasGradientStop
                        {
                        float Position;
                        ABI::Windows::UI::Color Color;
                        } 	CanvasGradientStop;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0037_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54")
                        ICanvasLinearGradientBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color startColor,
                                /* [in] */ ABI::Windows::UI::Color endColor,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrushFactory = __uuidof(ICanvasLinearGradientBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor startColor,
            /* [in] */ __x_ABI_CWindows_CUI_CColor endColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0038 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0038 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0038_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD")
                        ICanvasLinearGradientBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EndPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stops( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EdgeBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferPrecision( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrush = __uuidof(ICanvasLinearGradientBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_StartPoint(This,value)	\
    ( (This)->lpVtbl -> get_StartPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_StartPoint(This,value)	\
    ( (This)->lpVtbl -> put_StartPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EndPoint(This,value)	\
    ( (This)->lpVtbl -> get_EndPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_EndPoint(This,value)	\
    ( (This)->lpVtbl -> put_EndPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_Stops(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Stops(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EdgeBehavior(This,value)	\
    ( (This)->lpVtbl -> get_EdgeBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PreInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PreInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PostInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PostInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0039 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0039 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0039_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37")
                        ICanvasLinearGradientBrushStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateRainbow( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float eldritchness,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush **canvasLinearGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasLinearGradientBrushStatics = __uuidof(ICanvasLinearGradientBrushStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRainbow )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float eldritchness,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush **canvasLinearGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush)	\
    ( (This)->lpVtbl -> CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0040 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Brushes {
class CanvasRadialGradientBrush;
} /*Brushes*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0040 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0040_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("7933A51F-A910-4548-849F-42DDEC466F41")
                        ICanvasRadialGradientBrushFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateSimple( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::UI::Color startColor,
                                /* [in] */ ABI::Windows::UI::Color endColor,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithStops( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 gradientStopCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop *gradientStops,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrushFactory = __uuidof(ICanvasRadialGradientBrushFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSimple )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CColor startColor,
            /* [in] */ __x_ABI_CWindows_CUI_CColor endColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithStops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 gradientStopCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop *gradientStops,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0041 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0041 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0041_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("4D27D756-14A9-4EB7-973F-E6614D4F89E7")
                        ICanvasRadialGradientBrush : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Center( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Center( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginOffset( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginOffset( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadiusX( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadiusX( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadiusY( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadiusY( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stops( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop **valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EdgeBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasColorSpace *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferPrecision( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrush = __uuidof(ICanvasRadialGradientBrush);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Center )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Center )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadiusX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadiusX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadiusY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadiusY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stops )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop **valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Center(This,value)	\
    ( (This)->lpVtbl -> get_Center(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_Center(This,value)	\
    ( (This)->lpVtbl -> put_Center(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_OriginOffset(This,value)	\
    ( (This)->lpVtbl -> get_OriginOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_OriginOffset(This,value)	\
    ( (This)->lpVtbl -> put_OriginOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusX(This,value)	\
    ( (This)->lpVtbl -> get_RadiusX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusX(This,value)	\
    ( (This)->lpVtbl -> put_RadiusX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusY(This,value)	\
    ( (This)->lpVtbl -> get_RadiusY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusY(This,value)	\
    ( (This)->lpVtbl -> put_RadiusY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Stops(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_Stops(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_EdgeBehavior(This,value)	\
    ( (This)->lpVtbl -> get_EdgeBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PreInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PreInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PostInterpolationSpace(This,value)	\
    ( (This)->lpVtbl -> get_PostInterpolationSpace(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_BufferPrecision(This,value)	\
    ( (This)->lpVtbl -> get_BufferPrecision(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0042 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0042 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0042_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Brushes {
                        
                        MIDL_INTERFACE("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE")
                        ICanvasRadialGradientBrushStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateRainbow( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float eldritchness,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush **canvasRadialGradientBrush) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasRadialGradientBrushStatics = __uuidof(ICanvasRadialGradientBrushStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRainbow )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float eldritchness,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush **canvasRadialGradientBrush);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush)	\
    ( (This)->lpVtbl -> CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0043 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush";
#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize
    {
    UINT32 Width;
    UINT32 Height;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize;

#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
    {
        CanvasBitmapFileFormat_Auto	= 0,
        CanvasBitmapFileFormat_Bmp	= ( CanvasBitmapFileFormat_Auto + 1 ) ,
        CanvasBitmapFileFormat_Png	= ( CanvasBitmapFileFormat_Bmp + 1 ) ,
        CanvasBitmapFileFormat_Jpeg	= ( CanvasBitmapFileFormat_Png + 1 ) ,
        CanvasBitmapFileFormat_Tiff	= ( CanvasBitmapFileFormat_Jpeg + 1 ) ,
        CanvasBitmapFileFormat_Gif	= ( CanvasBitmapFileFormat_Tiff + 1 ) ,
        CanvasBitmapFileFormat_JpegXR	= ( CanvasBitmapFileFormat_Gif + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapFactory[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0043 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef struct BitmapSize
                    {
                    UINT32 Width;
                    UINT32 Height;
                    } 	BitmapSize;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasBitmapFileFormat
                    {
                        Auto	= 0,
                        Bmp	= ( Auto + 1 ) ,
                        Png	= ( Bmp + 1 ) ,
                        Jpeg	= ( Png + 1 ) ,
                        Tiff	= ( Jpeg + 1 ) ,
                        Gif	= ( Tiff + 1 ) ,
                        JpegXR	= ( Gif + 1 ) 
                    } 	CanvasBitmapFileFormat;
                

                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Auto = CanvasBitmapFileFormat::Auto;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Bmp = CanvasBitmapFileFormat::Bmp;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Png = CanvasBitmapFileFormat::Png;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Jpeg = CanvasBitmapFileFormat::Jpeg;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Tiff = CanvasBitmapFileFormat::Tiff;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Gif = CanvasBitmapFileFormat::Gif;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_JpegXR = CanvasBitmapFileFormat::JpegXR;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0043_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmapFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4")
                    ICanvasBitmapFactory : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmapFactory = __uuidof(ICanvasBitmapFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0044 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasBitmap";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0044 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0044_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmap */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE")
                    ICanvasBitmap : public IInspectable
                    {
                    public:
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Bounds( 
                            /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                            /* [out][retval] */ float *dpi) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                            /* [in] */ INT32 pixels,
                            /* [out][retval] */ float *dips) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                            /* [in] */ float dips,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                            /* [out][retval] */ INT32 *pixels) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAndQualityAsync( 
                            /* [in] */ HSTRING fileName,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToStreamAsync( 
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SaveToStreamWithQualityAsync( 
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                            /* [in] */ float quality,
                            /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytes( 
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithSubrectangle( 
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height,
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ BYTE **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelColors( 
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ ABI::Windows::UI::Color **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE GetPixelColorsWithSubrectangle( 
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height,
                            /* [out] */ UINT32 *valueCount,
                            /* [out][size_is][size_is][retval] */ ABI::Windows::UI::Color **valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytes( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ BYTE *valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithSubrectangle( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ BYTE *valueElements,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelColors( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *valueElements) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE SetPixelColorsWithSubrectangle( 
                            /* [in] */ UINT32 valueCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *valueElements,
                            /* [in] */ INT32 left,
                            /* [in] */ INT32 top,
                            /* [in] */ INT32 width,
                            /* [in] */ INT32 height) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmap( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPoint( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap,
                            /* [in] */ INT32 destX,
                            /* [in] */ INT32 destY) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPointAndSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *otherBitmap,
                            /* [in] */ INT32 destX,
                            /* [in] */ INT32 destY,
                            /* [in] */ INT32 sourceRectLeft,
                            /* [in] */ INT32 sourceRectTop,
                            /* [in] */ INT32 sourceRectWidth,
                            /* [in] */ INT32 sourceRectHeight) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmap = __uuidof(ICanvasBitmap);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ float *dpi);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAndQualityAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ HSTRING fileName,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToStreamAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToStreamWithQualityAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
            /* [in] */ float quality,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ BYTE **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CUI_CColor **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetPixelColorsWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CUI_CColor **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ BYTE *valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ BYTE *valueElements,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *SetPixelColorsWithSubrectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *valueElements,
            /* [in] */ INT32 left,
            /* [in] */ INT32 top,
            /* [in] */ INT32 width,
            /* [in] */ INT32 height);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap,
            /* [in] */ INT32 destX,
            /* [in] */ INT32 destY);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPointAndSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *otherBitmap,
            /* [in] */ INT32 destX,
            /* [in] */ INT32 destY,
            /* [in] */ INT32 sourceRectLeft,
            /* [in] */ INT32 sourceRectTop,
            /* [in] */ INT32 sourceRectWidth,
            /* [in] */ INT32 sourceRectHeight);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Bounds(This,bounds)	\
    ( (This)->lpVtbl -> get_Bounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Format(This,value)	\
    ( (This)->lpVtbl -> get_Format(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileAsync(This,fileName,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileAsync(This,fileName,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction)	\
    ( (This)->lpVtbl -> SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamAsync(This,stream,fileFormat,asyncAction)	\
    ( (This)->lpVtbl -> SaveToStreamAsync(This,stream,fileFormat,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction)	\
    ( (This)->lpVtbl -> SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelBytes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColors(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelColors(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytes(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> SetPixelBytes(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height)	\
    ( (This)->lpVtbl -> SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColors(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> SetPixelColors(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height)	\
    ( (This)->lpVtbl -> SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmap(This,otherBitmap)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmap(This,otherBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight)	\
    ( (This)->lpVtbl -> CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_2118 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2118 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2118_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0046 */
/* [local] */ 

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)



/* interface __MIDL_itf_Canvas2Eabi_0000_0046 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0046_v0_0_s_ifspec;

#ifndef ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01f4b012-b7d5-5e02-8caa-2c460f35c947")
    __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *asyncInfo,
            /* [in] */ AsyncStatus status) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *asyncInfo,
            /* [in] */ AsyncStatus status);
        
        END_INTERFACE
    } __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0047 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */


/* interface __MIDL_itf_Canvas2Eabi_0000_0047 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0047_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2119 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2119 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2119_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0048 */
/* [local] */ 

#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0048 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0048_v0_0_s_ifspec;

#ifndef ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 



/* interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0391e8ef-719a-5c80-b87a-7d902b154e3e")
    __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap : public IInspectable
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Completed( 
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *handler) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Completed( 
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResults( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **results) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [in] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *handler);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [retval][out] */ __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **handler);
        
        HRESULT ( STDMETHODCALLTYPE *GetResults )( 
            __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **results);
        
        END_INTERFACE
    } __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

    interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
    {
        CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0049 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0049 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0049_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasBitmapStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC")
                    ICanvasBitmapStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytes( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 byteCount,
                            /* [in][size_is] */ BYTE *bytes,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColors( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ UINT32 colorCount,
                            /* [in][size_is] */ ABI::Windows::UI::Color *colors,
                            /* [in] */ INT32 widthInPixels,
                            /* [in] */ INT32 heightInPixels,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstring( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ HSTRING fileName,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUri( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::IUriRuntimeClass *uri,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStream( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ float dpi,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::Storage::Streams::IRandomAccessStream *stream,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasBitmapStatics = __uuidof(ICanvasBitmapStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytes )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 byteCount,
            /* [in][size_is] */ BYTE *bytes,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColors )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 colorCount,
            /* [in][size_is] */ __x_ABI_CWindows_CUI_CColor *colors,
            /* [in] */ INT32 widthInPixels,
            /* [in] */ INT32 heightInPixels,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstring )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING fileName,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUri )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *uri,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStream )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ float dpi,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream *stream,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **canvasBitmap);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap)	\
    ( (This)->lpVtbl -> LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0050 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasBitmap[] = L"Microsoft.Graphics.Canvas.CanvasBitmap";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasRenderTarget;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0050 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0050_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7")
                    ICanvasRenderTargetFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::Size size,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndFormatAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **renderTarget) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTargetFactory = __uuidof(ICanvasRenderTargetFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndFormatAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **renderTarget);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithSize(This,resourceCreator,size,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0051 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0051 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0051_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5")
                    ICanvasRenderTargetStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::Direct3D11::IDirect3DSurface *surface,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget **bitmap) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTargetStatics = __uuidof(ICanvasRenderTargetStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirect3D11_CIDirect3DSurface *surface,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget **bitmap);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap)	\
    ( (This)->lpVtbl -> CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0052 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTarget";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0052 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0052_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B")
                    ICanvasRenderTarget : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasRenderTarget = __uuidof(ICanvasRenderTarget);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_CreateDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,drawingSession) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0053 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.CanvasRenderTarget";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasStrokeStyle;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0053 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0053_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB")
                        ICanvasStrokeStyle : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EndCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashCap( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashCap( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineJoin( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineJoin( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MiterLimit( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MiterLimit( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyle( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashStyle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DashOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDashStyle( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDashStyle( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformBehavior( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformBehavior( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasStrokeStyle = __uuidof(ICanvasStrokeStyle);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashCap )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineJoin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineJoin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MiterLimit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MiterLimit )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DashOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDashStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformBehavior )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_StartCap(This,value)	\
    ( (This)->lpVtbl -> get_StartCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_StartCap(This,value)	\
    ( (This)->lpVtbl -> put_StartCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_EndCap(This,value)	\
    ( (This)->lpVtbl -> get_EndCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_EndCap(This,value)	\
    ( (This)->lpVtbl -> put_EndCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashCap(This,value)	\
    ( (This)->lpVtbl -> get_DashCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashCap(This,value)	\
    ( (This)->lpVtbl -> put_DashCap(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_LineJoin(This,value)	\
    ( (This)->lpVtbl -> get_LineJoin(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_LineJoin(This,value)	\
    ( (This)->lpVtbl -> put_LineJoin(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_MiterLimit(This,value)	\
    ( (This)->lpVtbl -> get_MiterLimit(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_MiterLimit(This,value)	\
    ( (This)->lpVtbl -> put_MiterLimit(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashStyle(This,value)	\
    ( (This)->lpVtbl -> get_DashStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashStyle(This,value)	\
    ( (This)->lpVtbl -> put_DashStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashOffset(This,value)	\
    ( (This)->lpVtbl -> get_DashOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashOffset(This,value)	\
    ( (This)->lpVtbl -> put_DashOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_CustomDashStyle(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_CustomDashStyle(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_CustomDashStyle(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_CustomDashStyle(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_TransformBehavior(This,value)	\
    ( (This)->lpVtbl -> get_TransformBehavior(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_TransformBehavior(This,value)	\
    ( (This)->lpVtbl -> put_TransformBehavior(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0054 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextFormat;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
    {
        CanvasTextDirection_LeftToRightThenTopToBottom	= 0,
        CanvasTextDirection_RightToLeftThenTopToBottom	= ( CanvasTextDirection_LeftToRightThenTopToBottom + 1 ) ,
        CanvasTextDirection_LeftToRightThenBottomToTop	= ( CanvasTextDirection_RightToLeftThenTopToBottom + 1 ) ,
        CanvasTextDirection_RightToLeftThenBottomToTop	= ( CanvasTextDirection_LeftToRightThenBottomToTop + 1 ) ,
        CanvasTextDirection_TopToBottomThenLeftToRight	= ( CanvasTextDirection_RightToLeftThenBottomToTop + 1 ) ,
        CanvasTextDirection_BottomToTopThenLeftToRight	= ( CanvasTextDirection_TopToBottomThenLeftToRight + 1 ) ,
        CanvasTextDirection_TopToBottomThenRightToLeft	= ( CanvasTextDirection_BottomToTopThenLeftToRight + 1 ) ,
        CanvasTextDirection_BottomToTopThenRightToLeft	= ( CanvasTextDirection_TopToBottomThenRightToLeft + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
    {
        CanvasHorizontalAlignment_Left	= 0,
        CanvasHorizontalAlignment_Right	= ( CanvasHorizontalAlignment_Left + 1 ) ,
        CanvasHorizontalAlignment_Center	= ( CanvasHorizontalAlignment_Right + 1 ) ,
        CanvasHorizontalAlignment_Justified	= ( CanvasHorizontalAlignment_Center + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
    {
        CanvasVerticalAlignment_Top	= 0,
        CanvasVerticalAlignment_Bottom	= ( CanvasVerticalAlignment_Top + 1 ) ,
        CanvasVerticalAlignment_Center	= ( CanvasVerticalAlignment_Bottom + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
    {
        CanvasTextTrimmingGranularity_None	= 0,
        CanvasTextTrimmingGranularity_Character	= ( CanvasTextTrimmingGranularity_None + 1 ) ,
        CanvasTextTrimmingGranularity_Word	= ( CanvasTextTrimmingGranularity_Character + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
    {
        CanvasWordWrapping_Wrap	= 0,
        CanvasWordWrapping_NoWrap	= ( CanvasWordWrapping_Wrap + 1 ) ,
        CanvasWordWrapping_EmergencyBreak	= ( CanvasWordWrapping_NoWrap + 1 ) ,
        CanvasWordWrapping_WholeWord	= ( CanvasWordWrapping_EmergencyBreak + 1 ) ,
        CanvasWordWrapping_Character	= ( CanvasWordWrapping_WholeWord + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormat";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0054 */
/* [local] */ 


#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextDirection
                        {
                            LeftToRightThenTopToBottom	= 0,
                            RightToLeftThenTopToBottom	= ( LeftToRightThenTopToBottom + 1 ) ,
                            LeftToRightThenBottomToTop	= ( RightToLeftThenTopToBottom + 1 ) ,
                            RightToLeftThenBottomToTop	= ( LeftToRightThenBottomToTop + 1 ) ,
                            TopToBottomThenLeftToRight	= ( RightToLeftThenBottomToTop + 1 ) ,
                            BottomToTopThenLeftToRight	= ( TopToBottomThenLeftToRight + 1 ) ,
                            TopToBottomThenRightToLeft	= ( BottomToTopThenLeftToRight + 1 ) ,
                            BottomToTopThenRightToLeft	= ( TopToBottomThenRightToLeft + 1 ) 
                        } 	CanvasTextDirection;
                    

                    const CanvasTextDirection CanvasTextDirection_LeftToRightThenTopToBottom = CanvasTextDirection::LeftToRightThenTopToBottom;
                    const CanvasTextDirection CanvasTextDirection_RightToLeftThenTopToBottom = CanvasTextDirection::RightToLeftThenTopToBottom;
                    const CanvasTextDirection CanvasTextDirection_LeftToRightThenBottomToTop = CanvasTextDirection::LeftToRightThenBottomToTop;
                    const CanvasTextDirection CanvasTextDirection_RightToLeftThenBottomToTop = CanvasTextDirection::RightToLeftThenBottomToTop;
                    const CanvasTextDirection CanvasTextDirection_TopToBottomThenLeftToRight = CanvasTextDirection::TopToBottomThenLeftToRight;
                    const CanvasTextDirection CanvasTextDirection_BottomToTopThenLeftToRight = CanvasTextDirection::BottomToTopThenLeftToRight;
                    const CanvasTextDirection CanvasTextDirection_TopToBottomThenRightToLeft = CanvasTextDirection::TopToBottomThenRightToLeft;
                    const CanvasTextDirection CanvasTextDirection_BottomToTopThenRightToLeft = CanvasTextDirection::BottomToTopThenRightToLeft;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasHorizontalAlignment
                        {
                            Left	= 0,
                            Right	= ( Left + 1 ) ,
                            Center	= ( Right + 1 ) ,
                            Justified	= ( Center + 1 ) 
                        } 	CanvasHorizontalAlignment;
                    

                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Left = CanvasHorizontalAlignment::Left;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Right = CanvasHorizontalAlignment::Right;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Center = CanvasHorizontalAlignment::Center;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Justified = CanvasHorizontalAlignment::Justified;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasVerticalAlignment
                        {
                            Top	= 0,
                            Bottom	= ( Top + 1 ) ,
                            Center	= ( Bottom + 1 ) 
                        } 	CanvasVerticalAlignment;
                    

                    const CanvasVerticalAlignment CanvasVerticalAlignment_Top = CanvasVerticalAlignment::Top;
                    const CanvasVerticalAlignment CanvasVerticalAlignment_Bottom = CanvasVerticalAlignment::Bottom;
                    const CanvasVerticalAlignment CanvasVerticalAlignment_Center = CanvasVerticalAlignment::Center;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasTextTrimmingGranularity
                        {
                            None	= 0,
                            Character	= ( None + 1 ) ,
                            Word	= ( Character + 1 ) 
                        } 	CanvasTextTrimmingGranularity;
                    

                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_None = CanvasTextTrimmingGranularity::None;
                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Character = CanvasTextTrimmingGranularity::Character;
                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Word = CanvasTextTrimmingGranularity::Word;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasWordWrapping
                        {
                            Wrap	= 0,
                            NoWrap	= ( Wrap + 1 ) ,
                            EmergencyBreak	= ( NoWrap + 1 ) ,
                            WholeWord	= ( EmergencyBreak + 1 ) ,
                            Character	= ( WholeWord + 1 ) 
                        } 	CanvasWordWrapping;
                    

                    const CanvasWordWrapping CanvasWordWrapping_Wrap = CanvasWordWrapping::Wrap;
                    const CanvasWordWrapping CanvasWordWrapping_NoWrap = CanvasWordWrapping::NoWrap;
                    const CanvasWordWrapping CanvasWordWrapping_EmergencyBreak = CanvasWordWrapping::EmergencyBreak;
                    const CanvasWordWrapping CanvasWordWrapping_WholeWord = CanvasWordWrapping::WholeWord;
                    const CanvasWordWrapping CanvasWordWrapping_Character = CanvasWordWrapping::Character;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0054_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("AF61BFDC-EABB-4D38-BA1B-AFB340612D33")
                        ICanvasTextFormat : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Direction( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Direction( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontStretch( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStretch( 
                                /* [in] */ ABI::Windows::UI::Text::FontStretch value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontStyle( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
                                /* [in] */ ABI::Windows::UI::Text::FontStyle value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FontWeight( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontWeight( 
                                /* [in] */ ABI::Windows::UI::Text::FontWeight value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncrementalTabStop( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncrementalTabStop( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocaleName( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LocaleName( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingGranularity( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingGranularity( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WordWrapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WordWrapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Options( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextFormat = __uuidof(ICanvasTextFormat);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStretch value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStyle value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontWeight value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Direction(This,value)	\
    ( (This)->lpVtbl -> get_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Direction(This,value)	\
    ( (This)->lpVtbl -> put_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontFamily(This,value)	\
    ( (This)->lpVtbl -> get_FontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontFamily(This,value)	\
    ( (This)->lpVtbl -> put_FontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontSize(This,value)	\
    ( (This)->lpVtbl -> get_FontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontSize(This,value)	\
    ( (This)->lpVtbl -> put_FontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStretch(This,value)	\
    ( (This)->lpVtbl -> get_FontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStretch(This,value)	\
    ( (This)->lpVtbl -> put_FontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStyle(This,value)	\
    ( (This)->lpVtbl -> get_FontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStyle(This,value)	\
    ( (This)->lpVtbl -> put_FontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontWeight(This,value)	\
    ( (This)->lpVtbl -> get_FontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontWeight(This,value)	\
    ( (This)->lpVtbl -> put_FontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> get_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> put_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LocaleName(This,value)	\
    ( (This)->lpVtbl -> get_LocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LocaleName(This,value)	\
    ( (This)->lpVtbl -> put_LocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> get_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> put_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Options(This,value)	\
    ( (This)->lpVtbl -> get_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Options(This,value)	\
    ( (This)->lpVtbl -> put_Options(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0055 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0055 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0055_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("8A927515-33FC-4C92-A6AA-94A8F29C140B")
                        ICanvasTextFormatStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamilies( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ HSTRING **valueElements) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamiliesFromLocaleList( 
                                /* [in] */ __FIVectorView_1_HSTRING *localeList,
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ HSTRING **valueElements) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextFormatStatics = __uuidof(ICanvasTextFormatStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamilies )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ HSTRING **valueElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamiliesFromLocaleList )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
            /* [in] */ __FIVectorView_1_HSTRING *localeList,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ HSTRING **valueElements);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamilies(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSystemFontFamilies(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements)	\
    ( (This)->lpVtbl -> GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0056 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextFormat";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Text {
class CanvasTextLayout;
} /*Text*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
    {
        CanvasOpticalAlignment_Default	= 0,
        CanvasOpticalAlignment_NoSideBearings	= ( CanvasOpticalAlignment_Default + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
    {
        CanvasVerticalGlyphOrientation_Default	= 0,
        CanvasVerticalGlyphOrientation_Stacked	= ( CanvasVerticalGlyphOrientation_Default + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion
    {
    int CharacterIndex;
    int CharacterCount;
    __x_ABI_CWindows_CFoundation_CRect LayoutBounds;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayout";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0056 */
/* [local] */ 


#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasOpticalAlignment
                        {
                            Default	= 0,
                            NoSideBearings	= ( Default + 1 ) 
                        } 	CanvasOpticalAlignment;
                    

                    const CanvasOpticalAlignment CanvasOpticalAlignment_Default = CanvasOpticalAlignment::Default;
                    const CanvasOpticalAlignment CanvasOpticalAlignment_NoSideBearings = CanvasOpticalAlignment::NoSideBearings;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasVerticalGlyphOrientation
                        {
                            Default	= 0,
                            Stacked	= ( Default + 1 ) 
                        } 	CanvasVerticalGlyphOrientation;
                    

                    const CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Default = CanvasVerticalGlyphOrientation::Default;
                    const CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Stacked = CanvasVerticalGlyphOrientation::Stacked;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    
                    typedef struct CanvasTextLayoutRegion
                        {
                        int CharacterIndex;
                        int CharacterCount;
                        ABI::Windows::Foundation::Rect LayoutBounds;
                        } 	CanvasTextLayoutRegion;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0056_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("BAE63E54-48AE-4446-A2C7-B6EF93806C20")
                        ICanvasTextLayout : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE GetFormatChangeIndices( 
                                /* [out] */ UINT32 *stopCount,
                                /* [out][size_is][size_is][retval] */ INT32 **stops) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Direction( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Direction( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontFamily( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontSize( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontStretch( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontStyle( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFontWeight( 
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncrementalTabStop( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncrementalTabStop( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultLocaleName( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HorizontalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingGranularity( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingGranularity( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter( 
                                /* [out][retval] */ HSTRING *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter( 
                                /* [in] */ HSTRING value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WordWrapping( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WordWrapping( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Options( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RequestedSize( 
                                /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RequestedSize( 
                                /* [in] */ ABI::Windows::Foundation::Size value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMinimumLineLength( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush **brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontFamily( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ HSTRING *fontFamily) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontSize( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *fontSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontStretch( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStretch *fontStretch) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontStyle( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontStyle *fontStyle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetFontWeight( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ ABI::Windows::UI::Text::FontWeight *fontWeight) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLocaleName( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ HSTRING *localeName) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetStrikethrough( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasStrikethrough) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetUnderline( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasUnderline) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetColor( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Color color) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetBrush( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontFamily( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ HSTRING fontFamily) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontSize( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ float fontSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontStretch( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontStretch fontStretch) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontStyle( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontStyle fontStyle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFontWeight( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ ABI::Windows::UI::Text::FontWeight fontWeight) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetLocaleName( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ HSTRING name) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetStrikethrough( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasStrikethrough) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetUnderline( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasUnderline) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LayoutBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LineCount( 
                                /* [out][retval] */ INT32 *lineCount) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTest( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescription( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndTrailingSide( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out] */ boolean *trailingSideOfCharacter,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoordsAndTrailingSide( 
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out] */ boolean *trailingSideOfCharacter,
                                /* [out][retval] */ boolean *isHit) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCaretPosition( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ boolean trailingSideOfCharacter,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *location) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCaretPositionWithDescription( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ boolean trailingSideOfCharacter,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion *textLayoutRegion,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *location) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetCharacterRegions( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [out] */ UINT32 *hitTestDescriptionCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion **hitTestDescriptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetPairKerning( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ boolean *hasPairKerning) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetPairKerning( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ boolean hasPairKerning) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetLeadingCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *leadingSpacing) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTrailingCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *trailingSpacing) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetMinimumCharacterAdvance( 
                                /* [in] */ INT32 characterIndex,
                                /* [out][retval] */ float *minimumAdvance) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetCharacterSpacing( 
                                /* [in] */ INT32 characterIndex,
                                /* [in] */ INT32 characterCount,
                                /* [in] */ float leadingSpacing,
                                /* [in] */ float trailingSpacing,
                                /* [in] */ float minimumAdvance) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VerticalGlyphOrientation( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VerticalGlyphOrientation( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpticalAlignment( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpticalAlignment( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastLineWrapping( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LastLineWrapping( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextLayout = __uuidof(ICanvasTextLayout);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormatChangeIndices )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out] */ UINT32 *stopCount,
            /* [out][size_is][size_is][retval] */ INT32 **stops);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Direction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ HSTRING *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ HSTRING value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Options )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RequestedSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize value);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinimumLineLength )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ float *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush **brush);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ HSTRING *fontFamily);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStretch *fontStretch);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontStyle *fontStyle);
        
        HRESULT ( STDMETHODCALLTYPE *GetFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CText_CFontWeight *fontWeight);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ HSTRING *localeName);
        
        HRESULT ( STDMETHODCALLTYPE *GetStrikethrough )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasStrikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnderline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasUnderline);
        
        HRESULT ( STDMETHODCALLTYPE *SetColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *SetBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontFamily )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ HSTRING fontFamily);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ float fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontStretch )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStretch fontStretch);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontStyle fontStyle);
        
        HRESULT ( STDMETHODCALLTYPE *SetFontWeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ __x_ABI_CWindows_CUI_CText_CFontWeight fontWeight);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocaleName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ HSTRING name);
        
        HRESULT ( STDMETHODCALLTYPE *SetStrikethrough )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasStrikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *SetUnderline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasUnderline);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ INT32 *lineCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescription )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndTrailingSide )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out] */ boolean *trailingSideOfCharacter,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoordsAndTrailingSide )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out] */ boolean *trailingSideOfCharacter,
            /* [out][retval] */ boolean *isHit);
        
        HRESULT ( STDMETHODCALLTYPE *GetCaretPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ boolean trailingSideOfCharacter,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *location);
        
        HRESULT ( STDMETHODCALLTYPE *GetCaretPositionWithDescription )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ boolean trailingSideOfCharacter,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion *textLayoutRegion,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *location);
        
        HRESULT ( STDMETHODCALLTYPE *GetCharacterRegions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [out] */ UINT32 *hitTestDescriptionCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion **hitTestDescriptions);
        
        HRESULT ( STDMETHODCALLTYPE *GetPairKerning )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ boolean *hasPairKerning);
        
        HRESULT ( STDMETHODCALLTYPE *SetPairKerning )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ boolean hasPairKerning);
        
        HRESULT ( STDMETHODCALLTYPE *GetLeadingCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *leadingSpacing);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrailingCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *trailingSpacing);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinimumCharacterAdvance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [out][retval] */ float *minimumAdvance);
        
        HRESULT ( STDMETHODCALLTYPE *SetCharacterSpacing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ INT32 characterIndex,
            /* [in] */ INT32 characterCount,
            /* [in] */ float leadingSpacing,
            /* [in] */ float trailingSpacing,
            /* [in] */ float minimumAdvance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalGlyphOrientation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpticalAlignment )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastLineWrapping )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFormatChangeIndices(This,stopCount,stops)	\
    ( (This)->lpVtbl -> GetFormatChangeIndices(This,stopCount,stops) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Direction(This,value)	\
    ( (This)->lpVtbl -> get_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Direction(This,value)	\
    ( (This)->lpVtbl -> put_Direction(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontFamily(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontFamily(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontSize(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStretch(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontStretch(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStyle(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontStyle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontWeight(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFontWeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> get_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_IncrementalTabStop(This,value)	\
    ( (This)->lpVtbl -> put_IncrementalTabStop(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacing(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> get_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacingBaseline(This,value)	\
    ( (This)->lpVtbl -> put_LineSpacingBaseline(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultLocaleName(This,value)	\
    ( (This)->lpVtbl -> get_DefaultLocaleName(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_HorizontalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_HorizontalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingGranularity(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingGranularity(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiter(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiter(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> get_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiterCount(This,value)	\
    ( (This)->lpVtbl -> put_TrimmingDelimiterCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> get_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_WordWrapping(This,value)	\
    ( (This)->lpVtbl -> put_WordWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Options(This,value)	\
    ( (This)->lpVtbl -> get_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Options(This,value)	\
    ( (This)->lpVtbl -> put_Options(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_RequestedSize(This,value)	\
    ( (This)->lpVtbl -> get_RequestedSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_RequestedSize(This,value)	\
    ( (This)->lpVtbl -> put_RequestedSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumLineLength(This,value)	\
    ( (This)->lpVtbl -> GetMinimumLineLength(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetBrush(This,characterIndex,brush)	\
    ( (This)->lpVtbl -> GetBrush(This,characterIndex,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontFamily(This,characterIndex,fontFamily)	\
    ( (This)->lpVtbl -> GetFontFamily(This,characterIndex,fontFamily) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontSize(This,characterIndex,fontSize)	\
    ( (This)->lpVtbl -> GetFontSize(This,characterIndex,fontSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStretch(This,characterIndex,fontStretch)	\
    ( (This)->lpVtbl -> GetFontStretch(This,characterIndex,fontStretch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStyle(This,characterIndex,fontStyle)	\
    ( (This)->lpVtbl -> GetFontStyle(This,characterIndex,fontStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontWeight(This,characterIndex,fontWeight)	\
    ( (This)->lpVtbl -> GetFontWeight(This,characterIndex,fontWeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLocaleName(This,characterIndex,localeName)	\
    ( (This)->lpVtbl -> GetLocaleName(This,characterIndex,localeName) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetStrikethrough(This,characterIndex,hasStrikethrough)	\
    ( (This)->lpVtbl -> GetStrikethrough(This,characterIndex,hasStrikethrough) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetUnderline(This,characterIndex,hasUnderline)	\
    ( (This)->lpVtbl -> GetUnderline(This,characterIndex,hasUnderline) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetColor(This,characterIndex,characterCount,color)	\
    ( (This)->lpVtbl -> SetColor(This,characterIndex,characterCount,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetBrush(This,characterIndex,characterCount,brush)	\
    ( (This)->lpVtbl -> SetBrush(This,characterIndex,characterCount,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontFamily(This,characterIndex,characterCount,fontFamily)	\
    ( (This)->lpVtbl -> SetFontFamily(This,characterIndex,characterCount,fontFamily) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontSize(This,characterIndex,characterCount,fontSize)	\
    ( (This)->lpVtbl -> SetFontSize(This,characterIndex,characterCount,fontSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStretch(This,characterIndex,characterCount,fontStretch)	\
    ( (This)->lpVtbl -> SetFontStretch(This,characterIndex,characterCount,fontStretch) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStyle(This,characterIndex,characterCount,fontStyle)	\
    ( (This)->lpVtbl -> SetFontStyle(This,characterIndex,characterCount,fontStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontWeight(This,characterIndex,characterCount,fontWeight)	\
    ( (This)->lpVtbl -> SetFontWeight(This,characterIndex,characterCount,fontWeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetLocaleName(This,characterIndex,characterCount,name)	\
    ( (This)->lpVtbl -> SetLocaleName(This,characterIndex,characterCount,name) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough)	\
    ( (This)->lpVtbl -> SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetUnderline(This,characterIndex,characterCount,hasUnderline)	\
    ( (This)->lpVtbl -> SetUnderline(This,characterIndex,characterCount,hasUnderline) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LayoutBounds(This,bounds)	\
    ( (This)->lpVtbl -> get_LayoutBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineCount(This,lineCount)	\
    ( (This)->lpVtbl -> get_LineCount(This,lineCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DrawBounds(This,bounds)	\
    ( (This)->lpVtbl -> get_DrawBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTest(This,point,isHit)	\
    ( (This)->lpVtbl -> HitTest(This,point,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithCoords(This,x,y,isHit)	\
    ( (This)->lpVtbl -> HitTestWithCoords(This,x,y,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescription(This,point,textLayoutRegion,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescription(This,point,textLayoutRegion,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit)	\
    ( (This)->lpVtbl -> HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location)	\
    ( (This)->lpVtbl -> GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location)	\
    ( (This)->lpVtbl -> GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions)	\
    ( (This)->lpVtbl -> GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetPairKerning(This,characterIndex,hasPairKerning)	\
    ( (This)->lpVtbl -> GetPairKerning(This,characterIndex,hasPairKerning) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetPairKerning(This,characterIndex,characterCount,hasPairKerning)	\
    ( (This)->lpVtbl -> SetPairKerning(This,characterIndex,characterCount,hasPairKerning) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing)	\
    ( (This)->lpVtbl -> GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing)	\
    ( (This)->lpVtbl -> GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance)	\
    ( (This)->lpVtbl -> GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance)	\
    ( (This)->lpVtbl -> SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> get_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalGlyphOrientation(This,value)	\
    ( (This)->lpVtbl -> put_VerticalGlyphOrientation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> get_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_OpticalAlignment(This,value)	\
    ( (This)->lpVtbl -> put_OpticalAlignment(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> get_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LastLineWrapping(This,value)	\
    ( (This)->lpVtbl -> put_LastLineWrapping(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0057 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0057 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0057_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Text {
                        
                        MIDL_INTERFACE("9C1F7179-ACD0-4680-93D5-95A6247E8F6B")
                        ICanvasTextLayoutFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ HSTRING textString,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *textFormat,
                                /* [in] */ float requestedWidth,
                                /* [in] */ float requestedHeight,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout **canvasTextLayout) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasTextLayoutFactory = __uuidof(ICanvasTextLayoutFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ HSTRING textString,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *textFormat,
            /* [in] */ float requestedWidth,
            /* [in] */ float requestedHeight,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout **canvasTextLayout);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0058 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextLayout";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasPathBuilder;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasGeometry;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0058 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0058_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("BCF5822F-8127-4E5C-96B8-29983B915541")
                        ICanvasPathBuilder : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureWithFigureFill( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 startPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 startPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoordsWithFigureFill( 
                                /* [in] */ float startX,
                                /* [in] */ float startY,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoords( 
                                /* [in] */ float startX,
                                /* [in] */ float startY) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArcToPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float rotationAngle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArcAroundEllipse( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float startAngle,
                                /* [in] */ float sweepAngle) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddCubicBezier( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint1,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint2,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLine( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLineWithCoords( 
                                /* [in] */ float x,
                                /* [in] */ float y) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE EndFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddGeometry( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathBuilder = __uuidof(ICanvasPathBuilder);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureWithFigureFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 startPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 startPoint);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoordsWithFigureFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float startX,
            /* [in] */ float startY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float startX,
            /* [in] */ float startY);
        
        HRESULT ( STDMETHODCALLTYPE *AddArcToPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float rotationAngle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddArcAroundEllipse )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float startAngle,
            /* [in] */ float sweepAngle);
        
        HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint2,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLineWithCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ float x,
            /* [in] */ float y);
        
        HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination);
        
        HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions);
        
        HRESULT ( STDMETHODCALLTYPE *EndFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop);
        
        HRESULT ( STDMETHODCALLTYPE *AddGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureWithFigureFill(This,startPoint,figureFill)	\
    ( (This)->lpVtbl -> BeginFigureWithFigureFill(This,startPoint,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigure(This,startPoint)	\
    ( (This)->lpVtbl -> BeginFigure(This,startPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill)	\
    ( (This)->lpVtbl -> BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoords(This,startX,startY)	\
    ( (This)->lpVtbl -> BeginFigureAtCoords(This,startX,startY) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize)	\
    ( (This)->lpVtbl -> AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle)	\
    ( (This)->lpVtbl -> AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint)	\
    ( (This)->lpVtbl -> AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLine(This,endPoint)	\
    ( (This)->lpVtbl -> AddLine(This,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLineWithCoords(This,x,y)	\
    ( (This)->lpVtbl -> AddLineWithCoords(This,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddQuadraticBezier(This,controlPoint,endPoint)	\
    ( (This)->lpVtbl -> AddQuadraticBezier(This,controlPoint,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetFilledRegionDetermination(This,filledRegionDetermination)	\
    ( (This)->lpVtbl -> SetFilledRegionDetermination(This,filledRegionDetermination) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetSegmentOptions(This,figureSegmentOptions)	\
    ( (This)->lpVtbl -> SetSegmentOptions(This,figureSegmentOptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_EndFigure(This,figureLoop)	\
    ( (This)->lpVtbl -> EndFigure(This,figureLoop) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddGeometry(This,geometry)	\
    ( (This)->lpVtbl -> AddGeometry(This,geometry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0059 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0059 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0059_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilderFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("AC2BEE14-EFD1-4343-8E53-BA62153D8966")
                        ICanvasPathBuilderFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder **canvasPathBuilder) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathBuilderFactory = __uuidof(ICanvasPathBuilderFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder **canvasPathBuilder);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Create(This,resourceCreator,canvasPathBuilder)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,canvasPathBuilder) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0060 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder";
#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices
    {
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 Vertex1;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 Vertex2;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 Vertex3;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathReceiver[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0060 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    
                    typedef struct CanvasTriangleVertices
                        {
                        ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 Vertex1;
                        ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 Vertex2;
                        ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 Vertex3;
                        } 	CanvasTriangleVertices;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0060_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("70E65373-7FB3-4645-8B6D-F616D1B9A9D7")
                        ICanvasPathReceiver : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE BeginFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 startPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddArc( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [in] */ float rotationAngle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddCubicBezier( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint1,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint2,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddLine( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 controlPoint,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 endPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE EndFigure( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasPathReceiver = __uuidof(ICanvasPathReceiver);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *BeginFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 startPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill);
        
        HRESULT ( STDMETHODCALLTYPE *AddArc )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ float rotationAngle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint2,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 controlPoint,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 endPoint);
        
        HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination);
        
        HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions);
        
        HRESULT ( STDMETHODCALLTYPE *EndFigure )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_BeginFigure(This,startPoint,figureFill)	\
    ( (This)->lpVtbl -> BeginFigure(This,startPoint,figureFill) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize)	\
    ( (This)->lpVtbl -> AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint)	\
    ( (This)->lpVtbl -> AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddLine(This,endPoint)	\
    ( (This)->lpVtbl -> AddLine(This,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddQuadraticBezier(This,controlPoint,endPoint)	\
    ( (This)->lpVtbl -> AddQuadraticBezier(This,controlPoint,endPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetFilledRegionDetermination(This,filledRegionDetermination)	\
    ( (This)->lpVtbl -> SetFilledRegionDetermination(This,filledRegionDetermination) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetSegmentOptions(This,figureSegmentOptions)	\
    ( (This)->lpVtbl -> SetSegmentOptions(This,figureSegmentOptions) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_EndFigure(This,figureLoop)	\
    ( (This)->lpVtbl -> EndFigure(This,figureLoop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0061 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0061 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0061_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("74EA89FA-C87C-4D0D-9057-2743B8DB67EE")
                        ICanvasGeometry : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CombineWith( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CombineWithUsingFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Stroke( 
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeWithStrokeStyle( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeWithAllOptions( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Outline( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE OutlineWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Simplify( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SimplifyWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Transform( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CompareWith( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation *relation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CompareWithUsingTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *otherGeometry,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 otherGeometryTransform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation *relation) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeArea( 
                                /* [out][retval] */ float *area) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeAreaWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ float *area) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePathLength( 
                                /* [out][retval] */ float *length) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePathLengthWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ float *length) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPath( 
                                /* [in] */ float distance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTangent( 
                                /* [in] */ float distance,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *tangent,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent( 
                                /* [in] */ float length,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *tangent,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *point) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE FillContainsPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE FillContainsPointWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeBounds( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeBoundsWithTransform( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBounds( 
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithStrokeStyle( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithAllOptions( 
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *bounds) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithStrokeStyle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithAllOptions( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ boolean *containsPoint) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE Tessellate( 
                                /* [out] */ UINT32 *trianglesCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices **triangles) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE TessellateWithTransformAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 transform,
                                /* [in] */ float flatteningTolerance,
                                /* [out] */ UINT32 *trianglesCount,
                                /* [out][size_is][size_is][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices **triangles) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE SendPathTo( 
                                ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver *streamReader) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGeometry = __uuidof(ICanvasGeometry);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CombineWith )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CombineWithUsingFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Stroke )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Outline )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *OutlineWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Simplify )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *SimplifyWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CompareWith )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation *relation);
        
        HRESULT ( STDMETHODCALLTYPE *CompareWithUsingTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *otherGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 otherGeometryTransform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation *relation);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeArea )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ float *area);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeAreaWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ float *area);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePathLength )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ float *length);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePathLengthWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ float *length);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPath )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float distance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTangent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float distance,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *tangent,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float length,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *tangent,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *FillContainsPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *FillContainsPointWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeBoundsWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBounds )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ boolean *containsPoint);
        
        HRESULT ( STDMETHODCALLTYPE *Tessellate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out] */ UINT32 *trianglesCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices **triangles);
        
        HRESULT ( STDMETHODCALLTYPE *TessellateWithTransformAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 transform,
            /* [in] */ float flatteningTolerance,
            /* [out] */ UINT32 *trianglesCount,
            /* [out][size_is][size_is][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices **triangles);
        
        HRESULT ( STDMETHODCALLTYPE *SendPathTo )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver *streamReader);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry)	\
    ( (This)->lpVtbl -> CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Stroke(This,strokeWidth,geometry)	\
    ( (This)->lpVtbl -> Stroke(This,strokeWidth,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry)	\
    ( (This)->lpVtbl -> StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Outline(This,geometry)	\
    ( (This)->lpVtbl -> Outline(This,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Simplify(This,simplification,geometry)	\
    ( (This)->lpVtbl -> Simplify(This,simplification,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry)	\
    ( (This)->lpVtbl -> SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Transform(This,transform,geometry)	\
    ( (This)->lpVtbl -> Transform(This,transform,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWith(This,otherGeometry,relation)	\
    ( (This)->lpVtbl -> CompareWith(This,otherGeometry,relation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation)	\
    ( (This)->lpVtbl -> CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeArea(This,area)	\
    ( (This)->lpVtbl -> ComputeArea(This,area) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area)	\
    ( (This)->lpVtbl -> ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLength(This,length)	\
    ( (This)->lpVtbl -> ComputePathLength(This,length) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length)	\
    ( (This)->lpVtbl -> ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPath(This,distance,point)	\
    ( (This)->lpVtbl -> ComputePointOnPath(This,distance,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTangent(This,distance,tangent,point)	\
    ( (This)->lpVtbl -> ComputePointOnPathWithTangent(This,distance,tangent,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point)	\
    ( (This)->lpVtbl -> ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPoint(This,point,containsPoint)	\
    ( (This)->lpVtbl -> FillContainsPoint(This,point,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint)	\
    ( (This)->lpVtbl -> FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBounds(This,bounds)	\
    ( (This)->lpVtbl -> ComputeBounds(This,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBoundsWithTransform(This,transform,bounds)	\
    ( (This)->lpVtbl -> ComputeBoundsWithTransform(This,transform,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBounds(This,strokeWidth,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBounds(This,strokeWidth,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds)	\
    ( (This)->lpVtbl -> ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPoint(This,point,strokeWidth,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPoint(This,point,strokeWidth,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint)	\
    ( (This)->lpVtbl -> StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Tessellate(This,trianglesCount,triangles)	\
    ( (This)->lpVtbl -> Tessellate(This,trianglesCount,triangles) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles)	\
    ( (This)->lpVtbl -> TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SendPathTo(This,streamReader)	\
    ( (This)->lpVtbl -> SendPathTo(This,streamReader) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0062 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0062 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0062_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometryStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("D94E33CF-CD59-46F2-8DF4-55066AABFD56")
                        ICanvasGeometryStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect rect,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRectangleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float w,
                                /* [in] */ float h,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Windows::Foundation::Rect rect,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float w,
                                /* [in] */ float h,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateEllipse( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateEllipseAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float radiusX,
                                /* [in] */ float radiusY,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateCircle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                                /* [in] */ float radius,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateCircleAtCoords( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ float x,
                                /* [in] */ float y,
                                /* [in] */ float radius,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePath( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder *pathBuilder,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreatePolygon( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 pointCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *points,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateGroup( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 geometriesCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometries,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateGroupWithFilledRegionDetermination( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                /* [in] */ UINT32 geometriesCount,
                                /* [in][size_is] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometries,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry **geometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningTolerance( 
                                /* [in] */ float dpi,
                                /* [in] */ float maximumZoomFactor,
                                /* [out][retval] */ float *flatteningTolerance) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningToleranceWithTransform( 
                                /* [in] */ float dpi,
                                /* [in] */ float maximumZoomFactor,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 expectedGeometryTransform,
                                /* [out][retval] */ float *flatteningTolerance) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFlatteningTolerance( 
                                /* [out][retval] */ float *value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasGeometryStatics = __uuidof(ICanvasGeometryStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRectangleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEllipse )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEllipseAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCircle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCircleAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePath )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder *pathBuilder,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePolygon )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 pointCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *points,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateGroup )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 geometriesCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometries,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateGroupWithFilledRegionDetermination )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ UINT32 geometriesCount,
            /* [in][size_is] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometries,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry **geometry);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ float dpi,
            /* [in] */ float maximumZoomFactor,
            /* [out][retval] */ float *flatteningTolerance);
        
        HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningToleranceWithTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [in] */ float dpi,
            /* [in] */ float maximumZoomFactor,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 expectedGeometryTransform,
            /* [out][retval] */ float *flatteningTolerance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
            /* [out][retval] */ float *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangle(This,resourceCreator,rect,geometry)	\
    ( (This)->lpVtbl -> CreateRectangle(This,resourceCreator,rect,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry)	\
    ( (This)->lpVtbl -> CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry)	\
    ( (This)->lpVtbl -> CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircle(This,resourceCreator,centerPoint,radius,geometry)	\
    ( (This)->lpVtbl -> CreateCircle(This,resourceCreator,centerPoint,radius,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry)	\
    ( (This)->lpVtbl -> CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePath(This,pathBuilder,geometry)	\
    ( (This)->lpVtbl -> CreatePath(This,pathBuilder,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePolygon(This,resourceCreator,pointCount,points,geometry)	\
    ( (This)->lpVtbl -> CreatePolygon(This,resourceCreator,pointCount,points,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry)	\
    ( (This)->lpVtbl -> CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry)	\
    ( (This)->lpVtbl -> CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance)	\
    ( (This)->lpVtbl -> ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance)	\
    ( (This)->lpVtbl -> ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_get_DefaultFlatteningTolerance(This,value)	\
    ( (This)->lpVtbl -> get_DefaultFlatteningTolerance(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0063 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Geometry {
class CanvasCachedGeometry;
} /*Geometry*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0063 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0063_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0063_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("BA6CB114-E1A1-448D-AB7C-8D2B92674119")
                        ICanvasCachedGeometry : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCachedGeometry = __uuidof(ICanvasCachedGeometry);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0064 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0064 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0064_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometryStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Geometry {
                        
                        MIDL_INTERFACE("80BA1060-A9D7-41BA-9372-EC3FC1744E5D")
                        ICanvasCachedGeometryStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateFill( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateFillWithFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStroke( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyle( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyleAndFlatteningTolerance( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                                /* [in] */ float strokeWidth,
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle,
                                /* [in] */ float flatteningTolerance,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry **cachedGeometry) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCachedGeometryStatics = __uuidof(ICanvasCachedGeometryStatics);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFill )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFillWithFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStroke )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyleAndFlatteningTolerance )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle,
            /* [in] */ float flatteningTolerance,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry **cachedGeometry);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFill(This,geometry,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateFill(This,geometry,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStroke(This,geometry,strokeWidth,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStroke(This,geometry,strokeWidth,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry)	\
    ( (This)->lpVtbl -> CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0065 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasActiveLayer;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.ICanvasActiveLayer";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0065 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0065_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0065_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("49ECFC58-5E1C-4EE3-8088-542F94E93C60")
                    ICanvasActiveLayer : public IInspectable
                    {
                    public:
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasActiveLayer = __uuidof(ICanvasActiveLayer);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
            /* [out] */ TrustLevel *trustLevel);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0066 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.CanvasActiveLayer";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.ICanvasDrawingSession";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0066 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0066_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("F60AFD09-E623-4BE0-B750-578AA920B1DB")
                    ICanvasDrawingSession : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Clear( 
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOrigin( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffset( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoords( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRect( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacity( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasImage *image,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite composite) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasBitmap *bitmap,
                            /* [in] */ ABI::Windows::Foundation::Rect destinationRectangle,
                            /* [in] */ ABI::Windows::Foundation::Rect sourceRectangle,
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix4x4 perspective) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrush( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColor( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point0,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x0,
                            /* [in] */ float y0,
                            /* [in] */ float x1,
                            /* [in] */ float y1,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrushAndOpacityBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithBrush( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithColor( 
                            /* [in] */ ABI::Windows::Foundation::Rect rect,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radiusX,
                            /* [in] */ float radiusY,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithBrush( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 centerPoint,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithColor( 
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float radius,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColor( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColor( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Rect rectangle,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithBrushAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ ABI::Windows::Foundation::Rect rectangle,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithColorAndFormat( 
                            /* [in] */ HSTRING text,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ float w,
                            /* [in] */ float h,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat *format) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidth( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color,
                            /* [in] */ float strokeWidth,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle *strokeStyle) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrushAndOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 offset,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry *geometry,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *brush) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 point,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithColor( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout *textLayout,
                            /* [in] */ float x,
                            /* [in] */ float y,
                            /* [in] */ ABI::Windows::UI::Color color) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Antialiasing( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Antialiasing( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blend( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasBlend *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Blend( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasBlend value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TextAntialiasing( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TextAntialiasing( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Transform( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Transform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Units( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasUnits *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Units( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasUnits value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacity( 
                            /* [in] */ float opacity,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrush( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipRectangle( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipRectangle( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometry( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometry( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometryAndTransform( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 geometryTransform,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometryAndTransform( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 geometryTransform,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateLayerWithAllOptions( 
                            /* [in] */ float opacity,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush *opacityBrush,
                            /* [in] */ ABI::Windows::Foundation::Rect clipRectangle,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry *clipGeometry,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 geometryTransform,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasLayerOptions options,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer **layer) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasDrawingSession = __uuidof(ICanvasDrawingSession);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOrigin )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoords )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage *image,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap *bitmap,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect destinationRectangle,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect sourceRectangle,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4 perspective);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point0,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x0,
            /* [in] */ float y0,
            /* [in] */ float x1,
            /* [in] */ float y1,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rect,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radiusX,
            /* [in] */ float radiusY,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 centerPoint,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float radius,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithBrushAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect rectangle,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithColorAndFormat )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ HSTRING text,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ float w,
            /* [in] */ float h,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat *format);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color,
            /* [in] */ float strokeWidth,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle *strokeStyle);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrushAndOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush);
        
        HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 offset,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry *geometry,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *brush);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 point,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout *textLayout,
            /* [in] */ float x,
            /* [in] */ float y,
            /* [in] */ __x_ABI_CWindows_CUI_CColor color);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Antialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Antialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blend )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Blend )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAntialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAntialiasing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Transform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Units )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Units )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacity )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrush )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometry )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometryAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 geometryTransform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometryAndTransform )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 geometryTransform,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLayerWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
            /* [in] */ float opacity,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush *opacityBrush,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect clipRectangle,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry *clipGeometry,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 geometryTransform,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer **layer);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Clear(This,color)	\
    ( (This)->lpVtbl -> Clear(This,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOrigin(This,image)	\
    ( (This)->lpVtbl -> DrawImageAtOrigin(This,image) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffset(This,image,offset)	\
    ( (This)->lpVtbl -> DrawImageAtOffset(This,image,offset) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoords(This,image,x,y)	\
    ( (This)->lpVtbl -> DrawImageAtCoords(This,image,x,y) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRect(This,bitmap,destinationRectangle)	\
    ( (This)->lpVtbl -> DrawImageToRect(This,bitmap,destinationRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective)	\
    ( (This)->lpVtbl -> DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrush(This,point0,point1,brush)	\
    ( (This)->lpVtbl -> DrawLineWithBrush(This,point0,point1,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColor(This,point0,point1,color)	\
    ( (This)->lpVtbl -> DrawLineWithColor(This,point0,point1,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrush(This,rect,brush)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrush(This,rect,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColor(This,rect,color)	\
    ( (This)->lpVtbl -> DrawRectangleWithColor(This,rect,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColor(This,x,y,w,h,color)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColor(This,x,y,w,h,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrush(This,rect,brush)	\
    ( (This)->lpVtbl -> FillRectangleWithBrush(This,rect,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithColor(This,rect,color)	\
    ( (This)->lpVtbl -> FillRectangleWithColor(This,rect,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithColor(This,x,y,w,h,color)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithColor(This,x,y,w,h,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush)	\
    ( (This)->lpVtbl -> FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color)	\
    ( (This)->lpVtbl -> FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrush(This,centerPoint,radius,brush)	\
    ( (This)->lpVtbl -> DrawCircleWithBrush(This,centerPoint,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrush(This,x,y,radius,brush)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrush(This,x,y,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColor(This,centerPoint,radius,color)	\
    ( (This)->lpVtbl -> DrawCircleWithColor(This,centerPoint,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColor(This,x,y,radius,color)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColor(This,x,y,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithBrush(This,centerPoint,radius,brush)	\
    ( (This)->lpVtbl -> FillCircleWithBrush(This,centerPoint,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithBrush(This,x,y,radius,brush)	\
    ( (This)->lpVtbl -> FillCircleAtCoordsWithBrush(This,x,y,radius,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithColor(This,centerPoint,radius,color)	\
    ( (This)->lpVtbl -> FillCircleWithColor(This,centerPoint,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithColor(This,x,y,radius,color)	\
    ( (This)->lpVtbl -> FillCircleAtCoordsWithColor(This,x,y,radius,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColor(This,text,point,color)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithColor(This,text,point,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColor(This,text,x,y,color)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithColor(This,text,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColorAndFormat(This,text,point,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointWithColorAndFormat(This,text,point,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format)	\
    ( (This)->lpVtbl -> DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> DrawGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle)	\
    ( (This)->lpVtbl -> DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> FillGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> FillGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> FillGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> FillGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithBrush(This,geometry,offset,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryWithBrush(This,geometry,offset,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithColor(This,geometry,offset,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryWithColor(This,geometry,offset,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithBrush(This,geometry,brush)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtOriginWithBrush(This,geometry,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithColor(This,geometry,color)	\
    ( (This)->lpVtbl -> DrawCachedGeometryAtOriginWithColor(This,geometry,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithBrush(This,textLayout,point,brush)	\
    ( (This)->lpVtbl -> DrawTextLayoutWithBrush(This,textLayout,point,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush)	\
    ( (This)->lpVtbl -> DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithColor(This,textLayout,point,color)	\
    ( (This)->lpVtbl -> DrawTextLayoutWithColor(This,textLayout,point,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color)	\
    ( (This)->lpVtbl -> DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Antialiasing(This,value)	\
    ( (This)->lpVtbl -> get_Antialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Antialiasing(This,value)	\
    ( (This)->lpVtbl -> put_Antialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Blend(This,value)	\
    ( (This)->lpVtbl -> get_Blend(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Blend(This,value)	\
    ( (This)->lpVtbl -> put_Blend(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_TextAntialiasing(This,value)	\
    ( (This)->lpVtbl -> get_TextAntialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_TextAntialiasing(This,value)	\
    ( (This)->lpVtbl -> put_TextAntialiasing(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Transform(This,value)	\
    ( (This)->lpVtbl -> get_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Transform(This,value)	\
    ( (This)->lpVtbl -> put_Transform(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Units(This,value)	\
    ( (This)->lpVtbl -> get_Units(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Units(This,value)	\
    ( (This)->lpVtbl -> put_Units(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacity(This,opacity,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacity(This,opacity,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrush(This,opacityBrush,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrush(This,opacityBrush,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer)	\
    ( (This)->lpVtbl -> CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0067 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.CanvasDrawingSession";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasImageSource;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0067 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0067_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0067_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("8596BEDD-D7F7-4C6B-B1AD-41949035E084")
                            ICanvasImageSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ ABI::Windows::Foundation::Size size,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource **imageSource) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasImageSourceFactory = __uuidof(ICanvasImageSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource **imageSource);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0068 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0068 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0068_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3C35E87A-E881-4F44-B0D1-551413AEC66D")
                            ICanvasImageSource : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRectangle( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Recreate( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                                    /* [out][retval] */ float *dpi) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                                    /* [in] */ INT32 pixels,
                                    /* [out][retval] */ float *dips) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                                    /* [in] */ float dips,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                                    /* [out][retval] */ INT32 *pixels) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasImageSource = __uuidof(ICanvasImageSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        HRESULT ( STDMETHODCALLTYPE *Recreate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ float *dpi);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSession(This,clearColor,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Recreate(This,value)	\
    ( (This)->lpVtbl -> Recreate(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0069 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource";
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation
    {
        CanvasSwapChainRotation_None	= 0,
        CanvasSwapChainRotation_Rotate90	= ( CanvasSwapChainRotation_None + 1 ) ,
        CanvasSwapChainRotation_Rotate180	= ( CanvasSwapChainRotation_Rotate90 + 1 ) ,
        CanvasSwapChainRotation_Rotate270	= ( CanvasSwapChainRotation_Rotate180 + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasSwapChain;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0069 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef /* [v1_enum] */ 
                MIDL_ENUM CanvasSwapChainRotation
                    {
                        None	= 0,
                        Rotate90	= ( None + 1 ) ,
                        Rotate180	= ( Rotate90 + 1 ) ,
                        Rotate270	= ( Rotate180 + 1 ) 
                    } 	CanvasSwapChainRotation;
                

                const CanvasSwapChainRotation CanvasSwapChainRotation_None = CanvasSwapChainRotation::None;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate90 = CanvasSwapChainRotation::Rotate90;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate180 = CanvasSwapChainRotation::Rotate180;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate270 = CanvasSwapChainRotation::Rotate270;
                
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0069_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("133C25CB-ED3C-492B-BFFE-7509B521842B")
                    ICanvasSwapChainFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ ABI::Windows::Foundation::Size size,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateWithAllOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [in] */ INT32 bufferCount,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChainFactory = __uuidof(ICanvasSwapChainFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [in] */ INT32 bufferCount,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithSize(This,resourceCreator,size,swapChain)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain)	\
    ( (This)->lpVtbl -> CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0070 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainStatics";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0070 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0070_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainStatics */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("05376D8F-3E8D-4A82-9838-691680D32A52")
                    ICanvasSwapChainStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithDpi( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::UI::Core::ICoreWindow *coreWindow,
                            /* [in] */ float dpi,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithAllOptions( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [in] */ ABI::Windows::UI::Core::ICoreWindow *coreWindow,
                            /* [in] */ float width,
                            /* [in] */ float height,
                            /* [in] */ float dpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat format,
                            /* [in] */ INT32 bufferCount,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **swapChain) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChainStatics = __uuidof(ICanvasSwapChainStatics);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CICoreWindow *coreWindow,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CICoreWindow *coreWindow,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat format,
            /* [in] */ INT32 bufferCount,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **swapChain);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain)	\
    ( (This)->lpVtbl -> CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain)	\
    ( (This)->lpVtbl -> CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0071 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChain[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChain";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0071 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0071_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("882E3C3A-5725-409C-9E76-F80B3BACF1B4")
                    ICanvasSwapChain : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Present( void) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE PresentWithSyncInterval( 
                            /* [in] */ INT32 syncInterval) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithSize( 
                            /* [in] */ ABI::Windows::Foundation::Size newSize) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeight( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeightAndDpi( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight,
                            /* [in] */ float newDpi) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithAllOptions( 
                            /* [in] */ float newWidth,
                            /* [in] */ float newHeight,
                            /* [in] */ float newDpi,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat newFormat,
                            /* [in] */ INT32 bufferCount) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                            /* [out][retval] */ float *dpi) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::DirectX::DirectXPixelFormat *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BufferCount( 
                            /* [out][retval] */ INT32 *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceSize( 
                            /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceSize( 
                            /* [in] */ ABI::Windows::Foundation::Size value) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 *value) = 0;
                        
                        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 value) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                            /* [in] */ INT32 pixels,
                            /* [out][retval] */ float *dips) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                            /* [in] */ float dips,
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                            /* [out][retval] */ INT32 *pixels) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [in] */ ABI::Windows::UI::Color clearColor,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                        virtual HRESULT STDMETHODCALLTYPE WaitForVerticalBlank( void) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasSwapChain = __uuidof(ICanvasSwapChain);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Present )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        HRESULT ( STDMETHODCALLTYPE *PresentWithSyncInterval )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ INT32 syncInterval);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize newSize);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight,
            /* [in] */ float newDpi);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithAllOptions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float newWidth,
            /* [in] */ float newHeight,
            /* [in] */ float newDpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat newFormat,
            /* [in] */ INT32 bufferCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ float *dpi);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CDirectX_CDirectXPixelFormat *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferCount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 value);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *WaitForVerticalBlank )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Present(This)	\
    ( (This)->lpVtbl -> Present(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_PresentWithSyncInterval(This,syncInterval)	\
    ( (This)->lpVtbl -> PresentWithSyncInterval(This,syncInterval) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithSize(This,newSize)	\
    ( (This)->lpVtbl -> ResizeBuffersWithSize(This,newSize) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight)	\
    ( (This)->lpVtbl -> ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi)	\
    ( (This)->lpVtbl -> ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount)	\
    ( (This)->lpVtbl -> ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Format(This,value)	\
    ( (This)->lpVtbl -> get_Format(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_BufferCount(This,value)	\
    ( (This)->lpVtbl -> get_BufferCount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Rotation(This,value)	\
    ( (This)->lpVtbl -> get_Rotation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_Rotation(This,value)	\
    ( (This)->lpVtbl -> put_Rotation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SourceSize(This,value)	\
    ( (This)->lpVtbl -> get_SourceSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_SourceSize(This,value)	\
    ( (This)->lpVtbl -> put_SourceSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_CreateDrawingSession(This,clearColor,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_WaitForVerticalBlank(This)	\
    ( (This)->lpVtbl -> WaitForVerticalBlank(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0072 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSwapChain[] = L"Microsoft.Graphics.Canvas.CanvasSwapChain";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
class CanvasCommandList;
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandListFactory[] = L"Microsoft.Graphics.Canvas.ICanvasCommandListFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0072 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0072_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasCommandListFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("B3D44E68-D931-4B5B-B957-0888980A7D50")
                    ICanvasCommandListFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create( 
                            /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasCommandList **commandList) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasCommandListFactory = __uuidof(ICanvasCommandListFactory);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList **commandList);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Create(This,resourceCreator,commandList)	\
    ( (This)->lpVtbl -> Create(This,resourceCreator,commandList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0073 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandList[] = L"Microsoft.Graphics.Canvas.ICanvasCommandList";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0073 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0073_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::ICanvasCommandList */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    
                    MIDL_INTERFACE("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B")
                    ICanvasCommandList : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                        
                        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                            /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                        
                    };

                    extern const __declspec(selectany) IID & IID_ICanvasCommandList = __uuidof(ICanvasCommandList);

                    
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_CreateDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0074 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasCommandList[] = L"Microsoft.Graphics.Canvas.CanvasCommandList";
#endif
#if !defined(__cplusplus)
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation
    {
    INT64 UpdateCount;
    __x_ABI_CWindows_CFoundation_CTimeSpan TotalTime;
    __x_ABI_CWindows_CFoundation_CTimeSpan ElapsedTime;
    boolean IsRunningSlowly;
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation;

#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0074 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    typedef struct CanvasTimingInformation
                        {
                        INT64 UpdateCount;
                        ABI::Windows::Foundation::TimeSpan TotalTime;
                        ABI::Windows::Foundation::TimeSpan ElapsedTime;
                        boolean IsRunningSlowly;
                        } 	CanvasTimingInformation;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0074_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("766F4867-B22A-464B-89B1-0DA6AB62BE68")
                            ICanvasAnimatedUpdateEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs **updateEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedUpdateEventArgsFactory = __uuidof(ICanvasAnimatedUpdateEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs **updateEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Create(This,timingInformation,updateEventArgs)	\
    ( (This)->lpVtbl -> Create(This,timingInformation,updateEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0075 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0075 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0075_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("A96B2B2A-0C6E-4AA8-925B-7137263B4E44")
                            ICanvasAnimatedUpdateEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timing( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedUpdateEventArgs = __uuidof(ICanvasAnimatedUpdateEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_get_Timing(This,value)	\
    ( (This)->lpVtbl -> get_Timing(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0076 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0076 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0076_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2")
                            ICanvasAnimatedDrawEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *canvasDrawingSession,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs **animatedControlDrawEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedDrawEventArgsFactory = __uuidof(ICanvasAnimatedDrawEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *canvasDrawingSession,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs **animatedControlDrawEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs)	\
    ( (This)->lpVtbl -> Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0077 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0077 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0077_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F")
                            ICanvasAnimatedDrawEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawingSession( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Timing( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedDrawEventArgs = __uuidof(ICanvasAnimatedDrawEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Timing )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_DrawingSession(This,value)	\
    ( (This)->lpVtbl -> get_DrawingSession(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_Timing(This,value)	\
    ( (This)->lpVtbl -> get_Timing(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0078 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0078 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0078_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2120 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2120 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2120_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0079 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0079 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0079_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a29acd34-5ab2-50ff-b02d-e6737195de24")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0080 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0080 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0080_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2121 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2121 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2121_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0081 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0081 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0081_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f3505553-11e9-548c-80b6-33e56d2e673b")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0082 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0082 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0082_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2122 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2122 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2122_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0083 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0083 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0083_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00ddd999-594e-5c0f-b4a0-52b01171dcd6")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0084 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0084 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0084_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2123 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2123 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2123_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2123_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0085 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0085 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0085_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0085_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17e87476-4ea7-5920-a49e-a7a9e383c7dc")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl *sender,
            /* [in] */ IInspectable *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl *sender,
            /* [in] */ IInspectable *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0086 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0086 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0086_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0086_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("9BD47D0D-D57D-43B7-82CB-489CC566E887")
                            ICanvasAnimatedControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Update( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Update( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Draw( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Draw( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_GameLoopStarting( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStarting( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_GameLoopStopped( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStopped( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IsFixedTimeStep( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsFixedTimeStep( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TargetElapsedTime( 
                                    /* [in] */ ABI::Windows::Foundation::TimeSpan value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TargetElapsedTime( 
                                    /* [out][retval] */ ABI::Windows::Foundation::TimeSpan *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Paused( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Paused( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResetElapsedTime( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateCoreIndependentInputSource( 
                                    /* [in] */ ABI::Windows::UI::Core::CoreInputDeviceTypes deviceTypes,
                                    /* [out][retval] */ ABI::Windows::UI::Core::ICoreInputSourceBase **returnValue) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasGameLoopThreadAccess( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RunOnGameLoopThreadAsync( 
                                    /* [in] */ ABI::Windows::UI::Core::IDispatchedHandler *agileCallback,
                                    /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **asyncAction) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasAnimatedControl = __uuidof(ICanvasAnimatedControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Update )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Update )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_GameLoopStarting )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStarting )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *add_GameLoopStopped )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStopped )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsFixedTimeStep )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsFixedTimeStep )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TargetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CTimeSpan value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CTimeSpan *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Paused )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paused )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *value);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *ResetElapsedTime )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCoreIndependentInputSource )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes deviceTypes,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase **returnValue);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasGameLoopThreadAccess )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnGameLoopThreadAsync )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CCore_CIDispatchedHandler *agileCallback,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **asyncAction);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Update(This,value,token)	\
    ( (This)->lpVtbl -> add_Update(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Update(This,token)	\
    ( (This)->lpVtbl -> remove_Update(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Draw(This,value,token)	\
    ( (This)->lpVtbl -> add_Draw(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Draw(This,token)	\
    ( (This)->lpVtbl -> remove_Draw(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStarting(This,value,token)	\
    ( (This)->lpVtbl -> add_GameLoopStarting(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStarting(This,token)	\
    ( (This)->lpVtbl -> remove_GameLoopStarting(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStopped(This,value,token)	\
    ( (This)->lpVtbl -> add_GameLoopStopped(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStopped(This,token)	\
    ( (This)->lpVtbl -> remove_GameLoopStopped(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_IsFixedTimeStep(This,value)	\
    ( (This)->lpVtbl -> put_IsFixedTimeStep(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_IsFixedTimeStep(This,value)	\
    ( (This)->lpVtbl -> get_IsFixedTimeStep(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_TargetElapsedTime(This,value)	\
    ( (This)->lpVtbl -> put_TargetElapsedTime(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_TargetElapsedTime(This,value)	\
    ( (This)->lpVtbl -> get_TargetElapsedTime(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_Paused(This,value)	\
    ( (This)->lpVtbl -> put_Paused(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Paused(This,value)	\
    ( (This)->lpVtbl -> get_Paused(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_ResetElapsedTime(This)	\
    ( (This)->lpVtbl -> ResetElapsedTime(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_CreateCoreIndependentInputSource(This,deviceTypes,returnValue)	\
    ( (This)->lpVtbl -> CreateCoreIndependentInputSource(This,deviceTypes,returnValue) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_HasGameLoopThreadAccess(This,value)	\
    ( (This)->lpVtbl -> get_HasGameLoopThreadAccess(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RunOnGameLoopThreadAsync(This,agileCallback,asyncAction)	\
    ( (This)->lpVtbl -> RunOnGameLoopThreadAsync(This,agileCallback,asyncAction) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0087 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason
    {
        CanvasCreateResourcesReason_FirstTime	= 0,
        CanvasCreateResourcesReason_NewDevice	= ( CanvasCreateResourcesReason_FirstTime + 1 ) ,
        CanvasCreateResourcesReason_DpiChanged	= ( CanvasCreateResourcesReason_NewDevice + 1 ) 
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason;


#endif /* end if !defined(__cplusplus) */


#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0087 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM CanvasCreateResourcesReason
                        {
                            FirstTime	= 0,
                            NewDevice	= ( FirstTime + 1 ) ,
                            DpiChanged	= ( NewDevice + 1 ) 
                        } 	CanvasCreateResourcesReason;
                    

                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_FirstTime = CanvasCreateResourcesReason::FirstTime;
                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_NewDevice = CanvasCreateResourcesReason::NewDevice;
                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_DpiChanged = CanvasCreateResourcesReason::DpiChanged;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0087_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        
                        MIDL_INTERFACE("3A21C766-0781-4389-BBC3-86B1F5022AF1")
                        ICanvasCreateResourcesEventArgsFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason createResourcesReason,
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs **CreateResourcesEventArgs) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCreateResourcesEventArgsFactory = __uuidof(ICanvasCreateResourcesEventArgsFactory);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason createResourcesReason,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs **CreateResourcesEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Create(This,createResourcesReason,CreateResourcesEventArgs)	\
    ( (This)->lpVtbl -> Create(This,createResourcesReason,CreateResourcesEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0088 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0088 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0088_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        
                        MIDL_INTERFACE("EDC52108-F6BA-4A09-9FA3-10C97A24E49A")
                        ICanvasCreateResourcesEventArgs : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Reason( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason *value) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE TrackAsyncAction( 
                                /* [in] */ ABI::Windows::Foundation::IAsyncAction *action) = 0;
                            
                            virtual HRESULT STDMETHODCALLTYPE GetTrackedAction( 
                                /* [out][retval] */ ABI::Windows::Foundation::IAsyncAction **action) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICanvasCreateResourcesEventArgs = __uuidof(ICanvasCreateResourcesEventArgs);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reason )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason *value);
        
        HRESULT ( STDMETHODCALLTYPE *TrackAsyncAction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CIAsyncAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrackedAction )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CIAsyncAction **action);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_get_Reason(This,value)	\
    ( (This)->lpVtbl -> get_Reason(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_TrackAsyncAction(This,action)	\
    ( (This)->lpVtbl -> TrackAsyncAction(This,action) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrackedAction(This,action)	\
    ( (This)->lpVtbl -> GetTrackedAction(This,action) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0089 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0089 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0089_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44")
                            ICanvasDrawEventArgsFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE Create( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *canvasDrawingSession,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs **drawEventArgs) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasDrawEventArgsFactory = __uuidof(ICanvasDrawEventArgsFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *canvasDrawingSession,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs **drawEventArgs);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Create(This,canvasDrawingSession,drawEventArgs)	\
    ( (This)->lpVtbl -> Create(This,canvasDrawingSession,drawEventArgs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0090 */
/* [local] */ 

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0090 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0090_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("FB86169F-25D4-4551-BD8F-214BEAF0AC24")
                            ICanvasDrawEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DrawingSession( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasDrawEventArgs = __uuidof(ICanvasDrawEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_get_DrawingSession(This,value)	\
    ( (This)->lpVtbl -> get_DrawingSession(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0091 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0091 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0091_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2124 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2124 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2124_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0092 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0092 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0092_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffcd91a9-b0f6-5e59-b815-0581129240e6")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0093 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0093 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0093_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2125 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2125 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2125_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0094 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0094 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0094_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0094_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b0b7674-c32a-59f5-ba42-79cd2fd7f023")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0095 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0095 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0095_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0095_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("F006E06D-79DB-484F-B898-479CF069C0F5")
                            ICanvasControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_Draw( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_Draw( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasControl = __uuidof(ICanvasControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_Draw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_Draw(This,value,token)	\
    ( (This)->lpVtbl -> add_Draw(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_Draw(This,token)	\
    ( (This)->lpVtbl -> remove_Draw(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0096 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace UI {
namespace Xaml {
class CanvasSwapChainPanel;
} /*Xaml*/
} /*UI*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0096 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0096_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7")
                            ICanvasSwapChainPanel : public IInspectable
                            {
                            public:
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SwapChain( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SwapChain( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasSwapChainPanel = __uuidof(ICanvasSwapChainPanel);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SwapChain )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SwapChain )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain **value);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_put_SwapChain(This,value)	\
    ( (This)->lpVtbl -> put_SwapChain(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_get_SwapChain(This,value)	\
    ( (This)->lpVtbl -> get_SwapChain(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0097 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0097 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0097_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0097_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("2FE755A1-307A-4623-9250-29590485BDB6")
                            ICanvasVirtualImageSourceFactory : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE CreateWithSize( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ ABI::Windows::Foundation::Size size,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator,
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource **imageSource) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualImageSourceFactory = __uuidof(ICanvasVirtualImageSourceFactory);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource **imageSource);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource)	\
    ( (This)->lpVtbl -> CreateWithSize(This,resourceCreator,size,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource)	\
    ( (This)->lpVtbl -> CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_2126 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2126 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2126_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0099 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0099 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0099_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0099_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fed1b996-f368-58b3-bccd-8ebacf6611b2")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0100 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0100 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0100_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0100_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE")
                            ICanvasVirtualImageSource : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                    /* [out][retval] */ ABI::Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::UI::Color clearColor,
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE InvalidateRegion( 
                                    /* [in] */ ABI::Windows::Foundation::Rect region) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RaiseRegionsInvalidatedIfAny( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithSize( 
                                    /* [in] */ ABI::Windows::Foundation::Size size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeight( 
                                    /* [in] */ float width,
                                    /* [in] */ float height) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeightAndDpi( 
                                    /* [in] */ float width,
                                    /* [in] */ float height,
                                    /* [in] */ float dpi) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Device( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Recreate( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator *resourceCreator) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Dpi( 
                                    /* [out][retval] */ float *dpi) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips( 
                                    /* [in] */ INT32 pixels,
                                    /* [out][retval] */ float *dips) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels( 
                                    /* [in] */ float dips,
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                                    /* [out][retval] */ INT32 *pixels) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SizeInPixels( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::BitmapSize *size) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualImageSource = __uuidof(ICanvasVirtualImageSource);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource **value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor clearColor,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect region);
        
        HRESULT ( STDMETHODCALLTYPE *RaiseRegionsInvalidatedIfAny )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ EventRegistrationToken token);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CSize size);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ float width,
            /* [in] */ float height);
        
        HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeightAndDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ float width,
            /* [in] */ float height,
            /* [in] */ float dpi);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Device )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        HRESULT ( STDMETHODCALLTYPE *Recreate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator *resourceCreator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ float *dpi);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ INT32 pixels,
            /* [out][retval] */ float *dips);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [in] */ float dips,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
            /* [out][retval] */ INT32 *pixels);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize *size);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Source(This,value)	\
    ( (This)->lpVtbl -> get_Source(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_CreateDrawingSession(This,clearColor,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,clearColor,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_SuspendDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> SuspendDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResumeDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> ResumeDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_InvalidateRegion(This,region)	\
    ( (This)->lpVtbl -> InvalidateRegion(This,region) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_RaiseRegionsInvalidatedIfAny(This)	\
    ( (This)->lpVtbl -> RaiseRegionsInvalidatedIfAny(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_add_RegionsInvalidated(This,value,token)	\
    ( (This)->lpVtbl -> add_RegionsInvalidated(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_remove_RegionsInvalidated(This,token)	\
    ( (This)->lpVtbl -> remove_RegionsInvalidated(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithSize(This,size)	\
    ( (This)->lpVtbl -> ResizeWithSize(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeight(This,width,height)	\
    ( (This)->lpVtbl -> ResizeWithWidthAndHeight(This,width,height) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeightAndDpi(This,width,height,dpi)	\
    ( (This)->lpVtbl -> ResizeWithWidthAndHeightAndDpi(This,width,height,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Device(This,value)	\
    ( (This)->lpVtbl -> get_Device(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Recreate(This,resourceCreator)	\
    ( (This)->lpVtbl -> Recreate(This,resourceCreator) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Dpi(This,dpi)	\
    ( (This)->lpVtbl -> get_Dpi(This,dpi) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ConvertPixelsToDips(This,pixels,dips)	\
    ( (This)->lpVtbl -> ConvertPixelsToDips(This,pixels,dips) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ConvertDipsToPixels(This,dips,dpiRounding,pixels)	\
    ( (This)->lpVtbl -> ConvertDipsToPixels(This,dips,dpiRounding,pixels) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_SizeInPixels(This,size)	\
    ( (This)->lpVtbl -> get_SizeInPixels(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0101 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource";
#endif
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0101 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0101_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3A21A204-F52F-4E7A-9B3F-94669819D981")
                            ICanvasRegionsInvalidatedEventArgs : public IInspectable
                            {
                            public:
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InvalidatedRegions( 
                                    /* [out] */ UINT32 *count,
                                    /* [out][size_is][size_is][retval] */ ABI::Windows::Foundation::Rect **value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VisibleRegion( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasRegionsInvalidatedEventArgs = __uuidof(ICanvasRegionsInvalidatedEventArgs);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InvalidatedRegions )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out] */ UINT32 *count,
            /* [out][size_is][size_is][retval] */ __x_ABI_CWindows_CFoundation_CRect **value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_InvalidatedRegions(This,count,value)	\
    ( (This)->lpVtbl -> get_InvalidatedRegions(This,count,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_VisibleRegion(This,value)	\
    ( (This)->lpVtbl -> get_VisibleRegion(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0102 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0102 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0102_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2127 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2127 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2127_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0103 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0103 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0103_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82c7431b-0f55-5f54-8dd8-f9a8327df123")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0104 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs */


/* interface __MIDL_itf_Canvas2Eabi_0000_0104 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0104_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0104_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2128 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2128 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2128_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0105 */
/* [local] */ 

#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0105 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0105_v0_0_s_ifspec;

#ifndef ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 



/* interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a63a22f-5ad4-5195-beb6-9b73b4304443")
    __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl *sender,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs *e) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl *sender,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs *e);
        
        END_INTERFACE
    } __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

    interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    {
        CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0106 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0106 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0106_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace UI {
                        namespace Xaml {
                            
                            MIDL_INTERFACE("3C2B5177-7C61-41D2-95AE-FCFC92FD617A")
                            ICanvasVirtualControl : public IInspectable
                            {
                            public:
                                virtual HRESULT STDMETHODCALLTYPE add_CreateResources( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_CreateResources( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReadyToDraw( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated( 
                                    /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
                                    /* [out][retval] */ EventRegistrationToken *token) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated( 
                                    /* [in] */ EventRegistrationToken token) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClearColor( 
                                    /* [in] */ ABI::Windows::UI::Color value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearColor( 
                                    /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession( 
                                    /* [in] */ ABI::Windows::Foundation::Rect updateRectangle,
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession **drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession *drawingSession) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE Invalidate( void) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE InvalidateRegion( 
                                    /* [in] */ ABI::Windows::Foundation::Rect region) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                    /* [out][retval] */ ABI::Windows::Foundation::Size *size) = 0;
                                
                                virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree( void) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseSharedDevice( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseSharedDevice( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer( 
                                    /* [out][retval] */ boolean *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer( 
                                    /* [in] */ boolean value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CustomDevice( 
                                    /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice **value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CustomDevice( 
                                    /* [in] */ ABI::Microsoft::Graphics::Canvas::ICanvasDevice *value) = 0;
                                
                                virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DpiScale( 
                                    /* [out][retval] */ float *value) = 0;
                                
                                virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DpiScale( 
                                    /* [in] */ float ratio) = 0;
                                
                            };

                            extern const __declspec(selectany) IID & IID_ICanvasVirtualControl = __uuidof(ICanvasVirtualControl);

                            
                        }  /* end namespace */
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *add_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs *value,
            /* [out][retval] */ EventRegistrationToken *token);
        
        HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ EventRegistrationToken token);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect updateRectangle,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession **drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession *drawingSession);
        
        HRESULT ( STDMETHODCALLTYPE *Invalidate )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect region);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CSize *size);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice **value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice *value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DpiScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
            /* [in] */ float ratio);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_CreateResources(This,value,token)	\
    ( (This)->lpVtbl -> add_CreateResources(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_CreateResources(This,token)	\
    ( (This)->lpVtbl -> remove_CreateResources(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ReadyToDraw(This,value)	\
    ( (This)->lpVtbl -> get_ReadyToDraw(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_RegionsInvalidated(This,value,token)	\
    ( (This)->lpVtbl -> add_RegionsInvalidated(This,value,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_RegionsInvalidated(This,token)	\
    ( (This)->lpVtbl -> remove_RegionsInvalidated(This,token) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ClearColor(This,value)	\
    ( (This)->lpVtbl -> put_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ClearColor(This,value)	\
    ( (This)->lpVtbl -> get_ClearColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_CreateDrawingSession(This,updateRectangle,drawingSession)	\
    ( (This)->lpVtbl -> CreateDrawingSession(This,updateRectangle,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_SuspendDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> SuspendDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_ResumeDrawingSession(This,drawingSession)	\
    ( (This)->lpVtbl -> ResumeDrawingSession(This,drawingSession) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Invalidate(This)	\
    ( (This)->lpVtbl -> Invalidate(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_InvalidateRegion(This,region)	\
    ( (This)->lpVtbl -> InvalidateRegion(This,region) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_RemoveFromVisualTree(This)	\
    ( (This)->lpVtbl -> RemoveFromVisualTree(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> get_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_UseSharedDevice(This,value)	\
    ( (This)->lpVtbl -> put_UseSharedDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> get_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ForceSoftwareRenderer(This,value)	\
    ( (This)->lpVtbl -> put_ForceSoftwareRenderer(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> get_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_CustomDevice(This,value)	\
    ( (This)->lpVtbl -> put_CustomDevice(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_DpiScale(This,value)	\
    ( (This)->lpVtbl -> get_DpiScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_DpiScale(This,ratio)	\
    ( (This)->lpVtbl -> put_DpiScale(This,ratio) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0107 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ArithmeticCompositeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0107 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0107_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BEEB682B-D64C-5C8B-A1FB-332162ED099C")
                        IArithmeticCompositeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MultiplyAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MultiplyAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source1( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source1( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source2( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source2( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IArithmeticCompositeEffect = __uuidof(IArithmeticCompositeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiplyAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MultiplyAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source1 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source2 )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_MultiplyAmount(This,value)	\
    ( (This)->lpVtbl -> get_MultiplyAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_MultiplyAmount(This,value)	\
    ( (This)->lpVtbl -> put_MultiplyAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1Amount(This,value)	\
    ( (This)->lpVtbl -> get_Source1Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1Amount(This,value)	\
    ( (This)->lpVtbl -> put_Source1Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2Amount(This,value)	\
    ( (This)->lpVtbl -> get_Source2Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2Amount(This,value)	\
    ( (This)->lpVtbl -> put_Source2Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1(This,source)	\
    ( (This)->lpVtbl -> get_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1(This,source)	\
    ( (This)->lpVtbl -> put_Source1(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2(This,source)	\
    ( (This)->lpVtbl -> get_Source2(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2(This,source)	\
    ( (This)->lpVtbl -> put_Source2(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0108 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class AtlasEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAtlasEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0108 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0108_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IAtlasEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD")
                        IAtlasEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PaddingRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PaddingRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IAtlasEffect = __uuidof(IAtlasEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PaddingRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PaddingRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_PaddingRectangle(This,value)	\
    ( (This)->lpVtbl -> get_PaddingRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_PaddingRectangle(This,value)	\
    ( (This)->lpVtbl -> put_PaddingRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0109 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.AtlasEffect";
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode
    {
        BlendEffectMode_Multiply	= 0,
        BlendEffectMode_Screen	= 1,
        BlendEffectMode_Darken	= 2,
        BlendEffectMode_Lighten	= 3,
        BlendEffectMode_Dissolve	= 4,
        BlendEffectMode_ColorBurn	= 5,
        BlendEffectMode_LinearBurn	= 6,
        BlendEffectMode_DarkerColor	= 7,
        BlendEffectMode_LighterColor	= 8,
        BlendEffectMode_ColorDodge	= 9,
        BlendEffectMode_LinearDodge	= 10,
        BlendEffectMode_Overlay	= 11,
        BlendEffectMode_SoftLight	= 12,
        BlendEffectMode_HardLight	= 13,
        BlendEffectMode_VividLight	= 14,
        BlendEffectMode_LinearLight	= 15,
        BlendEffectMode_PinLight	= 16,
        BlendEffectMode_HardMix	= 17,
        BlendEffectMode_Difference	= 18,
        BlendEffectMode_Exclusion	= 19,
        BlendEffectMode_Hue	= 20,
        BlendEffectMode_Saturation	= 21,
        BlendEffectMode_Color	= 22,
        BlendEffectMode_Luminosity	= 23,
        BlendEffectMode_Subtract	= 24,
        BlendEffectMode_Division	= 25
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BlendEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBlendEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0109 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM BlendEffectMode
                        {
                            Multiply	= 0,
                            Screen	= 1,
                            Darken	= 2,
                            Lighten	= 3,
                            Dissolve	= 4,
                            ColorBurn	= 5,
                            LinearBurn	= 6,
                            DarkerColor	= 7,
                            LighterColor	= 8,
                            ColorDodge	= 9,
                            LinearDodge	= 10,
                            Overlay	= 11,
                            SoftLight	= 12,
                            HardLight	= 13,
                            VividLight	= 14,
                            LinearLight	= 15,
                            PinLight	= 16,
                            HardMix	= 17,
                            Difference	= 18,
                            Exclusion	= 19,
                            Hue	= 20,
                            Saturation	= 21,
                            Color	= 22,
                            Luminosity	= 23,
                            Subtract	= 24,
                            Division	= 25
                        } 	BlendEffectMode;
                    

                    const BlendEffectMode BlendEffectMode_Multiply = BlendEffectMode::Multiply;
                    const BlendEffectMode BlendEffectMode_Screen = BlendEffectMode::Screen;
                    const BlendEffectMode BlendEffectMode_Darken = BlendEffectMode::Darken;
                    const BlendEffectMode BlendEffectMode_Lighten = BlendEffectMode::Lighten;
                    const BlendEffectMode BlendEffectMode_Dissolve = BlendEffectMode::Dissolve;
                    const BlendEffectMode BlendEffectMode_ColorBurn = BlendEffectMode::ColorBurn;
                    const BlendEffectMode BlendEffectMode_LinearBurn = BlendEffectMode::LinearBurn;
                    const BlendEffectMode BlendEffectMode_DarkerColor = BlendEffectMode::DarkerColor;
                    const BlendEffectMode BlendEffectMode_LighterColor = BlendEffectMode::LighterColor;
                    const BlendEffectMode BlendEffectMode_ColorDodge = BlendEffectMode::ColorDodge;
                    const BlendEffectMode BlendEffectMode_LinearDodge = BlendEffectMode::LinearDodge;
                    const BlendEffectMode BlendEffectMode_Overlay = BlendEffectMode::Overlay;
                    const BlendEffectMode BlendEffectMode_SoftLight = BlendEffectMode::SoftLight;
                    const BlendEffectMode BlendEffectMode_HardLight = BlendEffectMode::HardLight;
                    const BlendEffectMode BlendEffectMode_VividLight = BlendEffectMode::VividLight;
                    const BlendEffectMode BlendEffectMode_LinearLight = BlendEffectMode::LinearLight;
                    const BlendEffectMode BlendEffectMode_PinLight = BlendEffectMode::PinLight;
                    const BlendEffectMode BlendEffectMode_HardMix = BlendEffectMode::HardMix;
                    const BlendEffectMode BlendEffectMode_Difference = BlendEffectMode::Difference;
                    const BlendEffectMode BlendEffectMode_Exclusion = BlendEffectMode::Exclusion;
                    const BlendEffectMode BlendEffectMode_Hue = BlendEffectMode::Hue;
                    const BlendEffectMode BlendEffectMode_Saturation = BlendEffectMode::Saturation;
                    const BlendEffectMode BlendEffectMode_Color = BlendEffectMode::Color;
                    const BlendEffectMode BlendEffectMode_Luminosity = BlendEffectMode::Luminosity;
                    const BlendEffectMode BlendEffectMode_Subtract = BlendEffectMode::Subtract;
                    const BlendEffectMode BlendEffectMode_Division = BlendEffectMode::Division;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0109_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0109_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBlendEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("5673248E-7266-5E49-B2AB-2589D5D875C3")
                        IBlendEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Background( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Background( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Foreground( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Foreground( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBlendEffect = __uuidof(IBlendEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Foreground )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Foreground )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Background(This,source)	\
    ( (This)->lpVtbl -> get_Background(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Background(This,source)	\
    ( (This)->lpVtbl -> put_Background(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Foreground(This,source)	\
    ( (This)->lpVtbl -> get_Foreground(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Foreground(This,source)	\
    ( (This)->lpVtbl -> put_Foreground(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0110 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.BlendEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BorderEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBorderEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0110 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0110_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBorderEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("31602441-15DB-5B4A-98DD-BA4247548B41")
                        IBorderEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendX( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendX( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ExtendY( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ExtendY( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBorderEffect = __uuidof(IBorderEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendX )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendY )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendX(This,value)	\
    ( (This)->lpVtbl -> get_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendX(This,value)	\
    ( (This)->lpVtbl -> put_ExtendX(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendY(This,value)	\
    ( (This)->lpVtbl -> get_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendY(This,value)	\
    ( (This)->lpVtbl -> put_ExtendY(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0111 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.BorderEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class BrightnessEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBrightnessEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0111 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0111_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BECED347-025F-5727-8F7D-498D67DF557E")
                        IBrightnessEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WhitePoint( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WhitePoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlackPoint( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlackPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IBrightnessEffect = __uuidof(IBrightnessEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WhitePoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WhitePoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlackPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlackPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_WhitePoint(This,value)	\
    ( (This)->lpVtbl -> get_WhitePoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_WhitePoint(This,value)	\
    ( (This)->lpVtbl -> put_WhitePoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_BlackPoint(This,value)	\
    ( (This)->lpVtbl -> get_BlackPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_BlackPoint(This,value)	\
    ( (This)->lpVtbl -> put_BlackPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0112 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.BrightnessEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorMatrixEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0112 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0112_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0112_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("E6AE54C4-883D-588E-B451-E9EBE3830437")
                        IColorMatrixEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorMatrix( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorMatrix( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorMatrixEffect = __uuidof(IColorMatrixEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ColorMatrix(This,value)	\
    ( (This)->lpVtbl -> get_ColorMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ColorMatrix(This,value)	\
    ( (This)->lpVtbl -> put_ColorMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> get_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_AlphaMode(This,value)	\
    ( (This)->lpVtbl -> put_AlphaMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0113 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ColorSourceEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorSourceEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0113 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0113_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0113_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("25F942C7-7FEE-518A-BA7B-22A0060AF7F6")
                        IColorSourceEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IColorSourceEffect = __uuidof(IColorSourceEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_get_Color(This,value)	\
    ( (This)->lpVtbl -> get_Color(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_put_Color(This,value)	\
    ( (This)->lpVtbl -> put_Color(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0114 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorSourceEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class CompositeEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif



/* interface __MIDL_itf_Canvas2Eabi_0000_0114 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0114_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2129 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2129 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2129_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0115 */
/* [local] */ 

#ifndef DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#define DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0115 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0115_v0_0_s_ifspec;

#ifndef ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96b833f6-dc12-52a2-ac0b-17925fd36109")
    __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **current) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HasCurrent( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ boolean *hasCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **current);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ boolean *hasCurrent);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0116 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0116 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0116_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2130 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2130 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2130_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0117 */
/* [local] */ 

#ifndef DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#define DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0117 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0117_v0_0_s_ifspec;

#ifndef ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2f743550-4890-518d-92aa-407fc86d6064")
    __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE First( 
            /* [retval][out] */ __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **first) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *First )( 
            __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __FIIterator_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **first);
        
        END_INTERFACE
    } __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0118 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0118 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0118_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2131 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2131 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2131_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0119 */
/* [local] */ 

#ifndef DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#define DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0119 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0119_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0119_v0_0_s_ifspec;

#ifndef ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5d935d5-13a2-5196-b115-8c34629869c0")
    __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        END_INTERFACE
    } __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0120 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */


/* interface __MIDL_itf_Canvas2Eabi_0000_0120 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0120_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_2132 */




/* interface __MIDL_itf_Canvas2Eabi_0000_2132 */




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_2132_v0_0_s_ifspec;

/* interface __MIDL_itf_Canvas2Eabi_0000_0121 */
/* [local] */ 

#ifndef DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#define DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
#if !defined(__cplusplus) || defined(RO_NO_TEMPLATE_NAME)


/* interface __MIDL_itf_Canvas2Eabi_0000_0121 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0121_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0121_v0_0_s_ifspec;

#ifndef ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

/* interface __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 



/* interface __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5889e5fd-01d9-55f3-b896-b0e1b4a7b412")
    __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource : public IInspectable
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **item) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ unsigned int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetView( 
            /* [retval][out] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ unsigned int index,
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ unsigned int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAtEnd( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMany( 
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceAll( 
            /* [in] */ unsigned int count,
            /* [size_is][in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **value) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ TrustLevel *trustLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **item);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ unsigned int *size);
        
        HRESULT ( STDMETHODCALLTYPE *GetView )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __FIVectorView_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **view);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *item,
            /* [out] */ unsigned int *index,
            /* [retval][out] */ boolean *found);
        
        HRESULT ( STDMETHODCALLTYPE *SetAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *InsertAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int index);
        
        HRESULT ( STDMETHODCALLTYPE *Append )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **items,
            /* [retval][out] */ unsigned int *actual);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceAll )( 
            __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int count,
            /* [size_is][in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **value);
        
        END_INTERFACE
    } __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl;

    interface __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource
    {
        CONST_VTBL struct __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0122 */
/* [local] */ 

#endif /* pinterface */
#endif /* DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICompositeEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0122 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0122_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICompositeEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F8808C48-CDC7-5DB4-807C-B9344FF71984")
                        ICompositeEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasComposite value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sources( 
                                /* [out][retval] */ __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICompositeEffect = __uuidof(ICompositeEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sources )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
            /* [out][retval] */ __FIVector_1_Microsoft__CGraphics__CCanvas__CEffects__CIGraphicsEffectSource **value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Sources(This,value)	\
    ( (This)->lpVtbl -> get_Sources(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0123 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CompositeEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ConvolveMatrixEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0123 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0123_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0123_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("82961257-A78D-5440-8026-AF57D4A76A9E")
                        IConvolveMatrixEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelScale( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelScale( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelWidth( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelWidth( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelHeight( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelHeight( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelMatrix( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelMatrix( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Divisor( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Divisor( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_KernelOffset( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_KernelOffset( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PreserveAlpha( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PreserveAlpha( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IConvolveMatrixEffect = __uuidof(IConvolveMatrixEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelWidth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelHeight )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Divisor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Divisor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_KernelOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_KernelOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreserveAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreserveAlpha )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelScale(This,value)	\
    ( (This)->lpVtbl -> get_KernelScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelScale(This,value)	\
    ( (This)->lpVtbl -> put_KernelScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelWidth(This,value)	\
    ( (This)->lpVtbl -> get_KernelWidth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelWidth(This,value)	\
    ( (This)->lpVtbl -> put_KernelWidth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelHeight(This,value)	\
    ( (This)->lpVtbl -> get_KernelHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelHeight(This,value)	\
    ( (This)->lpVtbl -> put_KernelHeight(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelMatrix(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_KernelMatrix(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelMatrix(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_KernelMatrix(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Divisor(This,value)	\
    ( (This)->lpVtbl -> get_Divisor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Divisor(This,value)	\
    ( (This)->lpVtbl -> put_Divisor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelOffset(This,value)	\
    ( (This)->lpVtbl -> get_KernelOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelOffset(This,value)	\
    ( (This)->lpVtbl -> put_KernelOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_PreserveAlpha(This,value)	\
    ( (This)->lpVtbl -> get_PreserveAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_PreserveAlpha(This,value)	\
    ( (This)->lpVtbl -> put_PreserveAlpha(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0124 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class CropEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICropEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICropEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0124 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0124_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0124_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ICropEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE")
                        ICropEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ICropEffect = __uuidof(ICropEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0125 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CropEffect[] = L"Microsoft.Graphics.Canvas.Effects.CropEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DirectionalBlurEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0125 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0125_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("5D155C4B-0882-506A-A8E1-12E1EAD17F0A")
                        IDirectionalBlurEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDirectionalBlurEffect = __uuidof(IDirectionalBlurEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0126 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DiscreteTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0126 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0126_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7F1F54F9-21B5-5B91-9506-832C536FDDFA")
                        IDiscreteTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDiscreteTransferEffect = __uuidof(IDiscreteTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0127 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DisplacementMapEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0127 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0127_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0127_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("45F57C50-D4D9-5AF1-8A6B-50378F3498A2")
                        IDisplacementMapEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XChannelSelect( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_XChannelSelect( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YChannelSelect( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YChannelSelect( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Displacement( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Displacement( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDisplacementMapEffect = __uuidof(IDisplacementMapEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YChannelSelect )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Displacement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Displacement )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Amount(This,value)	\
    ( (This)->lpVtbl -> get_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Amount(This,value)	\
    ( (This)->lpVtbl -> put_Amount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_XChannelSelect(This,value)	\
    ( (This)->lpVtbl -> get_XChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_XChannelSelect(This,value)	\
    ( (This)->lpVtbl -> put_XChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_YChannelSelect(This,value)	\
    ( (This)->lpVtbl -> get_YChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_YChannelSelect(This,value)	\
    ( (This)->lpVtbl -> put_YChannelSelect(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Displacement(This,source)	\
    ( (This)->lpVtbl -> get_Displacement(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Displacement(This,source)	\
    ( (This)->lpVtbl -> put_Displacement(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0128 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DistantDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0128 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0128_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D501B10B-B445-50F4-8B8F-CDECFCDD1321")
                        IDistantDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Azimuth( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Azimuth( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDistantDiffuseEffect = __uuidof(IDistantDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Azimuth(This,value)	\
    ( (This)->lpVtbl -> get_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Azimuth(This,value)	\
    ( (This)->lpVtbl -> put_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Elevation(This,value)	\
    ( (This)->lpVtbl -> get_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Elevation(This,value)	\
    ( (This)->lpVtbl -> put_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0129 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DistantSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0129 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0129_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0129_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("A7A828DF-3072-545F-8D75-86C100F03231")
                        IDistantSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Azimuth( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Azimuth( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Elevation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Elevation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDistantSpecularEffect = __uuidof(IDistantSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Azimuth )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Elevation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Azimuth(This,value)	\
    ( (This)->lpVtbl -> get_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Azimuth(This,value)	\
    ( (This)->lpVtbl -> put_Azimuth(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Elevation(This,value)	\
    ( (This)->lpVtbl -> get_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Elevation(This,value)	\
    ( (This)->lpVtbl -> put_Elevation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0130 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class DpiCompensationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0130 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0130_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("636597CD-F94A-55B6-9CF0-694A53D638EA")
                        IDpiCompensationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceDpi( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceDpi( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IDpiCompensationEffect = __uuidof(IDpiCompensationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceDpi )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_SourceDpi(This,value)	\
    ( (This)->lpVtbl -> get_SourceDpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_SourceDpi(This,value)	\
    ( (This)->lpVtbl -> put_SourceDpi(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0131 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class GammaTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0131 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0131_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0131_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("B4576B6B-6C3E-534A-8576-D46DF4FCE93D")
                        IGammaTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaAmplitude( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaAmplitude( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGammaTransferEffect = __uuidof(IGammaTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaAmplitude )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_RedAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_RedAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedExponent(This,value)	\
    ( (This)->lpVtbl -> get_RedExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedExponent(This,value)	\
    ( (This)->lpVtbl -> put_RedExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedOffset(This,value)	\
    ( (This)->lpVtbl -> get_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedOffset(This,value)	\
    ( (This)->lpVtbl -> put_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_GreenAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_GreenAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenExponent(This,value)	\
    ( (This)->lpVtbl -> get_GreenExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenExponent(This,value)	\
    ( (This)->lpVtbl -> put_GreenExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> get_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> put_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_BlueAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_BlueAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueExponent(This,value)	\
    ( (This)->lpVtbl -> get_BlueExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueExponent(This,value)	\
    ( (This)->lpVtbl -> put_BlueExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> get_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> put_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaAmplitude(This,value)	\
    ( (This)->lpVtbl -> get_AlphaAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaAmplitude(This,value)	\
    ( (This)->lpVtbl -> put_AlphaAmplitude(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaExponent(This,value)	\
    ( (This)->lpVtbl -> get_AlphaExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaExponent(This,value)	\
    ( (This)->lpVtbl -> put_AlphaExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> get_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> put_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0132 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.GammaTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class GaussianBlurEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0132 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0132_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("A82EC394-6734-5830-9123-2C82B27DD3C0")
                        IGaussianBlurEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IGaussianBlurEffect = __uuidof(IGaussianBlurEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0133 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class HueRotationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueRotationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0133 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0133_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("C172EBF2-E35F-58AE-AD2C-561ECEAF2694")
                        IHueRotationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Angle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Angle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IHueRotationEffect = __uuidof(IHueRotationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Angle(This,value)	\
    ( (This)->lpVtbl -> get_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Angle(This,value)	\
    ( (This)->lpVtbl -> put_Angle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0134 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueRotationEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class LinearTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0134 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0134_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("43D27AD0-8937-5FDB-876A-4E91CB47540C")
                        ILinearTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaOffset( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaOffset( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaSlope( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaSlope( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ILinearTransferEffect = __uuidof(ILinearTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaSlope )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedOffset(This,value)	\
    ( (This)->lpVtbl -> get_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedOffset(This,value)	\
    ( (This)->lpVtbl -> put_RedOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedSlope(This,value)	\
    ( (This)->lpVtbl -> get_RedSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedSlope(This,value)	\
    ( (This)->lpVtbl -> put_RedSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> get_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenOffset(This,value)	\
    ( (This)->lpVtbl -> put_GreenOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenSlope(This,value)	\
    ( (This)->lpVtbl -> get_GreenSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenSlope(This,value)	\
    ( (This)->lpVtbl -> put_GreenSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> get_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueOffset(This,value)	\
    ( (This)->lpVtbl -> put_BlueOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueSlope(This,value)	\
    ( (This)->lpVtbl -> get_BlueSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueSlope(This,value)	\
    ( (This)->lpVtbl -> put_BlueSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> get_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaOffset(This,value)	\
    ( (This)->lpVtbl -> put_AlphaOffset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaSlope(This,value)	\
    ( (This)->lpVtbl -> get_AlphaSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaSlope(This,value)	\
    ( (This)->lpVtbl -> put_AlphaSlope(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0135 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.LinearTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class LuminanceToAlphaEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0135 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0135_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0135_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("22364900-AC51-5BD3-8BD2-D626FC9A65F9")
                        ILuminanceToAlphaEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ILuminanceToAlphaEffect = __uuidof(ILuminanceToAlphaEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0136 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect";
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode
    {
        MorphologyEffectMode_Erode	= 0,
        MorphologyEffectMode_Dilate	= 1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class MorphologyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IMorphologyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0136 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM MorphologyEffectMode
                        {
                            Erode	= 0,
                            Dilate	= 1
                        } 	MorphologyEffectMode;
                    

                    const MorphologyEffectMode MorphologyEffectMode_Erode = MorphologyEffectMode::Erode;
                    const MorphologyEffectMode MorphologyEffectMode_Dilate = MorphologyEffectMode::Dilate;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0136_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("FF065FDB-62C8-5808-921E-49EFA43A3D34")
                        IMorphologyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IMorphologyEffect = __uuidof(IMorphologyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Mode(This,value)	\
    ( (This)->lpVtbl -> get_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Mode(This,value)	\
    ( (This)->lpVtbl -> put_Mode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Width(This,value)	\
    ( (This)->lpVtbl -> get_Width(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Width(This,value)	\
    ( (This)->lpVtbl -> put_Width(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Height(This,value)	\
    ( (This)->lpVtbl -> get_Height(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Height(This,value)	\
    ( (This)->lpVtbl -> put_Height(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0137 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_MorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.MorphologyEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class OpacityMetadataEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0137 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0137_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0137_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("099F3299-9B0A-5ED3-B044-4A6FC96F8362")
                        IOpacityMetadataEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpaqueRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IOpacityMetadataEffect = __uuidof(IOpacityMetadataEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_OpaqueRectangle(This,value)	\
    ( (This)->lpVtbl -> get_OpaqueRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_OpaqueRectangle(This,value)	\
    ( (This)->lpVtbl -> put_OpaqueRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0138 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PointDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0138 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0138_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E")
                        IPointDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPointDiffuseEffect = __uuidof(IPointDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0139 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PointSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0139 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0139_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0139_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6")
                        IPointSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPointSpecularEffect = __uuidof(IPointSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0140 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class PremultiplyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0140 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0140_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0140_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D")
                        IPremultiplyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IPremultiplyEffect = __uuidof(IPremultiplyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0141 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.PremultiplyEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SaturationEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISaturationEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0141 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0141_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0141_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISaturationEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("F85A5ED7-7212-57A6-B357-61038961C58D")
                        ISaturationEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Saturation( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Saturation( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISaturationEffect = __uuidof(ISaturationEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Saturation )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Saturation(This,value)	\
    ( (This)->lpVtbl -> get_Saturation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Saturation(This,value)	\
    ( (This)->lpVtbl -> put_Saturation(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0142 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.SaturationEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ScaleEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IScaleEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0142 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0142_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0142_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IScaleEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34")
                        IScaleEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Scale( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Scale( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CenterPoint( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CenterPoint( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sharpness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sharpness( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IScaleEffect = __uuidof(IScaleEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CenterPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CenterPoint )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Scale(This,value)	\
    ( (This)->lpVtbl -> get_Scale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Scale(This,value)	\
    ( (This)->lpVtbl -> put_Scale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_CenterPoint(This,value)	\
    ( (This)->lpVtbl -> get_CenterPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_CenterPoint(This,value)	\
    ( (This)->lpVtbl -> put_CenterPoint(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Sharpness(This,value)	\
    ( (This)->lpVtbl -> get_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Sharpness(This,value)	\
    ( (This)->lpVtbl -> put_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0143 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.ScaleEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class ShadowEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.IShadowEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0143 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0143_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0143_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IShadowEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3947C621-78DA-5489-9927-BE655F4576E2")
                        IShadowEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ShadowColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ShadowColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Optimization( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Optimization( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IShadowEffect = __uuidof(IShadowEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShadowColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShadowColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Optimization )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> get_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_BlurAmount(This,value)	\
    ( (This)->lpVtbl -> put_BlurAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_ShadowColor(This,value)	\
    ( (This)->lpVtbl -> get_ShadowColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_ShadowColor(This,value)	\
    ( (This)->lpVtbl -> put_ShadowColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Optimization(This,value)	\
    ( (This)->lpVtbl -> get_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Optimization(This,value)	\
    ( (This)->lpVtbl -> put_Optimization(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0144 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.ShadowEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SpotDiffuseEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0144 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0144_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0144_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8")
                        ISpotDiffuseEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightTarget( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightTarget( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Focus( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Focus( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LimitingConeAngle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LimitingConeAngle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiffuseAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiffuseAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISpotDiffuseEffect = __uuidof(ISpotDiffuseEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightTarget(This,value)	\
    ( (This)->lpVtbl -> get_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightTarget(This,value)	\
    ( (This)->lpVtbl -> put_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Focus(This,value)	\
    ( (This)->lpVtbl -> get_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Focus(This,value)	\
    ( (This)->lpVtbl -> put_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> get_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> put_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> get_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_DiffuseAmount(This,value)	\
    ( (This)->lpVtbl -> put_DiffuseAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0145 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class SpotSpecularEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0145 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0145_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0145_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("83AE4CD0-80AA-5783-8572-F15E5F85329E")
                        ISpotSpecularEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightPosition( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightPosition( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightTarget( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightTarget( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector3 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Focus( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Focus( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LimitingConeAngle( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LimitingConeAngle( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularExponent( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularExponent( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SpecularAmount( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SpecularAmount( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapScale( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapScale( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LightColor( 
                                /* [out][retval] */ ABI::Windows::UI::Color *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LightColor( 
                                /* [in] */ ABI::Windows::UI::Color value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ISpotSpecularEffect = __uuidof(ISpotSpecularEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightPosition )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightTarget )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector3 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focus )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CUI_CColor *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LightColor )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CWindows_CUI_CColor value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightPosition(This,value)	\
    ( (This)->lpVtbl -> get_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightPosition(This,value)	\
    ( (This)->lpVtbl -> put_LightPosition(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightTarget(This,value)	\
    ( (This)->lpVtbl -> get_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightTarget(This,value)	\
    ( (This)->lpVtbl -> put_LightTarget(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Focus(This,value)	\
    ( (This)->lpVtbl -> get_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Focus(This,value)	\
    ( (This)->lpVtbl -> put_Focus(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> get_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LimitingConeAngle(This,value)	\
    ( (This)->lpVtbl -> put_LimitingConeAngle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> get_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularExponent(This,value)	\
    ( (This)->lpVtbl -> put_SpecularExponent(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> get_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularAmount(This,value)	\
    ( (This)->lpVtbl -> put_SpecularAmount(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapScale(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapScale(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightColor(This,value)	\
    ( (This)->lpVtbl -> get_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightColor(This,value)	\
    ( (This)->lpVtbl -> put_LightColor(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapKernelSize(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapKernelSize(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapInterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_HeightMapInterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0146 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TableTransferEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransferEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0146 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0146_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0146_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F")
                        ITableTransferEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RedDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RedDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GreenDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GreenDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlueDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlueDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaTable( 
                                /* [out] */ UINT32 *valueCount,
                                /* [out][size_is][size_is][retval] */ float **valueElements) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaTable( 
                                /* [in] */ UINT32 valueCount,
                                /* [in][size_is] */ float *valueElements) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaDisable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaDisable( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClampOutput( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClampOutput( 
                                /* [in] */ boolean value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITableTransferEffect = __uuidof(ITableTransferEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RedDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out] */ UINT32 *valueCount,
            /* [out][size_is][size_is][retval] */ float **valueElements);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ UINT32 valueCount,
            /* [in][size_is] */ float *valueElements);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ boolean value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_RedTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedDisable(This,value)	\
    ( (This)->lpVtbl -> get_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedDisable(This,value)	\
    ( (This)->lpVtbl -> put_RedDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_GreenTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> get_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenDisable(This,value)	\
    ( (This)->lpVtbl -> put_GreenDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_BlueTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> get_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueDisable(This,value)	\
    ( (This)->lpVtbl -> put_BlueDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> get_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaTable(This,valueCount,valueElements)	\
    ( (This)->lpVtbl -> put_AlphaTable(This,valueCount,valueElements) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> get_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaDisable(This,value)	\
    ( (This)->lpVtbl -> put_AlphaDisable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> get_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_ClampOutput(This,value)	\
    ( (This)->lpVtbl -> put_ClampOutput(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0147 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransferEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TileEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITileEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITileEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0147 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0147_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0147_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITileEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("78A809CB-1154-5AD6-A880-E3A175772815")
                        ITileEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceRectangle( 
                                /* [out][retval] */ ABI::Windows::Foundation::Rect *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceRectangle( 
                                /* [in] */ ABI::Windows::Foundation::Rect value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITileEffect = __uuidof(ITileEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out][retval] */ __x_ABI_CWindows_CFoundation_CRect *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ __x_ABI_CWindows_CFoundation_CRect value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> get_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_SourceRectangle(This,value)	\
    ( (This)->lpVtbl -> put_SourceRectangle(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0148 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TileEffect[] = L"Microsoft.Graphics.Canvas.Effects.TileEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class Transform2DEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform2DEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0148 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0148_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0148_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("4467D118-33E7-5B1A-87C2-0F1F0497353D")
                        ITransform2DEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix3x2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sharpness( 
                                /* [out][retval] */ float *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sharpness( 
                                /* [in] */ float value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITransform2DEffect = __uuidof(ITransform2DEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix3x2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ float *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sharpness )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ float value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Sharpness(This,value)	\
    ( (This)->lpVtbl -> get_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Sharpness(This,value)	\
    ( (This)->lpVtbl -> put_Sharpness(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0149 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform2DEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class Transform3DEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform3DEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0149 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0149_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0149_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10")
                        ITransform3DEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterpolationMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterpolationMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BorderMode( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderMode( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TransformMatrix( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix4x4 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TransformMatrix( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Matrix4x4 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITransform3DEffect = __uuidof(ITransform3DEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderMode )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CMatrix4x4 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> get_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_InterpolationMode(This,value)	\
    ( (This)->lpVtbl -> put_InterpolationMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_BorderMode(This,value)	\
    ( (This)->lpVtbl -> get_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_BorderMode(This,value)	\
    ( (This)->lpVtbl -> put_BorderMode(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> get_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_TransformMatrix(This,value)	\
    ( (This)->lpVtbl -> put_TransformMatrix(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0150 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform3DEffect";
#endif
#if !defined(__cplusplus)
#if !defined(__cplusplus)

typedef /* [v1_enum] */ 
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise
    {
        TurbulenceEffectNoise_FractalSum	= 0,
        TurbulenceEffectNoise_Turbulence	= 1
    } 	__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise;


#endif /* end if !defined(__cplusplus) */


#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class TurbulenceEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0150 */
/* [local] */ 

#ifdef __cplusplus

} /* end extern "C" */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    
                    typedef /* [v1_enum] */ 
                    MIDL_ENUM TurbulenceEffectNoise
                        {
                            FractalSum	= 0,
                            Turbulence	= 1
                        } 	TurbulenceEffectNoise;
                    

                    const TurbulenceEffectNoise TurbulenceEffectNoise_FractalSum = TurbulenceEffectNoise::FractalSum;
                    const TurbulenceEffectNoise TurbulenceEffectNoise_Turbulence = TurbulenceEffectNoise::Turbulence;
                    
                } /* end namespace */
            } /* end namespace */
        } /* end namespace */
    } /* end namespace */
} /* end namespace */

extern "C" { 
#endif




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0150_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0150_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("1CB1B33D-20E9-564B-856E-37E9FA1D0016")
                        ITurbulenceEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Offset( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Offset( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Size( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Frequency( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Frequency( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Numerics::Vector2 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Octaves( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Octaves( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Seed( 
                                /* [out][retval] */ INT32 *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Seed( 
                                /* [in] */ INT32 value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Noise( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Noise( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value) = 0;
                            
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Tileable( 
                                /* [out][retval] */ boolean *value) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Tileable( 
                                /* [in] */ boolean value) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_ITurbulenceEffect = __uuidof(ITurbulenceEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Offset )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Frequency )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Frequency )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CNumerics_CVector2 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Octaves )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Octaves )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Seed )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ INT32 *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Seed )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ INT32 value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Noise )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Noise )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise value);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tileable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [out][retval] */ boolean *value);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tileable )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
            /* [in] */ boolean value);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Offset(This,value)	\
    ( (This)->lpVtbl -> get_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Offset(This,value)	\
    ( (This)->lpVtbl -> put_Offset(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Size(This,value)	\
    ( (This)->lpVtbl -> get_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Size(This,value)	\
    ( (This)->lpVtbl -> put_Size(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Frequency(This,value)	\
    ( (This)->lpVtbl -> get_Frequency(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Frequency(This,value)	\
    ( (This)->lpVtbl -> put_Frequency(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Octaves(This,value)	\
    ( (This)->lpVtbl -> get_Octaves(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Octaves(This,value)	\
    ( (This)->lpVtbl -> put_Octaves(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Seed(This,value)	\
    ( (This)->lpVtbl -> get_Seed(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Seed(This,value)	\
    ( (This)->lpVtbl -> put_Seed(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Noise(This,value)	\
    ( (This)->lpVtbl -> get_Noise(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Noise(This,value)	\
    ( (This)->lpVtbl -> put_Noise(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Tileable(This,value)	\
    ( (This)->lpVtbl -> get_Tileable(This,value) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Tileable(This,value)	\
    ( (This)->lpVtbl -> put_Tileable(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0151 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.TurbulenceEffect";
#endif
#ifdef __cplusplus
namespace ABI {
namespace Microsoft {
namespace Graphics {
namespace Canvas {
namespace Effects {
class UnPremultiplyEffect;
} /*Effects*/
} /*Canvas*/
} /*Graphics*/
} /*Microsoft*/
}
#endif

#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__)
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect";
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__) */


/* interface __MIDL_itf_Canvas2Eabi_0000_0151 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0151_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0151_v0_0_s_ifspec;

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__

/* interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect */
/* [uuid][object] */ 



/* interface ABI::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect */
/* [uuid][object] */ 


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    } /* end extern "C" */
    namespace ABI {
        namespace Microsoft {
            namespace Graphics {
                namespace Canvas {
                    namespace Effects {
                        
                        MIDL_INTERFACE("73098BB4-DCF1-5403-AF44-3344D2982D40")
                        IUnPremultiplyEffect : public IInspectable
                        {
                        public:
                            virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
                                /* [out][retval] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource **source) = 0;
                            
                            virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
                                /* [in] */ ABI::Microsoft::Graphics::Canvas::Effects::IGraphicsEffectSource *source) = 0;
                            
                        };

                        extern const __declspec(selectany) IID & IID_IUnPremultiplyEffect = __uuidof(IUnPremultiplyEffect);

                        
                    }  /* end namespace */
                }  /* end namespace */
            }  /* end namespace */
        }  /* end namespace */
    }  /* end namespace */
    extern "C" { 
    
#else 	/* C style interface */

    typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIids )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ ULONG *iidCount,
            /* [size_is][size_is][out] */ IID **iids);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ HSTRING *className);
        
        HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out] */ TrustLevel *trustLevel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [out][retval] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource **source);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGraphicsEffectSource *source);
        
        END_INTERFACE
    } __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl;

    interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect
    {
        CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Canvas2Eabi_0000_0152 */
/* [local] */ 

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect";
#endif


/* interface __MIDL_itf_Canvas2Eabi_0000_0152 */
/* [local] */ 



extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0152_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Canvas2Eabi_0000_0152_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HSTRING_UserSize(     unsigned long *, unsigned long            , HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal(  unsigned long *, unsigned char *, HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal(unsigned long *, unsigned char *, HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree(     unsigned long *, HSTRING * ); 

unsigned long             __RPC_USER  HSTRING_UserSize64(     unsigned long *, unsigned long            , HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserMarshal64(  unsigned long *, unsigned char *, HSTRING * ); 
unsigned char * __RPC_USER  HSTRING_UserUnmarshal64(unsigned long *, unsigned char *, HSTRING * ); 
void                      __RPC_USER  HSTRING_UserFree64(     unsigned long *, HSTRING * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


