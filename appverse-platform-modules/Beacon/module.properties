# common module properties
module.name=Beacon
module.api.service.name=beacon

# ios module properties
module.ios.main.class=Appverse.Platform.IPhone.IPhoneBeacon
module.ios.lib.folder=lib
# dll references comma separated
module.ios.lib.references=System.Runtime.dll,Newtonsoft.Json.dll,Robotics.Mobile.Core.dll,Robotics.Mobile.Core.iOS.dll

# android module properties
module.android.main.class=com.gft.appverse.android.beacon.AndroidBeacon
# if the API module is not supported under any Android SDK level, the module could define an alternative main class to be instantiated instead
module.android.notsupportedapi.class=com.gft.appverse.android.beacon.BeaconNotSupportedAPI
module.android.notsupportedapi.level=18

# define the android main class inclusion mode (this is directly related to the available constructors on the class). Possible values: 
# simple --> the instantaion of the class will only receive only the current app Context. Example: new ModuleMainClass(this.getContext())
# with-webview  --> the instantaion of the class will receive the current app Context and the main WebView. Example: new ModuleMainClass(this.getContext(), this.getApplicationWebView())
# with-resultreceiver  --> the same as "simple" mode, but also instantiating a Result Receiver
# with-webview-and-resultreceiver --> the same as "with-webview" mode, but also instantiating a Result Receiver
# default value if not provided: simple
module.android.inclusion.mode=with-webview-and-resultreceiver

# result receiver to handle onActivtyResult  (needs to extend from android.os.ResultReceiver)
module.resultreceiver.class=com.gft.appverse.android.beacon.BeaconResultReceiver
# possible result codes comma separated, at least 1 is required to register a ResultReceiver
module.resultreceiver.codes=6001

