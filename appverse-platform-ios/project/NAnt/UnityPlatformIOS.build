<?xml version="1.0"?>
<project name="Build UNITY Platform iOS using Monotouch framework" default="compile-c">
	
	<property name="dll.name" value="UnityPlatformIOS" overwrite="true"/>
	
	<property name="output.dir" value="../Monotouch/UnityPlatformIOS/UnityPlatformIOS/bin" overwrite="true"/>
	<property name="source.dir" value="../../src/csharp" overwrite="true"/>
	<property name="mode" value="Debug_Simulator" overwrite="true"/>
	
	<property name="build.mode.dir" value="iPhoneSimulator/Debug" if="${mode == 'Debug_Simulator'}" />
	<property name="build.mode.dir" value="iPhoneSimulator/Release" if="${mode == 'Release_Simulator'}" />
	<property name="build.mode.dir" value="iPhone/Debug" if="${mode == 'Debug_Device'}" />
	<property name="build.mode.dir" value="iPhone/Release" if="${mode == 'Release_Device'}" />
	
	<property name="build.dir" value="${output.dir}/${build.mode.dir}" />
	
	<property name="build.core" value="true" overwrite="true"/>
	<property name="core.build.file" value="../../../UnityCore/project/NAnt/UnityCoreMonotouch.build" overwrite="true"/>
	<property name="core.dll" value="../../../UnityCore/project/MonoTouch/UnityCore/UnityCore/bin/${build.mode.dir}/UnityCore.dll"/>
	
	<property name="monotouch.bin.dir" value="/Developer/MonoTouch/usr/bin"/>
	<property name="monotouch.lib.dir" value="/Developer/MonoTouch/usr/lib"/>
	<property name="monotouch.lib.mono" value="mono/Xamarin.iOS"/>
	<property name="monotouch.command.smcs" value="${monotouch.bin.dir}/smcs"/>
	<property name="monotouch.command.mtouch" value="${monotouch.bin.dir}/mtouch"/>
	
	<property name="source.files" value=""/>
	
	<property name="modules.dir" value="../../../UnityPlatformModules"/>

	<property name="platform.iOS.lib" value="../UnityPlatformIOS/lib"/>
	
	<target name="clean">
		<delete dir="${build.dir}" />
    </target>
	
	<target name="compile-module">
		
		<echo message="########## COMPILE MODULE #########"/>  
		
		<echo message="## Should compile ${module.name} module?: ${compile.module.check}" />
		<if test="${compile.module.check=='true'}">
			<echo message="## Compiling ${module.name} module..." />
			
			<property name="module.dir" value="${modules.dir}/${module.project.name}"/>
			<property name="module.build.file" value="${module.dir}/${module.project.name}.iOS.build"/>
			<property name="lib.file.dll" value="../../lib/modules/${module.project.name}.iOS.dll" />
			<property name="module.dll" value="${module.dir}/${module.project.name}.iOS/bin/${build.mode.dir}/${module.project.name}.iOS.dll"/>
			<property name="module.properties.file" value="${module.dir}/module.properties"/>
			<property name="module.javascript.file" value="${module.dir}/module.js"/>
			
			<nant buildfile="${module.build.file}">
				<properties>
					<property name="dll.name" value="${module.project.name}.iOS" />
					<property name="mode" value="${mode}" />
					<property name="lib.core.dll" value="../../UnityCore/project/MonoTouch/UnityCore/UnityCore/bin/${build.mode.dir}/UnityCore.dll" />
				</properties>
			</nant>
			
			<copy file="${module.dll}" tofile="${lib.file.dll}" overwrite="true" />
			<echo message="## ../../lib/modules/${module.project.name}.iOS.dll"/>
			
			<loadproperties file="${module.properties.file}" failonerror ="true"/>
			<property name="module.required.libs" value="" overwrite="true"/> <!-- default required libs : none -->
		
			<foreach item="String" in="${module.ios.lib.references}" delim="," trim="Both" property="module.reference" >
	    		<echo message="${module.dir}/${module.name}.iOS/${module.ios.lib.folder}/${module.reference}" />
				<copy file="${module.dir}/${module.name}.iOS/${module.ios.lib.folder}/${module.reference}" tofile="../../lib/modules/${module.reference}" overwrite="true" />
				<property name="module.required.libs" value="${module.required.libs} /r:../../lib/modules/${module.reference}"/>
	    	</foreach>
			
			<echo message="## ${module.project.name} module - main class: ${module.ios.main.class}"/>
			<echo message="## ${module.project.name} module - service name: ${module.api.service.name}"/>
			
			<exec program="/usr/bin/ant" failonerror="false">
				<arg value="-file"/>
	            <arg value="../../../UnityBuild/appverse_modules_tasks.xml"/>
				<arg value="-Dmodule.main.class=${module.ios.main.class}"/>
				<arg value="-Dmodule.service.name=${module.api.service.name}"/>
	            <arg value="add-module-ios"/>
	        </exec>
			
			<copy file="${module.javascript.file}" tofile="../../lib/modules/module-${module.api.service.name}.js" overwrite="true" failonerror="false"/>
			
		</if>
		
		<property name="reference.lib.dll" value="${module.required.libs} /r:${lib.file.dll}" if="${compile.module.check == 'true'}"/>
		<property name="reference.lib.dll" value="" if="${compile.module.check != 'true'}" />
		
		<echo message="reference.lib.dll (${module.name}):  ${reference.lib.dll}" if="${compile.module.check == 'true'}" />
		
		<echo message="##################################"/>
		
	</target>

    <target name="compile-c" depends="clean">
        <mkdir dir="${build.dir}" />

		<echo message="Compiling C# sources to generate UNITY Platform iOS DLL: ${build.dir}/${dll.name}.dll"/>
		
		<echo message="#### UNITY references: "/>
		<nant buildfile="${core.build.file}" if="${build.core}">
		    <properties>
		        <property name="dll.name" value="UnityCore" />
		        <property name="mode" value="${mode}" />
		    </properties>
		</nant>
		
		<property name="lib.core.dll" value="../../lib/Unity/Debug/UnityCore.dll" if="${mode == 'Debug_Simulator' or mode == 'Debug_Device'}" />
		<property name="lib.core.dll" value="../../lib/Unity/Release/UnityCore.dll" if="${mode == 'Release_Simulator' or mode == 'Release_Device'}" />
		
		<copy file="${core.dll}" tofile="${lib.core.dll}" />
		<echo message="## ${lib.core.dll}" />
		
		<loadtasks assembly="../../../UnityBuild/nantcontrib-0.92/bin/NAnt.Contrib.Tasks.dll" />
		
		<!-- START -Compiling Modules -->
		
		<!-- Compiling AppsFlyer Module (if requested) -->
		<property name="module.name" value="appsflyer"/>
		<property name="module.project.name" value="AppsFlyer"/>
		<property name="compile.module.check" value="${compile.module.appsflyer}"/>
		<call target="compile-module"/>
		<property name="reference.lib.appsflyer.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Adform Module (if requested) -->
		<property name="module.name" value="adform"/>
		<property name="module.project.name" value="Adform"/>
		<property name="compile.module.check" value="${compile.module.adform}"/>
		<call target="compile-module"/>
		<property name="reference.lib.adform.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Analytics Module (if requested) -->
		<property name="module.name" value="analytics"/>
		<property name="module.project.name" value="Analytics"/>
		<property name="compile.module.check" value="${compile.module.analytics}"/>
		<call target="compile-module"/>
		<property name="reference.lib.analytics.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Scanner Module (if requested) -->
		<property name="module.name" value="scanner"/>
		<property name="module.project.name" value="Scanner"/>
		<property name="compile.module.check" value="${compile.module.scanner}"/>
		<call target="compile-module"/>
		<property name="reference.lib.scanner.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Wetrekk Module (if requested) -->
		<property name="module.name" value="webtrekk"/>
		<property name="module.project.name" value="Webtrekk"/>
		<property name="compile.module.check" value="${compile.module.webtrekk}"/>
		<call target="compile-module"/>
		<property name="reference.lib.webtrekk.dll" value="${reference.lib.dll}"/>
			
		<!-- check if it is necessary to copy the native A library, as done before in the iOS main build
		<echo message="Copying Webtrekk library..."/>
		<copy file="${webtrekk.lib}" tofile="${build.dir}/${webtrekk.lib.name}" />
		-->
		
		<!-- Compiling Push Notifications Module (if requested) -->
		<property name="module.name" value="push"/>
		<property name="module.project.name" value="PushNotifications"/>
		<property name="compile.module.check" value="${compile.module.push}"/>
		<call target="compile-module"/>
		<property name="reference.lib.push.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Beacon Module (if requested) -->
		<property name="module.name" value="beacon"/>
		<property name="module.project.name" value="Beacon"/>
		<property name="compile.module.check" value="${compile.module.beacon}"/>
		<call target="compile-module"/>
		<property name="reference.lib.beacon.dll" value="${reference.lib.dll}"/>
        
        <!-- Compiling InfoCert Module (if requested) -->
		<property name="module.name" value="infocert"/>
		<property name="module.project.name" value="InfoCert"/>
		<property name="compile.module.check" value="${compile.module.infocert}"/>
		<call target="compile-module"/>
		<property name="reference.lib.infocert.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling Facebook Module (if requested) -->
		<property name="module.name" value="facebook"/>
		<property name="module.project.name" value="Facebook"/>
		<property name="compile.module.check" value="${compile.module.facebook}"/>
		<call target="compile-module"/>
		<property name="reference.lib.facebook.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling RSA Module (if requested) -->
		<property name="module.name" value="rsa"/>
		<property name="module.project.name" value="RSA"/>
		<property name="compile.module.check" value="${compile.module.rsa}"/>
		<call target="compile-module"/>
		<property name="reference.lib.rsa.dll" value="${reference.lib.dll}"/>
		
		<!-- Compiling USPG Module (if requested) -->
		<property name="module.name" value="uspg"/>
		<property name="module.project.name" value="USPG"/>
		<property name="compile.module.check" value="${compile.module.uspg}"/>
		<call target="compile-module"/>
		<property name="reference.lib.uspg.dll" value="${reference.lib.dll}"/>
			
		<!-- END - Compiling Modules -->
		
		<echo message="## Searching for source files on: ${source.dir}"/>
		<foreach item="File" property="filename">
			<in>
				<items basedir="${source.dir}">
					<include name="**/*.cs" />
				</items>
			</in>
		    <do>
		    	<echo message="## Added source file: ${filename}"/>
				<property name="source.files" value="${source.files}${filename} "/>
		    </do>
		</foreach>
		
		<exec program="${monotouch.command.smcs}" verbose="true">
			<arg value="/noconfig"/>
			<arg value="/out:${build.dir}/${dll.name}.dll"/>
			<arg value="/r:${monotouch.lib.dir}/${monotouch.lib.mono}/System.Xml.dll" />
			<arg value="/r:${monotouch.lib.dir}/${monotouch.lib.mono}/System.Core.dll" />
			<arg value="/r:/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/lib/mono/Xamarin.iOS/Xamarin.iOS.dll" />
			<arg value="/r:${lib.core.dll}" />
			<arg value="/r:${monotouch.lib.dir}/${monotouch.lib.mono}/Mono.Data.Sqlite.dll" />
			<arg value="/r:${monotouch.lib.dir}/${monotouch.lib.mono}/System.Data.dll" />
			<arg value="/r:../../lib/BouncyCastle.Crypto.dll" />
			<arg value="/r:../../lib/SharpZipLib.dll" />
            <arg value="/r:../../lib/AntiDebuggingBinding.dll" />
			<arg line="${reference.lib.analytics.dll}"/>
			<arg line="${reference.lib.scanner.dll}"/>
			<arg line="${reference.lib.webtrekk.dll}"/>
			<arg line="${reference.lib.push.dll}"/>
			<arg line="${reference.lib.beacon.dll}"/>
			<arg line="${reference.lib.appsflyer.dll}"/>
			<arg line="${reference.lib.adform.dll}"/>
            <arg line="${reference.lib.infocert.dll}"/>
            <arg line="${reference.lib.facebook.dll}"/>
            <arg line="${reference.lib.rsa.dll}"/>
            <arg line="${reference.lib.uspg.dll}"/>
			<arg value="/nologo" />
			<arg value="/warn:4" />
			<arg value="/debug:full" if="${mode == 'Debug_Simulator' or mode == 'Debug_Device'}"/>
			<arg value="/optimize-" />
			<arg value="/codepage:utf8" />
			<arg value="/define:DEBUG;MONOTOUCH" if="${mode == 'Debug_Simulator' or mode == 'Debug_Device'}"/>
			<arg value="/t:library" />
			<arg line="${source.files}" />
		</exec>
		
		<exec program="/usr/bin/ant" failonerror="false">
			<arg value="-file"/>
            <arg value="../../../UnityBuild/appverse_modules_tasks.xml"/>
			<arg value="-Dplatform=ios"/>
            <arg value="clean-modules-tokens"/>
        </exec>
		
	</target>
	
	<target name="include-modules-plist-keys">
		
		<echo message="########## INCLUDE MODULES PLIST KEYS #########"/>  
		
		<!-- Include Facebook Module Info.plist (if requested) -->
		<property name="module.name" value="facebook"/>
		<property name="module.project.name" value="Facebook"/>
		<property name="compile.module.check" value="${compile.module.facebook}"/>
		<call target="include-module-plist-keys"/>
		
	</target>
	
	<target name="include-module-plist-keys">
		
		<if test="${compile.module.check=='true'}">
			<echo message="## Including INFO.plist keys for ${module.name} module..." />
			
			<property name="module.dir" value="${modules.dir}/${module.project.name}"/>
			<property name="module.build.file" value="${module.dir}/${module.project.name}.iOS.build"/>
			
			<nant buildfile="${module.build.file}" target="include-plist-keys">
				<properties>
					<property name="mode" value="${mode}" />
					<property name="plist.build.dir" value="${plist.build.dir}" />
					<property name="config.files.dir" value="${config.files.dir}" />
				</properties>
			</nant>
		</if>
			
		<echo message="##################################"/>
		
	</target>
	
</project>
